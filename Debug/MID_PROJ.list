
MID_PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c4  080075c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075cc  080075cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075cc  080075cc  000175cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080075d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e08  20000074  08007648  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e7c  08007648  00023e7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186e5  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d23  00000000  00000000  00038787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0003da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df91  00000000  00000000  0003ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c2d  00000000  00000000  0006cdd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111aef  00000000  00000000  00082a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001944f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb0  00000000  00000000  00194548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08007488 	.word	0x08007488

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08007488 	.word	0x08007488

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_FREERTOS_Init+0x30>)
 80005e0:	1d3c      	adds	r4, r7, #4
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fcd7 	bl	8004fa8 <osThreadCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <MX_FREERTOS_Init+0x34>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bdb0      	pop	{r4, r5, r7, pc}
 8000608:	080074ac 	.word	0x080074ac
 800060c:	20003ddc 	.word	0x20003ddc

08000610 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f004 fd11 	bl	8005040 <osDelay>
 800061e:	e7fb      	b.n	8000618 <StartDefaultTask+0x8>

08000620 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800062a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062c:	4907      	ldr	r1, [pc, #28]	; (800064c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4013      	ands	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	40023800 	.word	0x40023800

08000650 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	041a      	lsls	r2, r3, #16
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	619a      	str	r2, [r3, #24]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000686:	2004      	movs	r0, #4
 8000688:	f7ff ffca 	bl	8000620 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800068c:	2002      	movs	r0, #2
 800068e:	f7ff ffc7 	bl	8000620 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000692:	2008      	movs	r0, #8
 8000694:	f7ff ffc4 	bl	8000620 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 8000698:	2101      	movs	r1, #1
 800069a:	4847      	ldr	r0, [pc, #284]	; (80007b8 <MX_GPIO_Init+0x148>)
 800069c:	f7ff ffd8 	bl	8000650 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_3);
 80006a0:	2108      	movs	r1, #8
 80006a2:	4845      	ldr	r0, [pc, #276]	; (80007b8 <MX_GPIO_Init+0x148>)
 80006a4:	f7ff ffd4 	bl	8000650 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80006a8:	2101      	movs	r1, #1
 80006aa:	4844      	ldr	r0, [pc, #272]	; (80007bc <MX_GPIO_Init+0x14c>)
 80006ac:	f7ff ffd0 	bl	8000650 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14);
 80006b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b4:	4841      	ldr	r0, [pc, #260]	; (80007bc <MX_GPIO_Init+0x14c>)
 80006b6:	f7ff ffcb 	bl	8000650 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8);
 80006ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006be:	483e      	ldr	r0, [pc, #248]	; (80007b8 <MX_GPIO_Init+0x148>)
 80006c0:	f7ff ffc6 	bl	8000650 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_9);
 80006c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c8:	483b      	ldr	r0, [pc, #236]	; (80007b8 <MX_GPIO_Init+0x148>)
 80006ca:	f7ff ffc1 	bl	8000650 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	483a      	ldr	r0, [pc, #232]	; (80007bc <MX_GPIO_Init+0x14c>)
 80006d2:	f7ff ffbd 	bl	8000650 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80006d6:	2301      	movs	r3, #1
 80006d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006da:	2301      	movs	r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4832      	ldr	r0, [pc, #200]	; (80007b8 <MX_GPIO_Init+0x148>)
 80006f0:	f003 fa64 	bl	8003bbc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80006f4:	2308      	movs	r3, #8
 80006f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	482a      	ldr	r0, [pc, #168]	; (80007b8 <MX_GPIO_Init+0x148>)
 800070e:	f003 fa55 	bl	8003bbc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000712:	2301      	movs	r3, #1
 8000714:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000716:	2301      	movs	r3, #1
 8000718:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	463b      	mov	r3, r7
 8000728:	4619      	mov	r1, r3
 800072a:	4824      	ldr	r0, [pc, #144]	; (80007bc <MX_GPIO_Init+0x14c>)
 800072c:	f003 fa46 	bl	8003bbc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000734:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000736:	2301      	movs	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	463b      	mov	r3, r7
 8000748:	4619      	mov	r1, r3
 800074a:	481c      	ldr	r0, [pc, #112]	; (80007bc <MX_GPIO_Init+0x14c>)
 800074c:	f003 fa36 	bl	8003bbc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000754:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4813      	ldr	r0, [pc, #76]	; (80007b8 <MX_GPIO_Init+0x148>)
 800076c:	f003 fa26 	bl	8003bbc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000774:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000776:	2301      	movs	r3, #1
 8000778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <MX_GPIO_Init+0x148>)
 800078c:	f003 fa16 	bl	8003bbc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000794:	2301      	movs	r3, #1
 8000796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_GPIO_Init+0x14c>)
 80007aa:	f003 fa07 	bl	8003bbc <LL_GPIO_Init>

}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40020800 	.word	0x40020800
 80007bc:	40020400 	.word	0x40020400

080007c0 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d101      	bne.n	80007d8 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80007d4:	2301      	movs	r3, #1
 80007d6:	e000      	b.n	80007da <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	0d5b      	lsrs	r3, r3, #21
 80007fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <LL_I2C_HandleTransfer+0x48>)
 8000804:	430b      	orrs	r3, r1
 8000806:	43db      	mvns	r3, r3
 8000808:	401a      	ands	r2, r3
 800080a:	68b9      	ldr	r1, [r7, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4319      	orrs	r1, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	041b      	lsls	r3, r3, #16
 8000814:	4319      	orrs	r1, r3
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	4319      	orrs	r1, r3
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	430b      	orrs	r3, r1
 800081e:	431a      	orrs	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	03ff7bff 	.word	0x03ff7bff

08000834 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8000840:	78fa      	ldrb	r2, [r7, #3]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <lcd_send_cmd>:

#include "i2c-lcd.h"
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af02      	add	r7, sp, #8
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f023 030f 	bic.w	r3, r3, #15
 8000864:	74fb      	strb	r3, [r7, #19]
	data_l = ((cmd<<4)&0xf0);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	74bb      	strb	r3, [r7, #18]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	f043 030c 	orr.w	r3, r3, #12
 8000872:	b2db      	uxtb	r3, r3
 8000874:	733b      	strb	r3, [r7, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000876:	7cfb      	ldrb	r3, [r7, #19]
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	b2db      	uxtb	r3, r3
 800087e:	737b      	strb	r3, [r7, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000880:	7cbb      	ldrb	r3, [r7, #18]
 8000882:	f043 030c 	orr.w	r3, r3, #12
 8000886:	b2db      	uxtb	r3, r3
 8000888:	73bb      	strb	r3, [r7, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800088a:	7cbb      	ldrb	r3, [r7, #18]
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	b2db      	uxtb	r3, r3
 8000892:	73fb      	strb	r3, [r7, #15]
	LL_I2C_HandleTransfer(I2C2, SLAVE_ADDRESS_LCD, LL_I2C_ADDRSLAVE_7BIT, sizeof(data_t), LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <lcd_send_cmd+0x94>)
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2304      	movs	r3, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	214e      	movs	r1, #78	; 0x4e
 80008a4:	4811      	ldr	r0, [pc, #68]	; (80008ec <lcd_send_cmd+0x98>)
 80008a6:	f7ff ff9f 	bl	80007e8 <LL_I2C_HandleTransfer>
    for(int i=0;i<4; i++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e012      	b.n	80008d6 <lcd_send_cmd+0x82>
    {
        while(!LL_I2C_IsActiveFlag_TXIS(I2C2));
 80008b0:	bf00      	nop
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <lcd_send_cmd+0x98>)
 80008b4:	f7ff ff84 	bl	80007c0 <LL_I2C_IsActiveFlag_TXIS>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f9      	beq.n	80008b2 <lcd_send_cmd+0x5e>
        LL_I2C_TransmitData8(I2C2, data_t[i]);
 80008be:	f107 020c 	add.w	r2, r7, #12
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	4413      	add	r3, r2
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4808      	ldr	r0, [pc, #32]	; (80008ec <lcd_send_cmd+0x98>)
 80008cc:	f7ff ffb2 	bl	8000834 <LL_I2C_TransmitData8>
    for(int i=0;i<4; i++)
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3301      	adds	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	dde9      	ble.n	80008b0 <lcd_send_cmd+0x5c>
    }
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	80002000 	.word	0x80002000
 80008ec:	40005800 	.word	0x40005800

080008f0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]

	 char data_u, data_l;
		uint8_t data_t[4];
		data_u = (data&0xf0);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f023 030f 	bic.w	r3, r3, #15
 8000900:	74fb      	strb	r3, [r7, #19]
		data_l = ((data<<4)&0xf0);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	74bb      	strb	r3, [r7, #18]
		data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000908:	7cfb      	ldrb	r3, [r7, #19]
 800090a:	f043 030d 	orr.w	r3, r3, #13
 800090e:	b2db      	uxtb	r3, r3
 8000910:	733b      	strb	r3, [r7, #12]
		data_t[1] = data_u|0x09;  //en=0, rs=0
 8000912:	7cfb      	ldrb	r3, [r7, #19]
 8000914:	f043 0309 	orr.w	r3, r3, #9
 8000918:	b2db      	uxtb	r3, r3
 800091a:	737b      	strb	r3, [r7, #13]
		data_t[2] = data_l|0x0D;  //en=1, rs=0
 800091c:	7cbb      	ldrb	r3, [r7, #18]
 800091e:	f043 030d 	orr.w	r3, r3, #13
 8000922:	b2db      	uxtb	r3, r3
 8000924:	73bb      	strb	r3, [r7, #14]
		data_t[3] = data_l|0x09;  //en=0, rs=0
 8000926:	7cbb      	ldrb	r3, [r7, #18]
 8000928:	f043 0309 	orr.w	r3, r3, #9
 800092c:	b2db      	uxtb	r3, r3
 800092e:	73fb      	strb	r3, [r7, #15]
		LL_I2C_HandleTransfer(I2C2, SLAVE_ADDRESS_LCD, LL_I2C_ADDRSLAVE_7BIT, sizeof(data_t), LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <lcd_send_data+0x94>)
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2304      	movs	r3, #4
 800093c:	2200      	movs	r2, #0
 800093e:	214e      	movs	r1, #78	; 0x4e
 8000940:	4811      	ldr	r0, [pc, #68]	; (8000988 <lcd_send_data+0x98>)
 8000942:	f7ff ff51 	bl	80007e8 <LL_I2C_HandleTransfer>
	    for(int i=0;i<4; i++)
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e012      	b.n	8000972 <lcd_send_data+0x82>
	    {
	        while(!LL_I2C_IsActiveFlag_TXIS(I2C2));
 800094c:	bf00      	nop
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <lcd_send_data+0x98>)
 8000950:	f7ff ff36 	bl	80007c0 <LL_I2C_IsActiveFlag_TXIS>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0f9      	beq.n	800094e <lcd_send_data+0x5e>
	        LL_I2C_TransmitData8(I2C2, data_t[i]);
 800095a:	f107 020c 	add.w	r2, r7, #12
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4413      	add	r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	4808      	ldr	r0, [pc, #32]	; (8000988 <lcd_send_data+0x98>)
 8000968:	f7ff ff64 	bl	8000834 <LL_I2C_TransmitData8>
	    for(int i=0;i<4; i++)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	2b03      	cmp	r3, #3
 8000976:	dde9      	ble.n	800094c <lcd_send_data+0x5c>
	    }


}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	80002000 	.word	0x80002000
 8000988:	40005800 	.word	0x40005800

0800098c <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	LL_mDelay(50);  // wait for >40ms
 8000990:	2032      	movs	r0, #50	; 0x32
 8000992:	f004 fabb 	bl	8004f0c <LL_mDelay>
	lcd_send_cmd (0x30);
 8000996:	2030      	movs	r0, #48	; 0x30
 8000998:	f7ff ff5c 	bl	8000854 <lcd_send_cmd>
	LL_mDelay(5);  // wait for >4.1ms
 800099c:	2005      	movs	r0, #5
 800099e:	f004 fab5 	bl	8004f0c <LL_mDelay>
	lcd_send_cmd (0x30);
 80009a2:	2030      	movs	r0, #48	; 0x30
 80009a4:	f7ff ff56 	bl	8000854 <lcd_send_cmd>
	LL_mDelay(1);  // wait for >100us
 80009a8:	2001      	movs	r0, #1
 80009aa:	f004 faaf 	bl	8004f0c <LL_mDelay>
	lcd_send_cmd (0x30);
 80009ae:	2030      	movs	r0, #48	; 0x30
 80009b0:	f7ff ff50 	bl	8000854 <lcd_send_cmd>
	LL_mDelay(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f004 faa9 	bl	8004f0c <LL_mDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 80009ba:	2020      	movs	r0, #32
 80009bc:	f7ff ff4a 	bl	8000854 <lcd_send_cmd>
	LL_mDelay(10);
 80009c0:	200a      	movs	r0, #10
 80009c2:	f004 faa3 	bl	8004f0c <LL_mDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80009c6:	2028      	movs	r0, #40	; 0x28
 80009c8:	f7ff ff44 	bl	8000854 <lcd_send_cmd>
	LL_mDelay(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f004 fa9d 	bl	8004f0c <LL_mDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80009d2:	2008      	movs	r0, #8
 80009d4:	f7ff ff3e 	bl	8000854 <lcd_send_cmd>
	LL_mDelay(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f004 fa97 	bl	8004f0c <LL_mDelay>
	lcd_send_cmd (0x01);  // clear display
 80009de:	2001      	movs	r0, #1
 80009e0:	f7ff ff38 	bl	8000854 <lcd_send_cmd>
	LL_mDelay(1);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f004 fa91 	bl	8004f0c <LL_mDelay>
	LL_mDelay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f004 fa8e 	bl	8004f0c <LL_mDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80009f0:	2006      	movs	r0, #6
 80009f2:	f7ff ff2f 	bl	8000854 <lcd_send_cmd>
	LL_mDelay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f004 fa88 	bl	8004f0c <LL_mDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80009fc:	200c      	movs	r0, #12
 80009fe:	f7ff ff29 	bl	8000854 <lcd_send_cmd>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a0e:	e006      	b.n	8000a1e <lcd_send_string+0x18>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff69 	bl	80008f0 <lcd_send_data>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f4      	bne.n	8000a10 <lcd_send_string+0xa>
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <LL_I2C_EnableClockStretching>:
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <LL_I2C_DisableGeneralCall>:
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <LL_I2C_SetOwnAddress2>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <LL_I2C_SetOwnAddress2+0x2c>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	60da      	str	r2, [r3, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	fffff801 	.word	0xfffff801

08000aa0 <LL_I2C_DisableOwnAddress2>:
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	60da      	str	r2, [r3, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <LL_I2C_EnableAutoEndMode>:
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	605a      	str	r2, [r3, #4]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_AHB1_GRP1_EnableClock>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4013      	ands	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800

08000b10 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40023800 	.word	0x40023800

08000b40 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	; 0x38
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	f7ff ffb8 	bl	8000ae0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000b86:	2304      	movs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4821      	ldr	r0, [pc, #132]	; (8000c14 <MX_I2C1_Init+0xd4>)
 8000b90:	f003 f814 	bl	8003bbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000baa:	2304      	movs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4818      	ldr	r0, [pc, #96]	; (8000c14 <MX_I2C1_Init+0xd4>)
 8000bb4:	f003 f802 	bl	8003bbc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000bb8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000bbc:	f7ff ffa8 	bl	8000b10 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000bc0:	4815      	ldr	r0, [pc, #84]	; (8000c18 <MX_I2C1_Init+0xd8>)
 8000bc2:	f7ff ff7d 	bl	8000ac0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4813      	ldr	r0, [pc, #76]	; (8000c18 <MX_I2C1_Init+0xd8>)
 8000bcc:	f7ff ff50 	bl	8000a70 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_I2C1_Init+0xd8>)
 8000bd2:	f7ff ff65 	bl	8000aa0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000bd6:	4810      	ldr	r0, [pc, #64]	; (8000c18 <MX_I2C1_Init+0xd8>)
 8000bd8:	f7ff ff3a 	bl	8000a50 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000bdc:	480e      	ldr	r0, [pc, #56]	; (8000c18 <MX_I2C1_Init+0xd8>)
 8000bde:	f7ff ff27 	bl	8000a30 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00303D5B;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_I2C1_Init+0xdc>)
 8000be8:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_I2C1_Init+0xd8>)
 8000c06:	f003 f8f1 	bl	8003dec <LL_I2C_Init>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	3738      	adds	r7, #56	; 0x38
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	00303d5b 	.word	0x00303d5b

08000c20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
 8000c36:	615a      	str	r2, [r3, #20]
 8000c38:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f7ff ff48 	bl	8000ae0 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c56:	2302      	movs	r3, #2
 8000c58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000c66:	2304      	movs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <MX_I2C2_Init+0xd4>)
 8000c70:	f002 ffa4 	bl	8003bbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000c82:	2301      	movs	r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <MX_I2C2_Init+0xd4>)
 8000c94:	f002 ff92 	bl	8003bbc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8000c98:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000c9c:	f7ff ff38 	bl	8000b10 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C2);
 8000ca0:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <MX_I2C2_Init+0xd8>)
 8000ca2:	f7ff ff0d 	bl	8000ac0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <MX_I2C2_Init+0xd8>)
 8000cac:	f7ff fee0 	bl	8000a70 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <MX_I2C2_Init+0xd8>)
 8000cb2:	f7ff fef5 	bl	8000aa0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8000cb6:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <MX_I2C2_Init+0xd8>)
 8000cb8:	f7ff feca 	bl	8000a50 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8000cbc:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <MX_I2C2_Init+0xd8>)
 8000cbe:	f7ff feb7 	bl	8000a30 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00303D5B;
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MX_I2C2_Init+0xdc>)
 8000cc8:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_I2C2_Init+0xd8>)
 8000ce6:	f003 f881 	bl	8003dec <LL_I2C_Init>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3738      	adds	r7, #56	; 0x38
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40005800 	.word	0x40005800
 8000cfc:	00303d5b 	.word	0x00303d5b

08000d00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db12      	blt.n	8000d38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	490a      	ldr	r1, [pc, #40]	; (8000d44 <__NVIC_DisableIRQ+0x44>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	3320      	adds	r3, #32
 8000d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d2c:	f3bf 8f4f 	dsb	sy
}
 8000d30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d32:	f3bf 8f6f 	isb	sy
}
 8000d36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <LL_I2C_IsActiveFlag_TXE>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <LL_I2C_IsActiveFlag_TXE+0x18>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <LL_I2C_IsActiveFlag_TXE+0x1a>
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <LL_I2C_IsActiveFlag_TXIS>:
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d101      	bne.n	8000dda <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_I2C_IsActiveFlag_RXNE>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d101      	bne.n	8000e00 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <LL_I2C_HandleTransfer>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	0d5b      	lsrs	r3, r3, #21
 8000e26:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <LL_I2C_HandleTransfer+0x48>)
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	401a      	ands	r2, r3
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4319      	orrs	r1, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	041b      	lsls	r3, r3, #16
 8000e3c:	4319      	orrs	r1, r3
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4319      	orrs	r1, r3
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	430b      	orrs	r3, r1
 8000e46:	431a      	orrs	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	605a      	str	r2, [r3, #4]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	03ff7bff 	.word	0x03ff7bff

08000e5c <LL_I2C_ReceiveData8>:
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	b2db      	uxtb	r3, r3
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_I2C_TransmitData8>:
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8000e82:	78fa      	ldrb	r2, [r7, #3]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <LL_RCC_HSI_Enable+0x1c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <LL_RCC_HSI_Enable+0x1c>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <LL_RCC_HSI_IsReady+0x20>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2301      	moveq	r3, #1
 8000ec6:	2300      	movne	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4904      	ldr	r1, [pc, #16]	; (8000f00 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <LL_RCC_SetSysClkSource+0x24>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f023 0203 	bic.w	r2, r3, #3
 8000f14:	4904      	ldr	r1, [pc, #16]	; (8000f28 <LL_RCC_SetSysClkSource+0x24>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40023800 	.word	0x40023800

08000f2c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <LL_RCC_GetSysClkSource+0x18>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 030c 	and.w	r3, r3, #12
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800

08000f48 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <LL_RCC_SetAHBPrescaler+0x24>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f58:	4904      	ldr	r1, [pc, #16]	; (8000f6c <LL_RCC_SetAHBPrescaler+0x24>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40023800 	.word	0x40023800

08000f70 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f80:	4904      	ldr	r1, [pc, #16]	; (8000f94 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	608b      	str	r3, [r1, #8]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40023800 	.word	0x40023800

08000f98 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fa8:	4904      	ldr	r1, [pc, #16]	; (8000fbc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	608b      	str	r3, [r1, #8]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <LL_RCC_SetUSARTClockSource+0x30>)
 8000fca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4905      	ldr	r1, [pc, #20]	; (8000ff0 <LL_RCC_SetUSARTClockSource+0x30>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (I2CxSource & 0xFFFF0000U),  (I2CxSource << 16U));
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <LL_RCC_SetI2CClockSource+0x30>)
 8000ffe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <LL_RCC_SetI2CClockSource+0x34>)
 8001006:	400b      	ands	r3, r1
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	4904      	ldr	r1, [pc, #16]	; (8001024 <LL_RCC_SetI2CClockSource+0x30>)
 8001012:	4313      	orrs	r3, r2
 8001014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40023800 	.word	0x40023800
 8001028:	ffff0000 	.word	0xffff0000

0800102c <LL_AHB1_GRP1_EnableClock>:
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4013      	ands	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40023800 	.word	0x40023800

0800105c <LL_APB1_GRP1_EnableClock>:
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001068:	4907      	ldr	r1, [pc, #28]	; (8001088 <LL_APB1_GRP1_EnableClock+0x2c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4313      	orrs	r3, r2
 800106e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4013      	ands	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40023800 	.word	0x40023800

0800108c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <LL_FLASH_SetLatency+0x24>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 020f 	bic.w	r2, r3, #15
 800109c:	4904      	ldr	r1, [pc, #16]	; (80010b0 <LL_FLASH_SetLatency+0x24>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <LL_FLASH_GetLatency+0x18>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 030f 	and.w	r3, r3, #15
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023c00 	.word	0x40023c00

080010d0 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR1    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_ODEN);
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <LL_PWR_DisableOverDriveMode+0x1c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <LL_PWR_DisableOverDriveMode+0x1c>)
 80010da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40007000 	.word	0x40007000

080010f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001100:	4904      	ldr	r1, [pc, #16]	; (8001114 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40007000 	.word	0x40007000

08001118 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	621a      	str	r2, [r3, #32]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d028      	beq.n	800126c <LL_TIM_OC_SetMode+0x64>
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2b04      	cmp	r3, #4
 800121e:	d023      	beq.n	8001268 <LL_TIM_OC_SetMode+0x60>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b10      	cmp	r3, #16
 8001224:	d01e      	beq.n	8001264 <LL_TIM_OC_SetMode+0x5c>
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b40      	cmp	r3, #64	; 0x40
 800122a:	d019      	beq.n	8001260 <LL_TIM_OC_SetMode+0x58>
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001232:	d013      	beq.n	800125c <LL_TIM_OC_SetMode+0x54>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123a:	d00d      	beq.n	8001258 <LL_TIM_OC_SetMode+0x50>
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001242:	d007      	beq.n	8001254 <LL_TIM_OC_SetMode+0x4c>
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d101      	bne.n	8001250 <LL_TIM_OC_SetMode+0x48>
 800124c:	2307      	movs	r3, #7
 800124e:	e00e      	b.n	800126e <LL_TIM_OC_SetMode+0x66>
 8001250:	2308      	movs	r3, #8
 8001252:	e00c      	b.n	800126e <LL_TIM_OC_SetMode+0x66>
 8001254:	2306      	movs	r3, #6
 8001256:	e00a      	b.n	800126e <LL_TIM_OC_SetMode+0x66>
 8001258:	2305      	movs	r3, #5
 800125a:	e008      	b.n	800126e <LL_TIM_OC_SetMode+0x66>
 800125c:	2304      	movs	r3, #4
 800125e:	e006      	b.n	800126e <LL_TIM_OC_SetMode+0x66>
 8001260:	2303      	movs	r3, #3
 8001262:	e004      	b.n	800126e <LL_TIM_OC_SetMode+0x66>
 8001264:	2302      	movs	r3, #2
 8001266:	e002      	b.n	800126e <LL_TIM_OC_SetMode+0x66>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <LL_TIM_OC_SetMode+0x66>
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3318      	adds	r3, #24
 8001274:	4619      	mov	r1, r3
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <LL_TIM_OC_SetMode+0xac>)
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	440b      	add	r3, r1
 800127e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	490c      	ldr	r1, [pc, #48]	; (80012b8 <LL_TIM_OC_SetMode+0xb0>)
 8001288:	5ccb      	ldrb	r3, [r1, r3]
 800128a:	4619      	mov	r1, r3
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <LL_TIM_OC_SetMode+0xb4>)
 800128e:	408b      	lsls	r3, r1
 8001290:	43db      	mvns	r3, r3
 8001292:	401a      	ands	r2, r3
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <LL_TIM_OC_SetMode+0xb0>)
 8001298:	5ccb      	ldrb	r3, [r1, r3]
 800129a:	4619      	mov	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	408b      	lsls	r3, r1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	601a      	str	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	08007540 	.word	0x08007540
 80012b8:	0800754c 	.word	0x0800754c
 80012bc:	00010073 	.word	0x00010073

080012c0 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d028      	beq.n	8001324 <LL_TIM_OC_SetPolarity+0x64>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d023      	beq.n	8001320 <LL_TIM_OC_SetPolarity+0x60>
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d01e      	beq.n	800131c <LL_TIM_OC_SetPolarity+0x5c>
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2b40      	cmp	r3, #64	; 0x40
 80012e2:	d019      	beq.n	8001318 <LL_TIM_OC_SetPolarity+0x58>
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ea:	d013      	beq.n	8001314 <LL_TIM_OC_SetPolarity+0x54>
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f2:	d00d      	beq.n	8001310 <LL_TIM_OC_SetPolarity+0x50>
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012fa:	d007      	beq.n	800130c <LL_TIM_OC_SetPolarity+0x4c>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001302:	d101      	bne.n	8001308 <LL_TIM_OC_SetPolarity+0x48>
 8001304:	2307      	movs	r3, #7
 8001306:	e00e      	b.n	8001326 <LL_TIM_OC_SetPolarity+0x66>
 8001308:	2308      	movs	r3, #8
 800130a:	e00c      	b.n	8001326 <LL_TIM_OC_SetPolarity+0x66>
 800130c:	2306      	movs	r3, #6
 800130e:	e00a      	b.n	8001326 <LL_TIM_OC_SetPolarity+0x66>
 8001310:	2305      	movs	r3, #5
 8001312:	e008      	b.n	8001326 <LL_TIM_OC_SetPolarity+0x66>
 8001314:	2304      	movs	r3, #4
 8001316:	e006      	b.n	8001326 <LL_TIM_OC_SetPolarity+0x66>
 8001318:	2303      	movs	r3, #3
 800131a:	e004      	b.n	8001326 <LL_TIM_OC_SetPolarity+0x66>
 800131c:	2302      	movs	r3, #2
 800131e:	e002      	b.n	8001326 <LL_TIM_OC_SetPolarity+0x66>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <LL_TIM_OC_SetPolarity+0x66>
 8001324:	2300      	movs	r3, #0
 8001326:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a1a      	ldr	r2, [r3, #32]
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	490b      	ldr	r1, [pc, #44]	; (800135c <LL_TIM_OC_SetPolarity+0x9c>)
 8001330:	5ccb      	ldrb	r3, [r1, r3]
 8001332:	4619      	mov	r1, r3
 8001334:	2302      	movs	r3, #2
 8001336:	408b      	lsls	r3, r1
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	4907      	ldr	r1, [pc, #28]	; (800135c <LL_TIM_OC_SetPolarity+0x9c>)
 8001340:	5ccb      	ldrb	r3, [r1, r3]
 8001342:	4619      	mov	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	408b      	lsls	r3, r1
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	621a      	str	r2, [r3, #32]
}
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	08007558 	.word	0x08007558

08001360 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d028      	beq.n	80013c2 <LL_TIM_OC_EnablePreload+0x62>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b04      	cmp	r3, #4
 8001374:	d023      	beq.n	80013be <LL_TIM_OC_EnablePreload+0x5e>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b10      	cmp	r3, #16
 800137a:	d01e      	beq.n	80013ba <LL_TIM_OC_EnablePreload+0x5a>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b40      	cmp	r3, #64	; 0x40
 8001380:	d019      	beq.n	80013b6 <LL_TIM_OC_EnablePreload+0x56>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001388:	d013      	beq.n	80013b2 <LL_TIM_OC_EnablePreload+0x52>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001390:	d00d      	beq.n	80013ae <LL_TIM_OC_EnablePreload+0x4e>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001398:	d007      	beq.n	80013aa <LL_TIM_OC_EnablePreload+0x4a>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d101      	bne.n	80013a6 <LL_TIM_OC_EnablePreload+0x46>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00e      	b.n	80013c4 <LL_TIM_OC_EnablePreload+0x64>
 80013a6:	2308      	movs	r3, #8
 80013a8:	e00c      	b.n	80013c4 <LL_TIM_OC_EnablePreload+0x64>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00a      	b.n	80013c4 <LL_TIM_OC_EnablePreload+0x64>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <LL_TIM_OC_EnablePreload+0x64>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <LL_TIM_OC_EnablePreload+0x64>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <LL_TIM_OC_EnablePreload+0x64>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <LL_TIM_OC_EnablePreload+0x64>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <LL_TIM_OC_EnablePreload+0x64>
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3318      	adds	r3, #24
 80013ca:	4619      	mov	r1, r3
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LL_TIM_OC_EnablePreload+0x98>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	440b      	add	r3, r1
 80013d4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <LL_TIM_OC_EnablePreload+0x9c>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	4619      	mov	r1, r3
 80013e2:	2308      	movs	r3, #8
 80013e4:	408b      	lsls	r3, r1
 80013e6:	431a      	orrs	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	601a      	str	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	08007540 	.word	0x08007540
 80013fc:	0800754c 	.word	0x0800754c

08001400 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f043 0202 	orr.w	r2, r3, #2
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	60da      	str	r2, [r3, #12]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	f043 0204 	orr.w	r2, r3, #4
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60da      	str	r2, [r3, #12]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_TIM_EnableIT_CC3>:
  * @rmtoll DIER         CC3IE         LL_TIM_EnableIT_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC3(TIM_TypeDef *TIMx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC3IE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f043 0208 	orr.w	r2, r3, #8
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_TIM_EnableIT_CC4>:
  * @rmtoll DIER         CC4IE         LL_TIM_EnableIT_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC4(TIM_TypeDef *TIMx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4IE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f043 0210 	orr.w	r2, r3, #16
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	60da      	str	r2, [r3, #12]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	615a      	str	r2, [r3, #20]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	2b20      	cmp	r3, #32
 8001522:	d101      	bne.n	8001528 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001546:	2b80      	cmp	r3, #128	; 0x80
 8001548:	d101      	bne.n	800154e <LL_USART_IsActiveFlag_TXE+0x18>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_USART_IsActiveFlag_TXE+0x1a>
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	b2db      	uxtb	r3, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_GPIO_SetOutputPin>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	619a      	str	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_GPIO_ResetOutputPin>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	041a      	lsls	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	619a      	str	r2, [r3, #24]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4013      	ands	r3, r2
 80015e4:	041a      	lsls	r2, r3, #16
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43d9      	mvns	r1, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	400b      	ands	r3, r1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001606:	f001 f9e4 	bl	80029d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160a:	f000 f877 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160e:	f7ff f82f 	bl	8000670 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001612:	f000 ffb1 	bl	8002578 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001616:	f001 f8db 	bl	80027d0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800161a:	f7ff fa91 	bl	8000b40 <MX_I2C1_Init>
  MX_I2C2_Init();
 800161e:	f7ff faff 	bl	8000c20 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8001622:	f001 f939 	bl	8002898 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  Configure_TIMPWMOutput();
 8001626:	f000 f8b7 	bl	8001798 <Configure_TIMPWMOutput>

  RollCmdQueue = xQueueCreate(2,sizeof(uint8_t));
 800162a:	2200      	movs	r2, #0
 800162c:	2101      	movs	r1, #1
 800162e:	2002      	movs	r0, #2
 8001630:	f003 fe38 	bl	80052a4 <xQueueGenericCreate>
 8001634:	4603      	mov	r3, r0
 8001636:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <main+0xd0>)
 8001638:	6013      	str	r3, [r2, #0]
  lcd_init();
 800163a:	f7ff f9a7 	bl	800098c <lcd_init>
  lcd_send_string ("HELLO WORLD");
 800163e:	4825      	ldr	r0, [pc, #148]	; (80016d4 <main+0xd4>)
 8001640:	f7ff f9e1 	bl	8000a06 <lcd_send_string>

  while(RollCmdQueue==NULL);
 8001644:	bf00      	nop
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <main+0xd0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0fb      	beq.n	8001646 <main+0x46>
  if(xTaskCreate(Roll_Task,"rolltask",128,NULL,tskIDLE_PRIORITY+2, NULL)!= pdPASS){while(1);}
 800164e:	2300      	movs	r3, #0
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	2302      	movs	r3, #2
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	491f      	ldr	r1, [pc, #124]	; (80016d8 <main+0xd8>)
 800165c:	481f      	ldr	r0, [pc, #124]	; (80016dc <main+0xdc>)
 800165e:	f004 f9e2 	bl	8005a26 <xTaskCreate>
 8001662:	4603      	mov	r3, r0
 8001664:	2b01      	cmp	r3, #1
 8001666:	d000      	beq.n	800166a <main+0x6a>
 8001668:	e7fe      	b.n	8001668 <main+0x68>
  if(xTaskCreate(Uart_Rx_Task,"uarttask",128,NULL,tskIDLE_PRIORITY+1, NULL)!= pdPASS){while(1);}
 800166a:	2300      	movs	r3, #0
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	2301      	movs	r3, #1
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	491a      	ldr	r1, [pc, #104]	; (80016e0 <main+0xe0>)
 8001678:	481a      	ldr	r0, [pc, #104]	; (80016e4 <main+0xe4>)
 800167a:	f004 f9d4 	bl	8005a26 <xTaskCreate>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d000      	beq.n	8001686 <main+0x86>
 8001684:	e7fe      	b.n	8001684 <main+0x84>
  if(xTaskCreate(ADXL_Task,"adxltask",128,NULL,tskIDLE_PRIORITY+1, NULL)!= pdPASS){while(1);}
 8001686:	2300      	movs	r3, #0
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	2301      	movs	r3, #1
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2300      	movs	r3, #0
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	4915      	ldr	r1, [pc, #84]	; (80016e8 <main+0xe8>)
 8001694:	4815      	ldr	r0, [pc, #84]	; (80016ec <main+0xec>)
 8001696:	f004 f9c6 	bl	8005a26 <xTaskCreate>
 800169a:	4603      	mov	r3, r0
 800169c:	2b01      	cmp	r3, #1
 800169e:	d000      	beq.n	80016a2 <main+0xa2>
 80016a0:	e7fe      	b.n	80016a0 <main+0xa0>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80016a2:	f7fe ff99 	bl	80005d8 <MX_FREERTOS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!LL_USART_IsActiveFlag_RXNE(USART6));
 80016a6:	bf00      	nop
 80016a8:	4811      	ldr	r0, [pc, #68]	; (80016f0 <main+0xf0>)
 80016aa:	f7ff ff31 	bl	8001510 <LL_USART_IsActiveFlag_RXNE>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f9      	beq.n	80016a8 <main+0xa8>
	  LL_GPIO_TogglePin(GPIOB,LL_GPIO_PIN_14);
 80016b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <main+0xf4>)
 80016ba:	f7ff ff88 	bl	80015ce <LL_GPIO_TogglePin>
	  rec_BLE=LL_USART_ReceiveData8(USART6);
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <main+0xf0>)
 80016c0:	f7ff ff4c 	bl	800155c <LL_USART_ReceiveData8>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <main+0xf8>)
 80016ca:	701a      	strb	r2, [r3, #0]
	  while(!LL_USART_IsActiveFlag_RXNE(USART6));
 80016cc:	e7eb      	b.n	80016a6 <main+0xa6>
 80016ce:	bf00      	nop
 80016d0:	20000090 	.word	0x20000090
 80016d4:	080074c8 	.word	0x080074c8
 80016d8:	080074d4 	.word	0x080074d4
 80016dc:	080019c9 	.word	0x080019c9
 80016e0:	080074e0 	.word	0x080074e0
 80016e4:	08001d7d 	.word	0x08001d7d
 80016e8:	080074ec 	.word	0x080074ec
 80016ec:	08001ded 	.word	0x08001ded
 80016f0:	40011400 	.word	0x40011400
 80016f4:	40020400 	.word	0x40020400
 80016f8:	20003de0 	.word	0x20003de0

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fcc3 	bl	800108c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001706:	bf00      	nop
 8001708:	f7ff fcd4 	bl	80010b4 <LL_FLASH_GetLatency>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1fa      	bne.n	8001708 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8001712:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001716:	f7ff fceb 	bl	80010f0 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 800171a:	f7ff fcd9 	bl	80010d0 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 800171e:	2010      	movs	r0, #16
 8001720:	f7ff fbda 	bl	8000ed8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001724:	f7ff fbb6 	bl	8000e94 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001728:	bf00      	nop
 800172a:	f7ff fbc3 	bl	8000eb4 <LL_RCC_HSI_IsReady>
 800172e:	4603      	mov	r3, r0
 8001730:	2b01      	cmp	r3, #1
 8001732:	d1fa      	bne.n	800172a <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fc07 	bl	8000f48 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fc18 	bl	8000f70 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fc29 	bl	8000f98 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff fbdc 	bl	8000f04 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800174c:	bf00      	nop
 800174e:	f7ff fbed 	bl	8000f2c <LL_RCC_GetSysClkSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1fa      	bne.n	800174e <SystemClock_Config+0x52>
  {

  }
  LL_SetSystemCoreClock(16000000);
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <SystemClock_Config+0x98>)
 800175a:	f003 fbfd 	bl	8004f58 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800175e:	200f      	movs	r0, #15
 8001760:	f001 f944 	bl	80029ec <HAL_InitTick>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800176a:	f000 fd65 	bl	8002238 <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 800176e:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001772:	f7ff fc25 	bl	8000fc0 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART6_CLKSOURCE_PCLK2);
 8001776:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800177a:	f7ff fc21 	bl	8000fc0 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 800177e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001782:	f7ff fc37 	bl	8000ff4 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C2_CLKSOURCE_PCLK1);
 8001786:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800178a:	f7ff fc33 	bl	8000ff4 <LL_RCC_SetI2CClockSource>
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	00f42400 	.word	0x00f42400

08001798 <Configure_TIMPWMOutput>:

/* USER CODE BEGIN 4 */
__STATIC_INLINE void  Configure_TIMPWMOutput(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
  /*************************/
  /* GPIO AF configuration */
  /*************************/
  /* Enable the peripheral clock of GPIOs */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800179e:	2008      	movs	r0, #8
 80017a0:	f7ff fc44 	bl	800102c <LL_AHB1_GRP1_EnableClock>


  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	615a      	str	r2, [r3, #20]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017ba:	2302      	movs	r3, #2
 80017bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	4879      	ldr	r0, [pc, #484]	; (80019b8 <Configure_TIMPWMOutput+0x220>)
 80017d4:	f002 f9f2 	bl	8003bbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80017d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017de:	2302      	movs	r3, #2
 80017e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4870      	ldr	r0, [pc, #448]	; (80019b8 <Configure_TIMPWMOutput+0x220>)
 80017f8:	f002 f9e0 	bl	8003bbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80017fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001802:	2302      	movs	r3, #2
 8001804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	4619      	mov	r1, r3
 800181a:	4867      	ldr	r0, [pc, #412]	; (80019b8 <Configure_TIMPWMOutput+0x220>)
 800181c:	f002 f9ce 	bl	8003bbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001824:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001826:	2302      	movs	r3, #2
 8001828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4619      	mov	r1, r3
 800183e:	485e      	ldr	r0, [pc, #376]	; (80019b8 <Configure_TIMPWMOutput+0x220>)
 8001840:	f002 f9bc 	bl	8003bbc <LL_GPIO_Init>

  /***********************************************/
  /* Configure the NVIC to handle TIM4 interrupt */
  /***********************************************/
  NVIC_SetPriority(TIM4_IRQn, 0);
 8001844:	2100      	movs	r1, #0
 8001846:	201e      	movs	r0, #30
 8001848:	f7ff fa7e 	bl	8000d48 <__NVIC_SetPriority>
  NVIC_DisableIRQ(TIM4_IRQn);
 800184c:	201e      	movs	r0, #30
 800184e:	f7ff fa57 	bl	8000d00 <__NVIC_DisableIRQ>

  /******************************/
  /* Peripheral clocks enabling */
  /******************************/
  /* Enable the timer peripheral clock */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001852:	2004      	movs	r0, #4
 8001854:	f7ff fc02 	bl	800105c <LL_APB1_GRP1_EnableClock>
  /***************************/
  /* Time base configuration */
  /***************************/
  /* Set counter mode */
  /* Reset value is LL_TIM_COUNTERMODE_UP */
  LL_TIM_SetCounterMode(TIM4, LL_TIM_COUNTERMODE_UP);
 8001858:	2100      	movs	r1, #0
 800185a:	4858      	ldr	r0, [pc, #352]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 800185c:	f7ff fc6c 	bl	8001138 <LL_TIM_SetCounterMode>

  /* Set the pre-scaler value to have TIM1 counter clock equal to 10 kHz */
  LL_TIM_SetPrescaler(TIM4, __LL_TIM_CALC_PSC(SystemCoreClock, 10000));
 8001860:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <Configure_TIMPWMOutput+0x228>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f242 720f 	movw	r2, #9999	; 0x270f
 8001868:	4293      	cmp	r3, r2
 800186a:	d907      	bls.n	800187c <Configure_TIMPWMOutput+0xe4>
 800186c:	4b54      	ldr	r3, [pc, #336]	; (80019c0 <Configure_TIMPWMOutput+0x228>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a54      	ldr	r2, [pc, #336]	; (80019c4 <Configure_TIMPWMOutput+0x22c>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0b5b      	lsrs	r3, r3, #13
 8001878:	3b01      	subs	r3, #1
 800187a:	e000      	b.n	800187e <Configure_TIMPWMOutput+0xe6>
 800187c:	2300      	movs	r3, #0
 800187e:	4619      	mov	r1, r3
 8001880:	484e      	ldr	r0, [pc, #312]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001882:	f7ff fc7c 	bl	800117e <LL_TIM_SetPrescaler>

  /* Enable TIM1_ARR register preload. Writing to or reading from the         */
  /* auto-reload register accesses the preload register. The content of the   */
  /* preload register are transferred into the shadow register at each update */
  /* event (UEV).                                                             */
  LL_TIM_EnableARRPreload(TIM4);
 8001886:	484d      	ldr	r0, [pc, #308]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001888:	f7ff fc69 	bl	800115e <LL_TIM_EnableARRPreload>

  /* Set the auto-reload value to have a counter frequency of 100 Hz */
  /* TIM1CLK = SystemCoreClock / (APB prescaler & multiplier)               */
  uint32_t TimOutClock = SystemCoreClock/2;
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <Configure_TIMPWMOutput+0x228>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
  LL_TIM_SetAutoReload(TIM4, __LL_TIM_CALC_ARR(TimOutClock, LL_TIM_GetPrescaler(TIM4), 100));
 8001894:	4849      	ldr	r0, [pc, #292]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001896:	f7ff fc80 	bl	800119a <LL_TIM_GetPrescaler>
 800189a:	4603      	mov	r3, r0
 800189c:	3301      	adds	r3, #1
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	2b63      	cmp	r3, #99	; 0x63
 80018a6:	d90c      	bls.n	80018c2 <Configure_TIMPWMOutput+0x12a>
 80018a8:	4844      	ldr	r0, [pc, #272]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80018aa:	f7ff fc76 	bl	800119a <LL_TIM_GetPrescaler>
 80018ae:	4603      	mov	r3, r0
 80018b0:	3301      	adds	r3, #1
 80018b2:	2264      	movs	r2, #100	; 0x64
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	e000      	b.n	80018c4 <Configure_TIMPWMOutput+0x12c>
 80018c2:	2300      	movs	r3, #0
 80018c4:	4619      	mov	r1, r3
 80018c6:	483d      	ldr	r0, [pc, #244]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80018c8:	f7ff fc73 	bl	80011b2 <LL_TIM_SetAutoReload>
  /*********************************/
  /* Output waveform configuration */
  /*********************************/
  /* Set output mode */
  /* Reset value is LL_TIM_OCMODE_FROZEN */
  LL_TIM_OC_SetMode(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 80018cc:	2260      	movs	r2, #96	; 0x60
 80018ce:	2101      	movs	r1, #1
 80018d0:	483a      	ldr	r0, [pc, #232]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80018d2:	f7ff fc99 	bl	8001208 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetMode(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 80018d6:	2260      	movs	r2, #96	; 0x60
 80018d8:	2110      	movs	r1, #16
 80018da:	4838      	ldr	r0, [pc, #224]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80018dc:	f7ff fc94 	bl	8001208 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetMode(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1);
 80018e0:	2260      	movs	r2, #96	; 0x60
 80018e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e6:	4835      	ldr	r0, [pc, #212]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80018e8:	f7ff fc8e 	bl	8001208 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetMode(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_OCMODE_PWM1);
 80018ec:	2260      	movs	r2, #96	; 0x60
 80018ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f2:	4832      	ldr	r0, [pc, #200]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80018f4:	f7ff fc88 	bl	8001208 <LL_TIM_OC_SetMode>

  /* Set output channel polarity */
  /* Reset value is LL_TIM_OCPOLARITY_HIGH */
  LL_TIM_OC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2101      	movs	r1, #1
 80018fc:	482f      	ldr	r0, [pc, #188]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80018fe:	f7ff fcdf 	bl	80012c0 <LL_TIM_OC_SetPolarity>
  LL_TIM_OC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8001902:	2200      	movs	r2, #0
 8001904:	2110      	movs	r1, #16
 8001906:	482d      	ldr	r0, [pc, #180]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001908:	f7ff fcda 	bl	80012c0 <LL_TIM_OC_SetPolarity>
  LL_TIM_OC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001912:	482a      	ldr	r0, [pc, #168]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001914:	f7ff fcd4 	bl	80012c0 <LL_TIM_OC_SetPolarity>
  LL_TIM_OC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800191e:	4827      	ldr	r0, [pc, #156]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001920:	f7ff fcce 	bl	80012c0 <LL_TIM_OC_SetPolarity>

  /* Set compare value to half of the counter period (50% duty cycle ) */
  LL_TIM_OC_SetCompareCH1(TIM4, 0);
 8001924:	2100      	movs	r1, #0
 8001926:	4825      	ldr	r0, [pc, #148]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001928:	f7ff fd6a 	bl	8001400 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM4, 0);
 800192c:	2100      	movs	r1, #0
 800192e:	4823      	ldr	r0, [pc, #140]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001930:	f7ff fd74 	bl	800141c <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIM4, 0);
 8001934:	2100      	movs	r1, #0
 8001936:	4821      	ldr	r0, [pc, #132]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001938:	f7ff fd7e 	bl	8001438 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIM4, 0);
 800193c:	2100      	movs	r1, #0
 800193e:	481f      	ldr	r0, [pc, #124]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001940:	f7ff fd88 	bl	8001454 <LL_TIM_OC_SetCompareCH4>

  /* Enable TIM1_CCR1 register preload. Read/Write operations access the      */
  /* preload register. TIM4_CCR1~4 preload value is loaded in the active        */
  /* at each update event.                                                    */
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8001944:	2101      	movs	r1, #1
 8001946:	481d      	ldr	r0, [pc, #116]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001948:	f7ff fd0a 	bl	8001360 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 800194c:	2110      	movs	r1, #16
 800194e:	481b      	ldr	r0, [pc, #108]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001950:	f7ff fd06 	bl	8001360 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8001954:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001958:	4818      	ldr	r0, [pc, #96]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 800195a:	f7ff fd01 	bl	8001360 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 800195e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001962:	4816      	ldr	r0, [pc, #88]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001964:	f7ff fcfc 	bl	8001360 <LL_TIM_OC_EnablePreload>

  /**************************/
  /* TIM4 interrupts set-up */
  /**************************/
  /* Enable the capture/compare interrupt for channel 1~4*/
  LL_TIM_EnableIT_CC1(TIM4);
 8001968:	4814      	ldr	r0, [pc, #80]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 800196a:	f7ff fd81 	bl	8001470 <LL_TIM_EnableIT_CC1>
  LL_TIM_EnableIT_CC2(TIM4);
 800196e:	4813      	ldr	r0, [pc, #76]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001970:	f7ff fd8e 	bl	8001490 <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableIT_CC3(TIM4);
 8001974:	4811      	ldr	r0, [pc, #68]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001976:	f7ff fd9b 	bl	80014b0 <LL_TIM_EnableIT_CC3>
  LL_TIM_EnableIT_CC4(TIM4);
 800197a:	4810      	ldr	r0, [pc, #64]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 800197c:	f7ff fda8 	bl	80014d0 <LL_TIM_EnableIT_CC4>

  /**********************************/
  /* Start output signal generation */
  /**********************************/
  /* Enable output channel 1~4 */
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1);
 8001980:	2101      	movs	r1, #1
 8001982:	480e      	ldr	r0, [pc, #56]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001984:	f7ff fc2f 	bl	80011e6 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH2);
 8001988:	2110      	movs	r1, #16
 800198a:	480c      	ldr	r0, [pc, #48]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 800198c:	f7ff fc2b 	bl	80011e6 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 8001996:	f7ff fc26 	bl	80011e6 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH4);
 800199a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80019a0:	f7ff fc21 	bl	80011e6 <LL_TIM_CC_EnableChannel>

  /* Enable counter */
  LL_TIM_EnableCounter(TIM4);
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80019a6:	f7ff fbb7 	bl	8001118 <LL_TIM_EnableCounter>

  /* Force update generation */
  LL_TIM_GenerateEvent_UPDATE(TIM4);
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <Configure_TIMPWMOutput+0x224>)
 80019ac:	f7ff fda0 	bl	80014f0 <LL_TIM_GenerateEvent_UPDATE>
}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40000800 	.word	0x40000800
 80019c0:	20000000 	.word	0x20000000
 80019c4:	d1b71759 	.word	0xd1b71759

080019c8 <Roll_Task>:

void Roll_Task (void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
	uint8_t nextCmd =0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	717b      	strb	r3, [r7, #5]
	uint8_t Cmd =0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
	uint8_t speed = 20;
 80019d6:	2314      	movs	r3, #20
 80019d8:	71bb      	strb	r3, [r7, #6]
	while(1){


		if(xQueueReceive(RollCmdQueue,&nextCmd, portMAX_DELAY)== pdTRUE){
 80019da:	4bc7      	ldr	r3, [pc, #796]	; (8001cf8 <Roll_Task+0x330>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1d79      	adds	r1, r7, #5
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fdc5 	bl	8005574 <xQueueReceive>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d10f      	bne.n	8001a10 <Roll_Task+0x48>

		if(nextCmd=='x')
 80019f0:	797b      	ldrb	r3, [r7, #5]
 80019f2:	2b78      	cmp	r3, #120	; 0x78
 80019f4:	d103      	bne.n	80019fe <Roll_Task+0x36>
			speed -= 10;
 80019f6:	79bb      	ldrb	r3, [r7, #6]
 80019f8:	3b0a      	subs	r3, #10
 80019fa:	71bb      	strb	r3, [r7, #6]
 80019fc:	e008      	b.n	8001a10 <Roll_Task+0x48>
		else if(nextCmd=='c')
 80019fe:	797b      	ldrb	r3, [r7, #5]
 8001a00:	2b63      	cmp	r3, #99	; 0x63
 8001a02:	d103      	bne.n	8001a0c <Roll_Task+0x44>
			speed += 10;
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	330a      	adds	r3, #10
 8001a08:	71bb      	strb	r3, [r7, #6]
 8001a0a:	e001      	b.n	8001a10 <Roll_Task+0x48>
		else
			Cmd = nextCmd;
 8001a0c:	797b      	ldrb	r3, [r7, #5]
 8001a0e:	71fb      	strb	r3, [r7, #7]
		}
		if(Cmd=='w'){
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b77      	cmp	r3, #119	; 0x77
 8001a14:	d152      	bne.n	8001abc <Roll_Task+0xf4>
			LL_TIM_OC_SetCompareCH1(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*speed / 100));//PD12
 8001a16:	48b9      	ldr	r0, [pc, #740]	; (8001cfc <Roll_Task+0x334>)
 8001a18:	f7ff fbd9 	bl	80011ce <LL_TIM_GetAutoReload>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	3301      	adds	r3, #1
 8001a20:	79ba      	ldrb	r2, [r7, #6]
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4ab6      	ldr	r2, [pc, #728]	; (8001d00 <Roll_Task+0x338>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	095b      	lsrs	r3, r3, #5
 8001a2e:	4619      	mov	r1, r3
 8001a30:	48b2      	ldr	r0, [pc, #712]	; (8001cfc <Roll_Task+0x334>)
 8001a32:	f7ff fce5 	bl	8001400 <LL_TIM_OC_SetCompareCH1>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_0);//3
 8001a36:	2101      	movs	r1, #1
 8001a38:	48b2      	ldr	r0, [pc, #712]	; (8001d04 <Roll_Task+0x33c>)
 8001a3a:	f7ff fdb9 	bl	80015b0 <LL_GPIO_ResetOutputPin>
			LL_TIM_OC_SetCompareCH2(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*speed / 100));//PD13
 8001a3e:	48af      	ldr	r0, [pc, #700]	; (8001cfc <Roll_Task+0x334>)
 8001a40:	f7ff fbc5 	bl	80011ce <LL_TIM_GetAutoReload>
 8001a44:	4603      	mov	r3, r0
 8001a46:	3301      	adds	r3, #1
 8001a48:	79ba      	ldrb	r2, [r7, #6]
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4aac      	ldr	r2, [pc, #688]	; (8001d00 <Roll_Task+0x338>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	095b      	lsrs	r3, r3, #5
 8001a56:	4619      	mov	r1, r3
 8001a58:	48a8      	ldr	r0, [pc, #672]	; (8001cfc <Roll_Task+0x334>)
 8001a5a:	f7ff fcdf 	bl	800141c <LL_TIM_OC_SetCompareCH2>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_8);
 8001a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a62:	48a8      	ldr	r0, [pc, #672]	; (8001d04 <Roll_Task+0x33c>)
 8001a64:	f7ff fda4 	bl	80015b0 <LL_GPIO_ResetOutputPin>
			LL_TIM_OC_SetCompareCH3(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*speed / 100));//PD14
 8001a68:	48a4      	ldr	r0, [pc, #656]	; (8001cfc <Roll_Task+0x334>)
 8001a6a:	f7ff fbb0 	bl	80011ce <LL_TIM_GetAutoReload>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	3301      	adds	r3, #1
 8001a72:	79ba      	ldrb	r2, [r7, #6]
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	4aa1      	ldr	r2, [pc, #644]	; (8001d00 <Roll_Task+0x338>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	4619      	mov	r1, r3
 8001a82:	489e      	ldr	r0, [pc, #632]	; (8001cfc <Roll_Task+0x334>)
 8001a84:	f7ff fcd8 	bl	8001438 <LL_TIM_OC_SetCompareCH3>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_9);
 8001a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a8c:	489d      	ldr	r0, [pc, #628]	; (8001d04 <Roll_Task+0x33c>)
 8001a8e:	f7ff fd8f 	bl	80015b0 <LL_GPIO_ResetOutputPin>
			LL_TIM_OC_SetCompareCH4(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*speed / 100));//PD15
 8001a92:	489a      	ldr	r0, [pc, #616]	; (8001cfc <Roll_Task+0x334>)
 8001a94:	f7ff fb9b 	bl	80011ce <LL_TIM_GetAutoReload>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	79ba      	ldrb	r2, [r7, #6]
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	4a97      	ldr	r2, [pc, #604]	; (8001d00 <Roll_Task+0x338>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4893      	ldr	r0, [pc, #588]	; (8001cfc <Roll_Task+0x334>)
 8001aae:	f7ff fcd1 	bl	8001454 <LL_TIM_OC_SetCompareCH4>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_3);//4
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	4893      	ldr	r0, [pc, #588]	; (8001d04 <Roll_Task+0x33c>)
 8001ab6:	f7ff fd7b 	bl	80015b0 <LL_GPIO_ResetOutputPin>
 8001aba:	e78e      	b.n	80019da <Roll_Task+0x12>
			}
			//LL_GPIO_TogglePin(GPIOB,LL_GPIO_PIN_14);
		else if(Cmd=='d')
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d15a      	bne.n	8001b78 <Roll_Task+0x1b0>
		{
			LL_GPIO_TogglePin(GPIOB,LL_GPIO_PIN_0);
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4890      	ldr	r0, [pc, #576]	; (8001d08 <Roll_Task+0x340>)
 8001ac6:	f7ff fd82 	bl	80015ce <LL_GPIO_TogglePin>
			LL_TIM_OC_SetCompareCH1(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*speed / 100));//PD12
 8001aca:	488c      	ldr	r0, [pc, #560]	; (8001cfc <Roll_Task+0x334>)
 8001acc:	f7ff fb7f 	bl	80011ce <LL_TIM_GetAutoReload>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	79ba      	ldrb	r2, [r7, #6]
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	4a89      	ldr	r2, [pc, #548]	; (8001d00 <Roll_Task+0x338>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	095b      	lsrs	r3, r3, #5
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4885      	ldr	r0, [pc, #532]	; (8001cfc <Roll_Task+0x334>)
 8001ae6:	f7ff fc8b 	bl	8001400 <LL_TIM_OC_SetCompareCH1>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_0);//3
 8001aea:	2101      	movs	r1, #1
 8001aec:	4885      	ldr	r0, [pc, #532]	; (8001d04 <Roll_Task+0x33c>)
 8001aee:	f7ff fd5f 	bl	80015b0 <LL_GPIO_ResetOutputPin>
			LL_TIM_OC_SetCompareCH2(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*(100-speed) / 100));//PD13
 8001af2:	4882      	ldr	r0, [pc, #520]	; (8001cfc <Roll_Task+0x334>)
 8001af4:	f7ff fb6b 	bl	80011ce <LL_TIM_GetAutoReload>
 8001af8:	4603      	mov	r3, r0
 8001afa:	3301      	adds	r3, #1
 8001afc:	79ba      	ldrb	r2, [r7, #6]
 8001afe:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4a7e      	ldr	r2, [pc, #504]	; (8001d00 <Roll_Task+0x338>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	095b      	lsrs	r3, r3, #5
 8001b0e:	4619      	mov	r1, r3
 8001b10:	487a      	ldr	r0, [pc, #488]	; (8001cfc <Roll_Task+0x334>)
 8001b12:	f7ff fc83 	bl	800141c <LL_TIM_OC_SetCompareCH2>
			LL_GPIO_SetOutputPin(GPIOC,LL_GPIO_PIN_8);//re 1
 8001b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1a:	487a      	ldr	r0, [pc, #488]	; (8001d04 <Roll_Task+0x33c>)
 8001b1c:	f7ff fd3a 	bl	8001594 <LL_GPIO_SetOutputPin>
			LL_TIM_OC_SetCompareCH3(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*speed / 100));//PD14
 8001b20:	4876      	ldr	r0, [pc, #472]	; (8001cfc <Roll_Task+0x334>)
 8001b22:	f7ff fb54 	bl	80011ce <LL_TIM_GetAutoReload>
 8001b26:	4603      	mov	r3, r0
 8001b28:	3301      	adds	r3, #1
 8001b2a:	79ba      	ldrb	r2, [r7, #6]
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	4a73      	ldr	r2, [pc, #460]	; (8001d00 <Roll_Task+0x338>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4870      	ldr	r0, [pc, #448]	; (8001cfc <Roll_Task+0x334>)
 8001b3c:	f7ff fc7c 	bl	8001438 <LL_TIM_OC_SetCompareCH3>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_9);//re 2
 8001b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b44:	486f      	ldr	r0, [pc, #444]	; (8001d04 <Roll_Task+0x33c>)
 8001b46:	f7ff fd33 	bl	80015b0 <LL_GPIO_ResetOutputPin>
			LL_TIM_OC_SetCompareCH4(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*(100-speed) / 100));//PD15
 8001b4a:	486c      	ldr	r0, [pc, #432]	; (8001cfc <Roll_Task+0x334>)
 8001b4c:	f7ff fb3f 	bl	80011ce <LL_TIM_GetAutoReload>
 8001b50:	4603      	mov	r3, r0
 8001b52:	3301      	adds	r3, #1
 8001b54:	79ba      	ldrb	r2, [r7, #6]
 8001b56:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a68      	ldr	r2, [pc, #416]	; (8001d00 <Roll_Task+0x338>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	095b      	lsrs	r3, r3, #5
 8001b66:	4619      	mov	r1, r3
 8001b68:	4864      	ldr	r0, [pc, #400]	; (8001cfc <Roll_Task+0x334>)
 8001b6a:	f7ff fc73 	bl	8001454 <LL_TIM_OC_SetCompareCH4>
			LL_GPIO_SetOutputPin(GPIOC,LL_GPIO_PIN_3);//4
 8001b6e:	2108      	movs	r1, #8
 8001b70:	4864      	ldr	r0, [pc, #400]	; (8001d04 <Roll_Task+0x33c>)
 8001b72:	f7ff fd0f 	bl	8001594 <LL_GPIO_SetOutputPin>
 8001b76:	e730      	b.n	80019da <Roll_Task+0x12>
					}

		else if(Cmd=='s')
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	2b73      	cmp	r3, #115	; 0x73
 8001b7c:	d15e      	bne.n	8001c3c <Roll_Task+0x274>
		{
			LL_GPIO_TogglePin(GPIOB,LL_GPIO_PIN_7);
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	4861      	ldr	r0, [pc, #388]	; (8001d08 <Roll_Task+0x340>)
 8001b82:	f7ff fd24 	bl	80015ce <LL_GPIO_TogglePin>
			LL_TIM_OC_SetCompareCH1(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*(100-speed) / 100));//PD12
 8001b86:	485d      	ldr	r0, [pc, #372]	; (8001cfc <Roll_Task+0x334>)
 8001b88:	f7ff fb21 	bl	80011ce <LL_TIM_GetAutoReload>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	3301      	adds	r3, #1
 8001b90:	79ba      	ldrb	r2, [r7, #6]
 8001b92:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	4a59      	ldr	r2, [pc, #356]	; (8001d00 <Roll_Task+0x338>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4855      	ldr	r0, [pc, #340]	; (8001cfc <Roll_Task+0x334>)
 8001ba6:	f7ff fc2b 	bl	8001400 <LL_TIM_OC_SetCompareCH1>
			LL_GPIO_SetOutputPin(GPIOC,LL_GPIO_PIN_0);//3
 8001baa:	2101      	movs	r1, #1
 8001bac:	4855      	ldr	r0, [pc, #340]	; (8001d04 <Roll_Task+0x33c>)
 8001bae:	f7ff fcf1 	bl	8001594 <LL_GPIO_SetOutputPin>
			LL_TIM_OC_SetCompareCH2(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*(100-speed) / 100));//PD13
 8001bb2:	4852      	ldr	r0, [pc, #328]	; (8001cfc <Roll_Task+0x334>)
 8001bb4:	f7ff fb0b 	bl	80011ce <LL_TIM_GetAutoReload>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	3301      	adds	r3, #1
 8001bbc:	79ba      	ldrb	r2, [r7, #6]
 8001bbe:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <Roll_Task+0x338>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	4619      	mov	r1, r3
 8001bd0:	484a      	ldr	r0, [pc, #296]	; (8001cfc <Roll_Task+0x334>)
 8001bd2:	f7ff fc23 	bl	800141c <LL_TIM_OC_SetCompareCH2>
			LL_GPIO_SetOutputPin(GPIOC,LL_GPIO_PIN_8);//re 1
 8001bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bda:	484a      	ldr	r0, [pc, #296]	; (8001d04 <Roll_Task+0x33c>)
 8001bdc:	f7ff fcda 	bl	8001594 <LL_GPIO_SetOutputPin>
			LL_TIM_OC_SetCompareCH3(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*(100-speed) / 100));//PD14
 8001be0:	4846      	ldr	r0, [pc, #280]	; (8001cfc <Roll_Task+0x334>)
 8001be2:	f7ff faf4 	bl	80011ce <LL_TIM_GetAutoReload>
 8001be6:	4603      	mov	r3, r0
 8001be8:	3301      	adds	r3, #1
 8001bea:	79ba      	ldrb	r2, [r7, #6]
 8001bec:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	4a42      	ldr	r2, [pc, #264]	; (8001d00 <Roll_Task+0x338>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	483f      	ldr	r0, [pc, #252]	; (8001cfc <Roll_Task+0x334>)
 8001c00:	f7ff fc1a 	bl	8001438 <LL_TIM_OC_SetCompareCH3>
			LL_GPIO_SetOutputPin(GPIOC,LL_GPIO_PIN_9);//re 2
 8001c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c08:	483e      	ldr	r0, [pc, #248]	; (8001d04 <Roll_Task+0x33c>)
 8001c0a:	f7ff fcc3 	bl	8001594 <LL_GPIO_SetOutputPin>
			LL_TIM_OC_SetCompareCH4(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*(100-speed) / 100));//PD15
 8001c0e:	483b      	ldr	r0, [pc, #236]	; (8001cfc <Roll_Task+0x334>)
 8001c10:	f7ff fadd 	bl	80011ce <LL_TIM_GetAutoReload>
 8001c14:	4603      	mov	r3, r0
 8001c16:	3301      	adds	r3, #1
 8001c18:	79ba      	ldrb	r2, [r7, #6]
 8001c1a:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a37      	ldr	r2, [pc, #220]	; (8001d00 <Roll_Task+0x338>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	095b      	lsrs	r3, r3, #5
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4833      	ldr	r0, [pc, #204]	; (8001cfc <Roll_Task+0x334>)
 8001c2e:	f7ff fc11 	bl	8001454 <LL_TIM_OC_SetCompareCH4>
			LL_GPIO_SetOutputPin(GPIOC,LL_GPIO_PIN_3);//4
 8001c32:	2108      	movs	r1, #8
 8001c34:	4833      	ldr	r0, [pc, #204]	; (8001d04 <Roll_Task+0x33c>)
 8001c36:	f7ff fcad 	bl	8001594 <LL_GPIO_SetOutputPin>
 8001c3a:	e6ce      	b.n	80019da <Roll_Task+0x12>
					}
		else if(Cmd=='a')
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b61      	cmp	r3, #97	; 0x61
 8001c40:	d164      	bne.n	8001d0c <Roll_Task+0x344>
			{
			LL_GPIO_TogglePin(GPIOB,LL_GPIO_PIN_7);
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	4830      	ldr	r0, [pc, #192]	; (8001d08 <Roll_Task+0x340>)
 8001c46:	f7ff fcc2 	bl	80015ce <LL_GPIO_TogglePin>
			LL_TIM_OC_SetCompareCH1(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*(100-speed) / 100));//PD12
 8001c4a:	482c      	ldr	r0, [pc, #176]	; (8001cfc <Roll_Task+0x334>)
 8001c4c:	f7ff fabf 	bl	80011ce <LL_TIM_GetAutoReload>
 8001c50:	4603      	mov	r3, r0
 8001c52:	3301      	adds	r3, #1
 8001c54:	79ba      	ldrb	r2, [r7, #6]
 8001c56:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <Roll_Task+0x338>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	4619      	mov	r1, r3
 8001c68:	4824      	ldr	r0, [pc, #144]	; (8001cfc <Roll_Task+0x334>)
 8001c6a:	f7ff fbc9 	bl	8001400 <LL_TIM_OC_SetCompareCH1>
			LL_GPIO_SetOutputPin(GPIOC,LL_GPIO_PIN_0);//3
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4824      	ldr	r0, [pc, #144]	; (8001d04 <Roll_Task+0x33c>)
 8001c72:	f7ff fc8f 	bl	8001594 <LL_GPIO_SetOutputPin>
			LL_TIM_OC_SetCompareCH2(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*speed / 100));//PD13
 8001c76:	4821      	ldr	r0, [pc, #132]	; (8001cfc <Roll_Task+0x334>)
 8001c78:	f7ff faa9 	bl	80011ce <LL_TIM_GetAutoReload>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	3301      	adds	r3, #1
 8001c80:	79ba      	ldrb	r2, [r7, #6]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <Roll_Task+0x338>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	4619      	mov	r1, r3
 8001c90:	481a      	ldr	r0, [pc, #104]	; (8001cfc <Roll_Task+0x334>)
 8001c92:	f7ff fbc3 	bl	800141c <LL_TIM_OC_SetCompareCH2>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_8);//re 1
 8001c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9a:	481a      	ldr	r0, [pc, #104]	; (8001d04 <Roll_Task+0x33c>)
 8001c9c:	f7ff fc88 	bl	80015b0 <LL_GPIO_ResetOutputPin>
			LL_TIM_OC_SetCompareCH3(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*(100-speed) / 100));//PD14
 8001ca0:	4816      	ldr	r0, [pc, #88]	; (8001cfc <Roll_Task+0x334>)
 8001ca2:	f7ff fa94 	bl	80011ce <LL_TIM_GetAutoReload>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	3301      	adds	r3, #1
 8001caa:	79ba      	ldrb	r2, [r7, #6]
 8001cac:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001cb0:	fb02 f303 	mul.w	r3, r2, r3
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <Roll_Task+0x338>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <Roll_Task+0x334>)
 8001cc0:	f7ff fbba 	bl	8001438 <LL_TIM_OC_SetCompareCH3>
			LL_GPIO_SetOutputPin(GPIOC,LL_GPIO_PIN_9);//re 2
 8001cc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc8:	480e      	ldr	r0, [pc, #56]	; (8001d04 <Roll_Task+0x33c>)
 8001cca:	f7ff fc63 	bl	8001594 <LL_GPIO_SetOutputPin>
			LL_TIM_OC_SetCompareCH4(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*speed / 100));//PD15
 8001cce:	480b      	ldr	r0, [pc, #44]	; (8001cfc <Roll_Task+0x334>)
 8001cd0:	f7ff fa7d 	bl	80011ce <LL_TIM_GetAutoReload>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	79ba      	ldrb	r2, [r7, #6]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <Roll_Task+0x338>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <Roll_Task+0x334>)
 8001cea:	f7ff fbb3 	bl	8001454 <LL_TIM_OC_SetCompareCH4>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_3);//4
 8001cee:	2108      	movs	r1, #8
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <Roll_Task+0x33c>)
 8001cf2:	f7ff fc5d 	bl	80015b0 <LL_GPIO_ResetOutputPin>
 8001cf6:	e670      	b.n	80019da <Roll_Task+0x12>
 8001cf8:	20000090 	.word	0x20000090
 8001cfc:	40000800 	.word	0x40000800
 8001d00:	51eb851f 	.word	0x51eb851f
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020400 	.word	0x40020400
			}
		else if(Cmd==' ')
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	f47f ae63 	bne.w	80019da <Roll_Task+0x12>
		{
			LL_TIM_OC_SetCompareCH1(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*0 / 100));//PD12
 8001d14:	4817      	ldr	r0, [pc, #92]	; (8001d74 <Roll_Task+0x3ac>)
 8001d16:	f7ff fa5a 	bl	80011ce <LL_TIM_GetAutoReload>
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4815      	ldr	r0, [pc, #84]	; (8001d74 <Roll_Task+0x3ac>)
 8001d1e:	f7ff fb6f 	bl	8001400 <LL_TIM_OC_SetCompareCH1>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_0);//3
 8001d22:	2101      	movs	r1, #1
 8001d24:	4814      	ldr	r0, [pc, #80]	; (8001d78 <Roll_Task+0x3b0>)
 8001d26:	f7ff fc43 	bl	80015b0 <LL_GPIO_ResetOutputPin>
			LL_TIM_OC_SetCompareCH2(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*0 / 100));//PD13
 8001d2a:	4812      	ldr	r0, [pc, #72]	; (8001d74 <Roll_Task+0x3ac>)
 8001d2c:	f7ff fa4f 	bl	80011ce <LL_TIM_GetAutoReload>
 8001d30:	2100      	movs	r1, #0
 8001d32:	4810      	ldr	r0, [pc, #64]	; (8001d74 <Roll_Task+0x3ac>)
 8001d34:	f7ff fb72 	bl	800141c <LL_TIM_OC_SetCompareCH2>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_8);
 8001d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <Roll_Task+0x3b0>)
 8001d3e:	f7ff fc37 	bl	80015b0 <LL_GPIO_ResetOutputPin>
			LL_TIM_OC_SetCompareCH3(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*0 / 100));//PD14
 8001d42:	480c      	ldr	r0, [pc, #48]	; (8001d74 <Roll_Task+0x3ac>)
 8001d44:	f7ff fa43 	bl	80011ce <LL_TIM_GetAutoReload>
 8001d48:	2100      	movs	r1, #0
 8001d4a:	480a      	ldr	r0, [pc, #40]	; (8001d74 <Roll_Task+0x3ac>)
 8001d4c:	f7ff fb74 	bl	8001438 <LL_TIM_OC_SetCompareCH3>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_9);
 8001d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d54:	4808      	ldr	r0, [pc, #32]	; (8001d78 <Roll_Task+0x3b0>)
 8001d56:	f7ff fc2b 	bl	80015b0 <LL_GPIO_ResetOutputPin>
			LL_TIM_OC_SetCompareCH4(TIM4, ( (LL_TIM_GetAutoReload(TIM4) + 1 )*0 / 100));//PD15
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <Roll_Task+0x3ac>)
 8001d5c:	f7ff fa37 	bl	80011ce <LL_TIM_GetAutoReload>
 8001d60:	2100      	movs	r1, #0
 8001d62:	4804      	ldr	r0, [pc, #16]	; (8001d74 <Roll_Task+0x3ac>)
 8001d64:	f7ff fb76 	bl	8001454 <LL_TIM_OC_SetCompareCH4>
			LL_GPIO_ResetOutputPin(GPIOC,LL_GPIO_PIN_3);//4
 8001d68:	2108      	movs	r1, #8
 8001d6a:	4803      	ldr	r0, [pc, #12]	; (8001d78 <Roll_Task+0x3b0>)
 8001d6c:	f7ff fc20 	bl	80015b0 <LL_GPIO_ResetOutputPin>
		if(xQueueReceive(RollCmdQueue,&nextCmd, portMAX_DELAY)== pdTRUE){
 8001d70:	e633      	b.n	80019da <Roll_Task+0x12>
 8001d72:	bf00      	nop
 8001d74:	40000800 	.word	0x40000800
 8001d78:	40020800 	.word	0x40020800

08001d7c <Uart_Rx_Task>:
			}

	}
}

void Uart_Rx_Task(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
	uint8_t rec;
	//LL_GPIO_TogglePin(GPIOB,LL_GPIO_PIN_7);
	while(1){
		while(!LL_USART_IsActiveFlag_RXNE(USART3));
 8001d82:	bf00      	nop
 8001d84:	4817      	ldr	r0, [pc, #92]	; (8001de4 <Uart_Rx_Task+0x68>)
 8001d86:	f7ff fbc3 	bl	8001510 <LL_USART_IsActiveFlag_RXNE>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f9      	beq.n	8001d84 <Uart_Rx_Task+0x8>
		rec =LL_USART_ReceiveData8(USART3);
 8001d90:	4814      	ldr	r0, [pc, #80]	; (8001de4 <Uart_Rx_Task+0x68>)
 8001d92:	f7ff fbe3 	bl	800155c <LL_USART_ReceiveData8>
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
		if(rec=='w'||rec=='a'||rec=='s'||rec=='d'||rec==' '||rec=='x'||rec=='c'){
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b77      	cmp	r3, #119	; 0x77
 8001d9e:	d011      	beq.n	8001dc4 <Uart_Rx_Task+0x48>
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b61      	cmp	r3, #97	; 0x61
 8001da4:	d00e      	beq.n	8001dc4 <Uart_Rx_Task+0x48>
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b73      	cmp	r3, #115	; 0x73
 8001daa:	d00b      	beq.n	8001dc4 <Uart_Rx_Task+0x48>
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d008      	beq.n	8001dc4 <Uart_Rx_Task+0x48>
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d005      	beq.n	8001dc4 <Uart_Rx_Task+0x48>
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2b78      	cmp	r3, #120	; 0x78
 8001dbc:	d002      	beq.n	8001dc4 <Uart_Rx_Task+0x48>
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2b63      	cmp	r3, #99	; 0x63
 8001dc2:	d10a      	bne.n	8001dda <Uart_Rx_Task+0x5e>

			xQueueSend(RollCmdQueue,&rec,portMAX_DELAY);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <Uart_Rx_Task+0x6c>)
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	1df9      	adds	r1, r7, #7
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	f003 faca 	bl	8005368 <xQueueGenericSend>
			vTaskDelay(100/portTICK_PERIOD_MS);
 8001dd4:	2064      	movs	r0, #100	; 0x64
 8001dd6:	f003 ff5f 	bl	8005c98 <vTaskDelay>

		}
		vTaskDelay(1/portTICK_PERIOD_MS);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f003 ff5c 	bl	8005c98 <vTaskDelay>
		while(!LL_USART_IsActiveFlag_RXNE(USART3));
 8001de0:	e7cf      	b.n	8001d82 <Uart_Rx_Task+0x6>
 8001de2:	bf00      	nop
 8001de4:	40004800 	.word	0x40004800
 8001de8:	20000090 	.word	0x20000090

08001dec <ADXL_Task>:
	}
}
void ADXL_Task(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b09c      	sub	sp, #112	; 0x70
 8001df0:	af00      	add	r7, sp, #0
	uint8_t data[6] = {0} ;
 8001df2:	2300      	movs	r3, #0
 8001df4:	643b      	str	r3, [r7, #64]	; 0x40
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		short dataXYZ[3] = {0};
 8001dfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	809a      	strh	r2, [r3, #4]
		float data_acc[3] = {0};
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
		uint8_t datafmt_val;
		float gravity_range = 8.0f;
 8001e12:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e16:	667b      	str	r3, [r7, #100]	; 0x64
	  float resol = 1024.0f;	//10-bit
 8001e18:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8001e1c:	663b      	str	r3, [r7, #96]	; 0x60
	  float factor = gravity_range / resol;
 8001e1e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001e22:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	  Usart3_Send("----------------------\n\r");
 8001e2e:	48ae      	ldr	r0, [pc, #696]	; (80020e8 <ADXL_Task+0x2fc>)
 8001e30:	f000 f9e2 	bl	80021f8 <Usart3_Send>
	  uint8_t* name[3];
	  uint8_t ax[] = "Ax";
 8001e34:	4aad      	ldr	r2, [pc, #692]	; (80020ec <ADXL_Task+0x300>)
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	8019      	strh	r1, [r3, #0]
 8001e40:	3302      	adds	r3, #2
 8001e42:	0c12      	lsrs	r2, r2, #16
 8001e44:	701a      	strb	r2, [r3, #0]
	  uint8_t ay[] = "Ay";
 8001e46:	4aaa      	ldr	r2, [pc, #680]	; (80020f0 <ADXL_Task+0x304>)
 8001e48:	f107 0318 	add.w	r3, r7, #24
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	8019      	strh	r1, [r3, #0]
 8001e52:	3302      	adds	r3, #2
 8001e54:	0c12      	lsrs	r2, r2, #16
 8001e56:	701a      	strb	r2, [r3, #0]
	  uint8_t az[] = "Az";
 8001e58:	4aa6      	ldr	r2, [pc, #664]	; (80020f4 <ADXL_Task+0x308>)
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	4611      	mov	r1, r2
 8001e62:	8019      	strh	r1, [r3, #0]
 8001e64:	3302      	adds	r3, #2
 8001e66:	0c12      	lsrs	r2, r2, #16
 8001e68:	701a      	strb	r2, [r3, #0]

	  name[0]=ax;
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	623b      	str	r3, [r7, #32]
	  name[1]=ay;
 8001e70:	f107 0318 	add.w	r3, r7, #24
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
	  name[2]=az;
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28

	  writeReg(0x2D,0x0A);
 8001e7c:	210a      	movs	r1, #10
 8001e7e:	202d      	movs	r0, #45	; 0x2d
 8001e80:	f000 f980 	bl	8002184 <writeReg>
	  /**
	   *  Clearing bit3 to config sensor as Normal resolution mode.
	   *  Set bit[1:0] = 0x01 to get ±4g range.
	   */
	  datafmt_val = readReg(0x31);
 8001e84:	2031      	movs	r0, #49	; 0x31
 8001e86:	f000 f93d 	bl	8002104 <readReg>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	  datafmt_val = (datafmt_val & ~(1 << 3)) | 0x01 ;
 8001e90:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8001e94:	f023 0309 	bic.w	r3, r3, #9
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	  writeReg(0x31,datafmt_val);
 8001ea4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	2031      	movs	r0, #49	; 0x31
 8001eac:	f000 f96a 	bl	8002184 <writeReg>
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)
	  {

		  data[0] = readReg(0x32);
 8001eb0:	2032      	movs	r0, #50	; 0x32
 8001eb2:	f000 f927 	bl	8002104 <readReg>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		  data[1] = readReg(0x33);
 8001ebc:	2033      	movs	r0, #51	; 0x33
 8001ebe:	f000 f921 	bl	8002104 <readReg>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  data[2] = readReg(0x34);
 8001ec8:	2034      	movs	r0, #52	; 0x34
 8001eca:	f000 f91b 	bl	8002104 <readReg>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		  data[3] = readReg(0x35);
 8001ed4:	2035      	movs	r0, #53	; 0x35
 8001ed6:	f000 f915 	bl	8002104 <readReg>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  data[4] = readReg(0x36);
 8001ee0:	2036      	movs	r0, #54	; 0x36
 8001ee2:	f000 f90f 	bl	8002104 <readReg>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		  data[5] = readReg(0x37);
 8001eec:	2037      	movs	r0, #55	; 0x37
 8001eee:	f000 f909 	bl	8002104 <readReg>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45



	    for(uint8_t k = 0 ; k <3 ; k ++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001efe:	e022      	b.n	8001f46 <ADXL_Task+0x15a>
	      dataXYZ[k] = ((short)data[2*k+1] << 8) | (short)data[2*k] ;
 8001f00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	3301      	adds	r3, #1
 8001f08:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	b219      	sxth	r1, r3
 8001f16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001f20:	4413      	add	r3, r2
 8001f22:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	b212      	sxth	r2, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001f36:	440b      	add	r3, r1
 8001f38:	f823 2c38 	strh.w	r2, [r3, #-56]
	    for(uint8_t k = 0 ; k <3 ; k ++)
 8001f3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f40:	3301      	adds	r3, #1
 8001f42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001f46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d9d8      	bls.n	8001f00 <ADXL_Task+0x114>

	      data_acc[0] = dataXYZ[0]*factor;
 8001f4e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	      data_acc[1] = dataXYZ[1]*factor;
 8001f66:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f72:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	      data_acc[2] = dataXYZ[2]*factor;
 8001f7e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	      char uartBuf[20]="";
 8001f96:	2300      	movs	r3, #0
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
	        for(int i=0;i<3;i++){
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001faa:	e093      	b.n	80020d4 <ADXL_Task+0x2e8>
	      	  if(data_acc[i]>0){
 8001fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3b44      	subs	r3, #68	; 0x44
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	dd39      	ble.n	800203a <ADXL_Task+0x24e>
	      		  int a=(float)data_acc[i];
 8001fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b44      	subs	r3, #68	; 0x44
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fda:	ee17 3a90 	vmov	r3, s15
 8001fde:	64fb      	str	r3, [r7, #76]	; 0x4c
	      		  int b = ((float)data_acc[i]-a)*1000;
 8001fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b44      	subs	r3, #68	; 0x44
 8001fec:	ed93 7a00 	vldr	s14, [r3]
 8001ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80020f8 <ADXL_Task+0x30c>
 8002002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200a:	ee17 3a90 	vmov	r3, s15
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
	      		  sprintf ( uartBuf, " =   %d.%d\n\r",a,b);
 8002010:	4638      	mov	r0, r7
 8002012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002016:	4939      	ldr	r1, [pc, #228]	; (80020fc <ADXL_Task+0x310>)
 8002018:	f004 fe16 	bl	8006c48 <siprintf>
	      		  Usart3_Send(name[i]);
 800201c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002024:	4413      	add	r3, r2
 8002026:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f8e4 	bl	80021f8 <Usart3_Send>
	      		  Usart3_Send(uartBuf);
 8002030:	463b      	mov	r3, r7
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f8e0 	bl	80021f8 <Usart3_Send>
 8002038:	e049      	b.n	80020ce <ADXL_Task+0x2e2>

	      	  }
	      	  else if(data_acc[i]<0){
 800203a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002042:	4413      	add	r3, r2
 8002044:	3b44      	subs	r3, #68	; 0x44
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	d53c      	bpl.n	80020ce <ADXL_Task+0x2e2>
	      		  int a=-((float)data_acc[i]);
 8002054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800205c:	4413      	add	r3, r2
 800205e:	3b44      	subs	r3, #68	; 0x44
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	eef1 7a67 	vneg.f32	s15, s15
 8002068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800206c:	ee17 3a90 	vmov	r3, s15
 8002070:	657b      	str	r3, [r7, #84]	; 0x54
	      		  int b = -((float)data_acc[i]-a)*1000;
 8002072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800207a:	4413      	add	r3, r2
 800207c:	3b44      	subs	r3, #68	; 0x44
 800207e:	ed93 7a00 	vldr	s14, [r3]
 8002082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002090:	eef1 7a67 	vneg.f32	s15, s15
 8002094:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80020f8 <ADXL_Task+0x30c>
 8002098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	653b      	str	r3, [r7, #80]	; 0x50
	      		  sprintf ( uartBuf, " =  -%d.%d\n\r",a,b);
 80020a6:	4638      	mov	r0, r7
 80020a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020ac:	4914      	ldr	r1, [pc, #80]	; (8002100 <ADXL_Task+0x314>)
 80020ae:	f004 fdcb 	bl	8006c48 <siprintf>
	      		  Usart3_Send(name[i]);
 80020b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80020ba:	4413      	add	r3, r2
 80020bc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f899 	bl	80021f8 <Usart3_Send>
	      		  Usart3_Send(uartBuf);
 80020c6:	463b      	mov	r3, r7
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 f895 	bl	80021f8 <Usart3_Send>
	        for(int i=0;i<3;i++){
 80020ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020d0:	3301      	adds	r3, #1
 80020d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80020d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	f77f af68 	ble.w	8001fac <ADXL_Task+0x1c0>
	        }
		}
	        LL_mDelay(1000);
 80020dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e0:	f002 ff14 	bl	8004f0c <LL_mDelay>
	  {
 80020e4:	e6e4      	b.n	8001eb0 <ADXL_Task+0xc4>
 80020e6:	bf00      	nop
 80020e8:	080074f8 	.word	0x080074f8
 80020ec:	08007534 	.word	0x08007534
 80020f0:	08007538 	.word	0x08007538
 80020f4:	0800753c 	.word	0x0800753c
 80020f8:	447a0000 	.word	0x447a0000
 80020fc:	08007514 	.word	0x08007514
 8002100:	08007524 	.word	0x08007524

08002104 <readReg>:
	  }

}
uint8_t readReg(uint8_t addr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af02      	add	r7, sp, #8
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
	LL_I2C_HandleTransfer(I2C1, SLAVE_ADDRESS_ADXL, LL_I2C_ADDRSLAVE_7BIT, sizeof(addr), LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <readReg+0x74>)
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2301      	movs	r3, #1
 800211a:	2200      	movs	r2, #0
 800211c:	21a7      	movs	r1, #167	; 0xa7
 800211e:	4817      	ldr	r0, [pc, #92]	; (800217c <readReg+0x78>)
 8002120:	f7fe fe76 	bl	8000e10 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8002124:	bf00      	nop
 8002126:	4815      	ldr	r0, [pc, #84]	; (800217c <readReg+0x78>)
 8002128:	f7fe fe38 	bl	8000d9c <LL_I2C_IsActiveFlag_TXE>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f9      	beq.n	8002126 <readReg+0x22>
	LL_I2C_TransmitData8(I2C1, addr);
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	4619      	mov	r1, r3
 8002136:	4811      	ldr	r0, [pc, #68]	; (800217c <readReg+0x78>)
 8002138:	f7fe fe9d 	bl	8000e76 <LL_I2C_TransmitData8>
	LL_mDelay(50);
 800213c:	2032      	movs	r0, #50	; 0x32
 800213e:	f002 fee5 	bl	8004f0c <LL_mDelay>
	LL_I2C_HandleTransfer(I2C1, 0xA6, LL_I2C_ADDRSLAVE_7BIT, sizeof(addr), LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <readReg+0x7c>)
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2301      	movs	r3, #1
 800214e:	2200      	movs	r2, #0
 8002150:	21a6      	movs	r1, #166	; 0xa6
 8002152:	480a      	ldr	r0, [pc, #40]	; (800217c <readReg+0x78>)
 8002154:	f7fe fe5c 	bl	8000e10 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 8002158:	bf00      	nop
 800215a:	4808      	ldr	r0, [pc, #32]	; (800217c <readReg+0x78>)
 800215c:	f7fe fe44 	bl	8000de8 <LL_I2C_IsActiveFlag_RXNE>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f9      	beq.n	800215a <readReg+0x56>
	return LL_I2C_ReceiveData8(I2C1);
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <readReg+0x78>)
 8002168:	f7fe fe78 	bl	8000e5c <LL_I2C_ReceiveData8>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	80002000 	.word	0x80002000
 800217c:	40005400 	.word	0x40005400
 8002180:	80002400 	.word	0x80002400

08002184 <writeReg>:
void writeReg(uint8_t addr, uint8_t val)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af02      	add	r7, sp, #8
 800218a:	4603      	mov	r3, r0
 800218c:	460a      	mov	r2, r1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	4613      	mov	r3, r2
 8002192:	71bb      	strb	r3, [r7, #6]
	LL_I2C_HandleTransfer(I2C1, SLAVE_ADDRESS_ADXL, LL_I2C_ADDRSLAVE_7BIT, sizeof(addr)*2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <writeReg+0x6c>)
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2302      	movs	r3, #2
 80021a0:	2200      	movs	r2, #0
 80021a2:	21a7      	movs	r1, #167	; 0xa7
 80021a4:	4813      	ldr	r0, [pc, #76]	; (80021f4 <writeReg+0x70>)
 80021a6:	f7fe fe33 	bl	8000e10 <LL_I2C_HandleTransfer>
	LL_mDelay(50);
 80021aa:	2032      	movs	r0, #50	; 0x32
 80021ac:	f002 feae 	bl	8004f0c <LL_mDelay>
	while(!LL_I2C_IsActiveFlag_TXIS(I2C1));
 80021b0:	bf00      	nop
 80021b2:	4810      	ldr	r0, [pc, #64]	; (80021f4 <writeReg+0x70>)
 80021b4:	f7fe fe05 	bl	8000dc2 <LL_I2C_IsActiveFlag_TXIS>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f9      	beq.n	80021b2 <writeReg+0x2e>
	LL_I2C_TransmitData8(I2C1, addr);
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	4619      	mov	r1, r3
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <writeReg+0x70>)
 80021c4:	f7fe fe57 	bl	8000e76 <LL_I2C_TransmitData8>
	LL_mDelay(50);
 80021c8:	2032      	movs	r0, #50	; 0x32
 80021ca:	f002 fe9f 	bl	8004f0c <LL_mDelay>
	while(!LL_I2C_IsActiveFlag_TXIS(I2C1));
 80021ce:	bf00      	nop
 80021d0:	4808      	ldr	r0, [pc, #32]	; (80021f4 <writeReg+0x70>)
 80021d2:	f7fe fdf6 	bl	8000dc2 <LL_I2C_IsActiveFlag_TXIS>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f9      	beq.n	80021d0 <writeReg+0x4c>
	LL_I2C_TransmitData8(I2C1, val);
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	4619      	mov	r1, r3
 80021e0:	4804      	ldr	r0, [pc, #16]	; (80021f4 <writeReg+0x70>)
 80021e2:	f7fe fe48 	bl	8000e76 <LL_I2C_TransmitData8>

}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	80002000 	.word	0x80002000
 80021f4:	40005400 	.word	0x40005400

080021f8 <Usart3_Send>:

void Usart3_Send(char *string){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
    while(*string){
 8002200:	e00e      	b.n	8002220 <Usart3_Send+0x28>
    	while(!LL_USART_IsActiveFlag_TXE(USART3));
 8002202:	bf00      	nop
 8002204:	480b      	ldr	r0, [pc, #44]	; (8002234 <Usart3_Send+0x3c>)
 8002206:	f7ff f996 	bl	8001536 <LL_USART_IsActiveFlag_TXE>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f9      	beq.n	8002204 <Usart3_Send+0xc>
        /* ?��?��?�息?�� USART1 */
        //USART_SendData(USART1, (unsigned short int) *string++);
        LL_USART_TransmitData8(USART3, (uint8_t) *string++);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	4806      	ldr	r0, [pc, #24]	; (8002234 <Usart3_Send+0x3c>)
 800221c:	f7ff f9ab 	bl	8001576 <LL_USART_TransmitData8>
    while(*string){
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ec      	bne.n	8002202 <Usart3_Send+0xa>

        /* 等�?��?�息?��?��?�畢 */
        //while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
    }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40004800 	.word	0x40004800

08002238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002240:	e7fe      	b.n	8002240 <Error_Handler+0x8>
	...

08002244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_MspInit+0x4c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a10      	ldr	r2, [pc, #64]	; (8002290 <HAL_MspInit+0x4c>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_MspInit+0x4c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_MspInit+0x4c>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_MspInit+0x4c>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_MspInit+0x4c>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	210f      	movs	r1, #15
 800227e:	f06f 0001 	mvn.w	r0, #1
 8002282:	f000 fcc0 	bl	8002c06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <NMI_Handler+0x4>

0800229a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <HardFault_Handler+0x4>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <MemManage_Handler+0x4>

080022a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c4:	f000 fbc2 	bl	8002a4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022c8:	f004 f852 	bl	8006370 <xTaskGetSchedulerState>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022d2:	f004 fa71 	bl	80067b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <_sbrk+0x5c>)
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <_sbrk+0x60>)
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <_sbrk+0x64>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <_sbrk+0x68>)
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	429a      	cmp	r2, r3
 800230a:	d207      	bcs.n	800231c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800230c:	f004 fc5c 	bl	8006bc8 <__errno>
 8002310:	4603      	mov	r3, r0
 8002312:	220c      	movs	r2, #12
 8002314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	e009      	b.n	8002330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	4a05      	ldr	r2, [pc, #20]	; (8002340 <_sbrk+0x64>)
 800232c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20080000 	.word	0x20080000
 800233c:	00000400 	.word	0x00000400
 8002340:	20000094 	.word	0x20000094
 8002344:	20003e80 	.word	0x20003e80

08002348 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <SystemInit+0x20>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <SystemInit+0x20>)
 8002354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <LL_AHB1_GRP1_EnableClock>:
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002378:	4907      	ldr	r1, [pc, #28]	; (8002398 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4313      	orrs	r3, r2
 800237e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40023800 	.word	0x40023800

0800239c <LL_APB1_GRP1_EnableClock>:
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4013      	ands	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40023800 	.word	0x40023800

080023cc <LL_TIM_DisableARRPreload>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	601a      	str	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_TIM_OC_DisableFast>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d028      	beq.n	800244e <LL_TIM_OC_DisableFast+0x62>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d023      	beq.n	800244a <LL_TIM_OC_DisableFast+0x5e>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b10      	cmp	r3, #16
 8002406:	d01e      	beq.n	8002446 <LL_TIM_OC_DisableFast+0x5a>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d019      	beq.n	8002442 <LL_TIM_OC_DisableFast+0x56>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002414:	d013      	beq.n	800243e <LL_TIM_OC_DisableFast+0x52>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241c:	d00d      	beq.n	800243a <LL_TIM_OC_DisableFast+0x4e>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002424:	d007      	beq.n	8002436 <LL_TIM_OC_DisableFast+0x4a>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242c:	d101      	bne.n	8002432 <LL_TIM_OC_DisableFast+0x46>
 800242e:	2307      	movs	r3, #7
 8002430:	e00e      	b.n	8002450 <LL_TIM_OC_DisableFast+0x64>
 8002432:	2308      	movs	r3, #8
 8002434:	e00c      	b.n	8002450 <LL_TIM_OC_DisableFast+0x64>
 8002436:	2306      	movs	r3, #6
 8002438:	e00a      	b.n	8002450 <LL_TIM_OC_DisableFast+0x64>
 800243a:	2305      	movs	r3, #5
 800243c:	e008      	b.n	8002450 <LL_TIM_OC_DisableFast+0x64>
 800243e:	2304      	movs	r3, #4
 8002440:	e006      	b.n	8002450 <LL_TIM_OC_DisableFast+0x64>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <LL_TIM_OC_DisableFast+0x64>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <LL_TIM_OC_DisableFast+0x64>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <LL_TIM_OC_DisableFast+0x64>
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3318      	adds	r3, #24
 8002456:	4619      	mov	r1, r3
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <LL_TIM_OC_DisableFast+0x9c>)
 800245c:	5cd3      	ldrb	r3, [r2, r3]
 800245e:	440b      	add	r3, r1
 8002460:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	4908      	ldr	r1, [pc, #32]	; (800248c <LL_TIM_OC_DisableFast+0xa0>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	4619      	mov	r1, r3
 800246e:	2304      	movs	r3, #4
 8002470:	408b      	lsls	r3, r1
 8002472:	43db      	mvns	r3, r3
 8002474:	401a      	ands	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	0800757c 	.word	0x0800757c
 800248c:	08007588 	.word	0x08007588

08002490 <LL_TIM_OC_EnablePreload>:
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d028      	beq.n	80024f2 <LL_TIM_OC_EnablePreload+0x62>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d023      	beq.n	80024ee <LL_TIM_OC_EnablePreload+0x5e>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d01e      	beq.n	80024ea <LL_TIM_OC_EnablePreload+0x5a>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	d019      	beq.n	80024e6 <LL_TIM_OC_EnablePreload+0x56>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b8:	d013      	beq.n	80024e2 <LL_TIM_OC_EnablePreload+0x52>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c0:	d00d      	beq.n	80024de <LL_TIM_OC_EnablePreload+0x4e>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d007      	beq.n	80024da <LL_TIM_OC_EnablePreload+0x4a>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d101      	bne.n	80024d6 <LL_TIM_OC_EnablePreload+0x46>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e00e      	b.n	80024f4 <LL_TIM_OC_EnablePreload+0x64>
 80024d6:	2308      	movs	r3, #8
 80024d8:	e00c      	b.n	80024f4 <LL_TIM_OC_EnablePreload+0x64>
 80024da:	2306      	movs	r3, #6
 80024dc:	e00a      	b.n	80024f4 <LL_TIM_OC_EnablePreload+0x64>
 80024de:	2305      	movs	r3, #5
 80024e0:	e008      	b.n	80024f4 <LL_TIM_OC_EnablePreload+0x64>
 80024e2:	2304      	movs	r3, #4
 80024e4:	e006      	b.n	80024f4 <LL_TIM_OC_EnablePreload+0x64>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e004      	b.n	80024f4 <LL_TIM_OC_EnablePreload+0x64>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e002      	b.n	80024f4 <LL_TIM_OC_EnablePreload+0x64>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <LL_TIM_OC_EnablePreload+0x64>
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3318      	adds	r3, #24
 80024fa:	4619      	mov	r1, r3
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <LL_TIM_OC_EnablePreload+0x98>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
 8002502:	440b      	add	r3, r1
 8002504:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <LL_TIM_OC_EnablePreload+0x9c>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	4619      	mov	r1, r3
 8002512:	2308      	movs	r3, #8
 8002514:	408b      	lsls	r3, r1
 8002516:	431a      	orrs	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	601a      	str	r2, [r3, #0]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	0800757c 	.word	0x0800757c
 800252c:	08007588 	.word	0x08007588

08002530 <LL_TIM_SetTriggerOutput>:
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	605a      	str	r2, [r3, #4]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_TIM_DisableMasterSlaveMode>:
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	609a      	str	r2, [r3, #8]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <MX_TIM4_Init>:

/* USER CODE END 0 */

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b094      	sub	sp, #80	; 0x50
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800257e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	2220      	movs	r2, #32
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f004 fb4e 	bl	8006c38 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80025ac:	2004      	movs	r0, #4
 80025ae:	f7ff fef5 	bl	800239c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 160;
 80025b2:	23a0      	movs	r3, #160	; 0xa0
 80025b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80025b6:	2300      	movs	r3, #0
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80025ba:	4b57      	ldr	r3, [pc, #348]	; (8002718 <MX_TIM4_Init+0x1a0>)
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80025be:	2300      	movs	r3, #0
 80025c0:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80025c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025c6:	4619      	mov	r1, r3
 80025c8:	4854      	ldr	r0, [pc, #336]	; (800271c <MX_TIM4_Init+0x1a4>)
 80025ca:	f002 f845 	bl	8004658 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80025ce:	4853      	ldr	r0, [pc, #332]	; (800271c <MX_TIM4_Init+0x1a4>)
 80025d0:	f7ff fefc 	bl	80023cc <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 80025d4:	2101      	movs	r1, #1
 80025d6:	4851      	ldr	r0, [pc, #324]	; (800271c <MX_TIM4_Init+0x1a4>)
 80025d8:	f7ff ff5a 	bl	8002490 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80025dc:	2360      	movs	r3, #96	; 0x60
 80025de:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	461a      	mov	r2, r3
 80025f6:	2101      	movs	r1, #1
 80025f8:	4848      	ldr	r0, [pc, #288]	; (800271c <MX_TIM4_Init+0x1a4>)
 80025fa:	f002 f8c7 	bl	800478c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 80025fe:	2101      	movs	r1, #1
 8002600:	4846      	ldr	r0, [pc, #280]	; (800271c <MX_TIM4_Init+0x1a4>)
 8002602:	f7ff fef3 	bl	80023ec <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8002606:	2110      	movs	r1, #16
 8002608:	4844      	ldr	r0, [pc, #272]	; (800271c <MX_TIM4_Init+0x1a4>)
 800260a:	f7ff ff41 	bl	8002490 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	461a      	mov	r2, r3
 8002614:	2110      	movs	r1, #16
 8002616:	4841      	ldr	r0, [pc, #260]	; (800271c <MX_TIM4_Init+0x1a4>)
 8002618:	f002 f8b8 	bl	800478c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 800261c:	2110      	movs	r1, #16
 800261e:	483f      	ldr	r0, [pc, #252]	; (800271c <MX_TIM4_Init+0x1a4>)
 8002620:	f7ff fee4 	bl	80023ec <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8002624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002628:	483c      	ldr	r0, [pc, #240]	; (800271c <MX_TIM4_Init+0x1a4>)
 800262a:	f7ff ff31 	bl	8002490 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	461a      	mov	r2, r3
 8002634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002638:	4838      	ldr	r0, [pc, #224]	; (800271c <MX_TIM4_Init+0x1a4>)
 800263a:	f002 f8a7 	bl	800478c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 800263e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002642:	4836      	ldr	r0, [pc, #216]	; (800271c <MX_TIM4_Init+0x1a4>)
 8002644:	f7ff fed2 	bl	80023ec <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 8002648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800264c:	4833      	ldr	r0, [pc, #204]	; (800271c <MX_TIM4_Init+0x1a4>)
 800264e:	f7ff ff1f 	bl	8002490 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	461a      	mov	r2, r3
 8002658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800265c:	482f      	ldr	r0, [pc, #188]	; (800271c <MX_TIM4_Init+0x1a4>)
 800265e:	f002 f895 	bl	800478c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8002662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002666:	482d      	ldr	r0, [pc, #180]	; (800271c <MX_TIM4_Init+0x1a4>)
 8002668:	f7ff fec0 	bl	80023ec <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800266c:	2100      	movs	r1, #0
 800266e:	482b      	ldr	r0, [pc, #172]	; (800271c <MX_TIM4_Init+0x1a4>)
 8002670:	f7ff ff5e 	bl	8002530 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002674:	4829      	ldr	r0, [pc, #164]	; (800271c <MX_TIM4_Init+0x1a4>)
 8002676:	f7ff ff6e 	bl	8002556 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800267a:	2008      	movs	r0, #8
 800267c:	f7ff fe76 	bl	800236c <LL_AHB1_GRP1_EnableClock>
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8002680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002684:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002686:	2302      	movs	r3, #2
 8002688:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002696:	2302      	movs	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	4619      	mov	r1, r3
 800269e:	4820      	ldr	r0, [pc, #128]	; (8002720 <MX_TIM4_Init+0x1a8>)
 80026a0:	f001 fa8c 	bl	8003bbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80026a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026aa:	2302      	movs	r3, #2
 80026ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4817      	ldr	r0, [pc, #92]	; (8002720 <MX_TIM4_Init+0x1a8>)
 80026c4:	f001 fa7a 	bl	8003bbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80026c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026ce:	2302      	movs	r3, #2
 80026d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80026de:	2302      	movs	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	4619      	mov	r1, r3
 80026e6:	480e      	ldr	r0, [pc, #56]	; (8002720 <MX_TIM4_Init+0x1a8>)
 80026e8:	f001 fa68 	bl	8003bbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80026ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026f2:	2302      	movs	r3, #2
 80026f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002702:	2302      	movs	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_TIM4_Init+0x1a8>)
 800270c:	f001 fa56 	bl	8003bbc <LL_GPIO_Init>

}
 8002710:	bf00      	nop
 8002712:	3750      	adds	r7, #80	; 0x50
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	fff003e8 	.word	0xfff003e8
 800271c:	40000800 	.word	0x40000800
 8002720:	40020c00 	.word	0x40020c00

08002724 <LL_AHB1_GRP1_EnableClock>:
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800272e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002730:	4907      	ldr	r1, [pc, #28]	; (8002750 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4313      	orrs	r3, r2
 8002736:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800273a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4013      	ands	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40023800 	.word	0x40023800

08002754 <LL_APB1_GRP1_EnableClock>:
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <LL_APB1_GRP1_EnableClock+0x2c>)
 800275e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002760:	4907      	ldr	r1, [pc, #28]	; (8002780 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4313      	orrs	r3, r2
 8002766:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <LL_APB1_GRP1_EnableClock+0x2c>)
 800276a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4013      	ands	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40023800 	.word	0x40023800

08002784 <LL_USART_Enable>:
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_USART_ConfigAsyncMode>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	609a      	str	r2, [r3, #8]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08e      	sub	sp, #56	; 0x38
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80027d6:	f107 031c 	add.w	r3, r7, #28
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
 80027f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80027fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80027fe:	f7ff ffa9 	bl	8002754 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002802:	2008      	movs	r0, #8
 8002804:	f7ff ff8e 	bl	8002724 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800280e:	2302      	movs	r3, #2
 8002810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800281e:	2307      	movs	r3, #7
 8002820:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4619      	mov	r1, r3
 8002826:	481a      	ldr	r0, [pc, #104]	; (8002890 <MX_USART3_UART_Init+0xc0>)
 8002828:	f001 f9c8 	bl	8003bbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800282c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002830:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002832:	2302      	movs	r3, #2
 8002834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002842:	2307      	movs	r3, #7
 8002844:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4811      	ldr	r0, [pc, #68]	; (8002890 <MX_USART3_UART_Init+0xc0>)
 800284c:	f001 f9b6 	bl	8003bbc <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002850:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002854:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800285e:	2300      	movs	r3, #0
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002862:	230c      	movs	r3, #12
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002866:	2300      	movs	r3, #0
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800286a:	2300      	movs	r3, #0
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800286e:	f107 031c 	add.w	r3, r7, #28
 8002872:	4619      	mov	r1, r3
 8002874:	4807      	ldr	r0, [pc, #28]	; (8002894 <MX_USART3_UART_Init+0xc4>)
 8002876:	f002 faa9 	bl	8004dcc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800287a:	4806      	ldr	r0, [pc, #24]	; (8002894 <MX_USART3_UART_Init+0xc4>)
 800287c:	f7ff ff92 	bl	80027a4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002880:	4804      	ldr	r0, [pc, #16]	; (8002894 <MX_USART3_UART_Init+0xc4>)
 8002882:	f7ff ff7f 	bl	8002784 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	3738      	adds	r7, #56	; 0x38
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40020c00 	.word	0x40020c00
 8002894:	40004800 	.word	0x40004800

08002898 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <MX_USART6_UART_Init+0x5c>)
 80028a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028be:	220c      	movs	r2, #12
 80028c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <MX_USART6_UART_Init+0x58>)
 80028dc:	f000 fc52 	bl	8003184 <HAL_UART_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80028e6:	f7ff fca7 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20003de4 	.word	0x20003de4
 80028f4:	40011400 	.word	0x40011400

080028f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_UART_MspInit+0x7c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d127      	bne.n	800296a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_UART_MspInit+0x80>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_UART_MspInit+0x80>)
 8002920:	f043 0320 	orr.w	r3, r3, #32
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_UART_MspInit+0x80>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_UART_MspInit+0x80>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_UART_MspInit+0x80>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_UART_MspInit+0x80>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800294a:	23c0      	movs	r3, #192	; 0xc0
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800295a:	2308      	movs	r3, #8
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	4805      	ldr	r0, [pc, #20]	; (800297c <HAL_UART_MspInit+0x84>)
 8002966:	f000 f977 	bl	8002c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	; 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40011400 	.word	0x40011400
 8002978:	40023800 	.word	0x40023800
 800297c:	40020800 	.word	0x40020800

08002980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002984:	480d      	ldr	r0, [pc, #52]	; (80029bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002986:	490e      	ldr	r1, [pc, #56]	; (80029c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002988:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800298c:	e002      	b.n	8002994 <LoopCopyDataInit>

0800298e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002992:	3304      	adds	r3, #4

08002994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002998:	d3f9      	bcc.n	800298e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299a:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800299c:	4c0b      	ldr	r4, [pc, #44]	; (80029cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a0:	e001      	b.n	80029a6 <LoopFillZerobss>

080029a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a4:	3204      	adds	r2, #4

080029a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a8:	d3fb      	bcc.n	80029a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029aa:	f7ff fccd 	bl	8002348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ae:	f004 f911 	bl	8006bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029b2:	f7fe fe25 	bl	8001600 <main>
  bx  lr    
 80029b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80029bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80029c4:	080075d4 	.word	0x080075d4
  ldr r2, =_sbss
 80029c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80029cc:	20003e7c 	.word	0x20003e7c

080029d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d0:	e7fe      	b.n	80029d0 <ADC_IRQHandler>

080029d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d6:	2003      	movs	r0, #3
 80029d8:	f000 f90a 	bl	8002bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029dc:	200f      	movs	r0, #15
 80029de:	f000 f805 	bl	80029ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80029e2:	f7ff fc2f 	bl	8002244 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_InitTick+0x54>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_InitTick+0x58>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f917 	bl	8002c3e <HAL_SYSTICK_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00e      	b.n	8002a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b0f      	cmp	r3, #15
 8002a1e:	d80a      	bhi.n	8002a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a20:	2200      	movs	r2, #0
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f000 f8ed 	bl	8002c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a2c:	4a06      	ldr	r2, [pc, #24]	; (8002a48 <HAL_InitTick+0x5c>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000008 	.word	0x20000008
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_IncTick+0x20>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_IncTick+0x24>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_IncTick+0x24>)
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	20003e68 	.word	0x20003e68

08002a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return uwTick;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_GetTick+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20003e68 	.word	0x20003e68

08002a8c <__NVIC_SetPriorityGrouping>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <__NVIC_SetPriorityGrouping+0x40>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <__NVIC_SetPriorityGrouping+0x40>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00
 8002ad0:	05fa0000 	.word	0x05fa0000

08002ad4 <__NVIC_GetPriorityGrouping>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <__NVIC_GetPriorityGrouping+0x18>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0307 	and.w	r3, r3, #7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_SetPriority>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	db0a      	blt.n	8002b1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	490c      	ldr	r1, [pc, #48]	; (8002b3c <__NVIC_SetPriority+0x4c>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	0112      	lsls	r2, r2, #4
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	440b      	add	r3, r1
 8002b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b18:	e00a      	b.n	8002b30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4908      	ldr	r1, [pc, #32]	; (8002b40 <__NVIC_SetPriority+0x50>)
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3b04      	subs	r3, #4
 8002b28:	0112      	lsls	r2, r2, #4
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	761a      	strb	r2, [r3, #24]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f1c3 0307 	rsb	r3, r3, #7
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	bf28      	it	cs
 8002b62:	2304      	movcs	r3, #4
 8002b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d902      	bls.n	8002b74 <NVIC_EncodePriority+0x30>
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3b03      	subs	r3, #3
 8002b72:	e000      	b.n	8002b76 <NVIC_EncodePriority+0x32>
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	4313      	orrs	r3, r2
         );
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3724      	adds	r7, #36	; 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bbc:	d301      	bcc.n	8002bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00f      	b.n	8002be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <SysTick_Config+0x40>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bca:	210f      	movs	r1, #15
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd0:	f7ff ff8e 	bl	8002af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <SysTick_Config+0x40>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bda:	4b04      	ldr	r3, [pc, #16]	; (8002bec <SysTick_Config+0x40>)
 8002bdc:	2207      	movs	r2, #7
 8002bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	e000e010 	.word	0xe000e010

08002bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff47 	bl	8002a8c <__NVIC_SetPriorityGrouping>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c18:	f7ff ff5c 	bl	8002ad4 <__NVIC_GetPriorityGrouping>
 8002c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7ff ff8e 	bl	8002b44 <NVIC_EncodePriority>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff5d 	bl	8002af0 <__NVIC_SetPriority>
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffb0 	bl	8002bac <SysTick_Config>
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e175      	b.n	8002f64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8164 	bne.w	8002f5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_GPIO_Init+0x5e>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002caa:	2b11      	cmp	r3, #17
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b12      	cmp	r3, #18
 8002cb4:	d130      	bne.n	8002d18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 0201 	and.w	r2, r3, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	2203      	movs	r2, #3
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x100>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b12      	cmp	r3, #18
 8002d56:	d123      	bne.n	8002da0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	69b9      	ldr	r1, [r7, #24]
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80be 	beq.w	8002f5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de2:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4a65      	ldr	r2, [pc, #404]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dec:	6453      	str	r3, [r2, #68]	; 0x44
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dfa:	4a61      	ldr	r2, [pc, #388]	; (8002f80 <HAL_GPIO_Init+0x328>)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	3302      	adds	r3, #2
 8002e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	220f      	movs	r2, #15
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <HAL_GPIO_Init+0x32c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d037      	beq.n	8002e96 <HAL_GPIO_Init+0x23e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a57      	ldr	r2, [pc, #348]	; (8002f88 <HAL_GPIO_Init+0x330>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d031      	beq.n	8002e92 <HAL_GPIO_Init+0x23a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a56      	ldr	r2, [pc, #344]	; (8002f8c <HAL_GPIO_Init+0x334>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02b      	beq.n	8002e8e <HAL_GPIO_Init+0x236>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a55      	ldr	r2, [pc, #340]	; (8002f90 <HAL_GPIO_Init+0x338>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_Init+0x232>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a54      	ldr	r2, [pc, #336]	; (8002f94 <HAL_GPIO_Init+0x33c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_Init+0x22e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a53      	ldr	r2, [pc, #332]	; (8002f98 <HAL_GPIO_Init+0x340>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x22a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_GPIO_Init+0x344>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x226>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a51      	ldr	r2, [pc, #324]	; (8002fa0 <HAL_GPIO_Init+0x348>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x222>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a50      	ldr	r2, [pc, #320]	; (8002fa4 <HAL_GPIO_Init+0x34c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x21e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4f      	ldr	r2, [pc, #316]	; (8002fa8 <HAL_GPIO_Init+0x350>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x21a>
 8002e6e:	2309      	movs	r3, #9
 8002e70:	e012      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e72:	230a      	movs	r3, #10
 8002e74:	e010      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e76:	2308      	movs	r3, #8
 8002e78:	e00e      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e7a:	2307      	movs	r3, #7
 8002e7c:	e00c      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e7e:	2306      	movs	r3, #6
 8002e80:	e00a      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e82:	2305      	movs	r3, #5
 8002e84:	e008      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e86:	2304      	movs	r3, #4
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e004      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e002      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_GPIO_Init+0x240>
 8002e96:	2300      	movs	r3, #0
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f002 0203 	and.w	r2, r2, #3
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	4093      	lsls	r3, r2
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ea8:	4935      	ldr	r1, [pc, #212]	; (8002f80 <HAL_GPIO_Init+0x328>)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <HAL_GPIO_Init+0x354>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eda:	4a34      	ldr	r2, [pc, #208]	; (8002fac <HAL_GPIO_Init+0x354>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ee0:	4b32      	ldr	r3, [pc, #200]	; (8002fac <HAL_GPIO_Init+0x354>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f04:	4a29      	ldr	r2, [pc, #164]	; (8002fac <HAL_GPIO_Init+0x354>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0a:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_GPIO_Init+0x354>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f2e:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <HAL_GPIO_Init+0x354>)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_GPIO_Init+0x354>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f58:	4a14      	ldr	r2, [pc, #80]	; (8002fac <HAL_GPIO_Init+0x354>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	f67f ae86 	bls.w	8002c78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40020000 	.word	0x40020000
 8002f88:	40020400 	.word	0x40020400
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40020c00 	.word	0x40020c00
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40021400 	.word	0x40021400
 8002f9c:	40021800 	.word	0x40021800
 8002fa0:	40021c00 	.word	0x40021c00
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	40022400 	.word	0x40022400
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	6079      	str	r1, [r7, #4]
 8002fba:	2100      	movs	r1, #0
 8002fbc:	60f9      	str	r1, [r7, #12]
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc6:	4952      	ldr	r1, [pc, #328]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fc8:	6889      	ldr	r1, [r1, #8]
 8002fca:	f001 010c 	and.w	r1, r1, #12
 8002fce:	2908      	cmp	r1, #8
 8002fd0:	d00d      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x3e>
 8002fd2:	2908      	cmp	r1, #8
 8002fd4:	f200 8094 	bhi.w	8003100 <HAL_RCC_GetSysClockFreq+0x150>
 8002fd8:	2900      	cmp	r1, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x32>
 8002fdc:	2904      	cmp	r1, #4
 8002fde:	d003      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x38>
 8002fe0:	e08e      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCC_GetSysClockFreq+0x164>)
 8002fe4:	60bb      	str	r3, [r7, #8]
      break;
 8002fe6:	e08e      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe8:	4b4b      	ldr	r3, [pc, #300]	; (8003118 <HAL_RCC_GetSysClockFreq+0x168>)
 8002fea:	60bb      	str	r3, [r7, #8]
      break;
 8002fec:	e08b      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fee:	4948      	ldr	r1, [pc, #288]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ff0:	6849      	ldr	r1, [r1, #4]
 8002ff2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002ff6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ff8:	4945      	ldr	r1, [pc, #276]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ffa:	6849      	ldr	r1, [r1, #4]
 8002ffc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003000:	2900      	cmp	r1, #0
 8003002:	d024      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003004:	4942      	ldr	r1, [pc, #264]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8003006:	6849      	ldr	r1, [r1, #4]
 8003008:	0989      	lsrs	r1, r1, #6
 800300a:	4608      	mov	r0, r1
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003014:	f04f 0500 	mov.w	r5, #0
 8003018:	ea00 0204 	and.w	r2, r0, r4
 800301c:	ea01 0305 	and.w	r3, r1, r5
 8003020:	493d      	ldr	r1, [pc, #244]	; (8003118 <HAL_RCC_GetSysClockFreq+0x168>)
 8003022:	fb01 f003 	mul.w	r0, r1, r3
 8003026:	2100      	movs	r1, #0
 8003028:	fb01 f102 	mul.w	r1, r1, r2
 800302c:	1844      	adds	r4, r0, r1
 800302e:	493a      	ldr	r1, [pc, #232]	; (8003118 <HAL_RCC_GetSysClockFreq+0x168>)
 8003030:	fba2 0101 	umull	r0, r1, r2, r1
 8003034:	1863      	adds	r3, r4, r1
 8003036:	4619      	mov	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	461a      	mov	r2, r3
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	f7fd f94e 	bl	80002e0 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e04a      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	461a      	mov	r2, r3
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	ea02 0400 	and.w	r4, r2, r0
 8003066:	ea03 0501 	and.w	r5, r3, r1
 800306a:	4620      	mov	r0, r4
 800306c:	4629      	mov	r1, r5
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	014b      	lsls	r3, r1, #5
 8003078:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800307c:	0142      	lsls	r2, r0, #5
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	1b00      	subs	r0, r0, r4
 8003084:	eb61 0105 	sbc.w	r1, r1, r5
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	018b      	lsls	r3, r1, #6
 8003092:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003096:	0182      	lsls	r2, r0, #6
 8003098:	1a12      	subs	r2, r2, r0
 800309a:	eb63 0301 	sbc.w	r3, r3, r1
 800309e:	f04f 0000 	mov.w	r0, #0
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	00d9      	lsls	r1, r3, #3
 80030a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ac:	00d0      	lsls	r0, r2, #3
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	1912      	adds	r2, r2, r4
 80030b4:	eb45 0303 	adc.w	r3, r5, r3
 80030b8:	f04f 0000 	mov.w	r0, #0
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	0299      	lsls	r1, r3, #10
 80030c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030c6:	0290      	lsls	r0, r2, #10
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	f7fd f902 	bl	80002e0 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	60bb      	str	r3, [r7, #8]
      break;
 80030fe:	e002      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_RCC_GetSysClockFreq+0x164>)
 8003102:	60bb      	str	r3, [r7, #8]
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	68bb      	ldr	r3, [r7, #8]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bdb0      	pop	{r4, r5, r7, pc}
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400
 8003118:	017d7840 	.word	0x017d7840

0800311c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_RCC_GetHCLKFreq+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000000 	.word	0x20000000

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003138:	f7ff fff0 	bl	800311c <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	08007574 	.word	0x08007574

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003160:	f7ff ffdc 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0b5b      	lsrs	r3, r3, #13
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	08007574 	.word	0x08007574

08003184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e040      	b.n	8003218 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff fba6 	bl	80028f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f82c 	bl	8003220 <UART_SetConfig>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e022      	b.n	8003218 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa82 	bl	80036e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fb09 	bl	8003828 <UART_CheckIdleState>
 8003216:	4603      	mov	r3, r0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4ba7      	ldr	r3, [pc, #668]	; (80034e8 <UART_SetConfig+0x2c8>)
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	6979      	ldr	r1, [r7, #20]
 8003254:	430b      	orrs	r3, r1
 8003256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a95      	ldr	r2, [pc, #596]	; (80034ec <UART_SetConfig+0x2cc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d120      	bne.n	80032de <UART_SetConfig+0xbe>
 800329c:	4b94      	ldr	r3, [pc, #592]	; (80034f0 <UART_SetConfig+0x2d0>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d816      	bhi.n	80032d8 <UART_SetConfig+0xb8>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <UART_SetConfig+0x90>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032cd 	.word	0x080032cd
 80032b8:	080032c7 	.word	0x080032c7
 80032bc:	080032d3 	.word	0x080032d3
 80032c0:	2301      	movs	r3, #1
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e14f      	b.n	8003566 <UART_SetConfig+0x346>
 80032c6:	2302      	movs	r3, #2
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e14c      	b.n	8003566 <UART_SetConfig+0x346>
 80032cc:	2304      	movs	r3, #4
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e149      	b.n	8003566 <UART_SetConfig+0x346>
 80032d2:	2308      	movs	r3, #8
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e146      	b.n	8003566 <UART_SetConfig+0x346>
 80032d8:	2310      	movs	r3, #16
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e143      	b.n	8003566 <UART_SetConfig+0x346>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a84      	ldr	r2, [pc, #528]	; (80034f4 <UART_SetConfig+0x2d4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d132      	bne.n	800334e <UART_SetConfig+0x12e>
 80032e8:	4b81      	ldr	r3, [pc, #516]	; (80034f0 <UART_SetConfig+0x2d0>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d828      	bhi.n	8003348 <UART_SetConfig+0x128>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <UART_SetConfig+0xdc>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003349 	.word	0x08003349
 8003304:	08003349 	.word	0x08003349
 8003308:	08003349 	.word	0x08003349
 800330c:	0800333d 	.word	0x0800333d
 8003310:	08003349 	.word	0x08003349
 8003314:	08003349 	.word	0x08003349
 8003318:	08003349 	.word	0x08003349
 800331c:	08003337 	.word	0x08003337
 8003320:	08003349 	.word	0x08003349
 8003324:	08003349 	.word	0x08003349
 8003328:	08003349 	.word	0x08003349
 800332c:	08003343 	.word	0x08003343
 8003330:	2300      	movs	r3, #0
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e117      	b.n	8003566 <UART_SetConfig+0x346>
 8003336:	2302      	movs	r3, #2
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e114      	b.n	8003566 <UART_SetConfig+0x346>
 800333c:	2304      	movs	r3, #4
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e111      	b.n	8003566 <UART_SetConfig+0x346>
 8003342:	2308      	movs	r3, #8
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e10e      	b.n	8003566 <UART_SetConfig+0x346>
 8003348:	2310      	movs	r3, #16
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e10b      	b.n	8003566 <UART_SetConfig+0x346>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a69      	ldr	r2, [pc, #420]	; (80034f8 <UART_SetConfig+0x2d8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d120      	bne.n	800339a <UART_SetConfig+0x17a>
 8003358:	4b65      	ldr	r3, [pc, #404]	; (80034f0 <UART_SetConfig+0x2d0>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003362:	2b30      	cmp	r3, #48	; 0x30
 8003364:	d013      	beq.n	800338e <UART_SetConfig+0x16e>
 8003366:	2b30      	cmp	r3, #48	; 0x30
 8003368:	d814      	bhi.n	8003394 <UART_SetConfig+0x174>
 800336a:	2b20      	cmp	r3, #32
 800336c:	d009      	beq.n	8003382 <UART_SetConfig+0x162>
 800336e:	2b20      	cmp	r3, #32
 8003370:	d810      	bhi.n	8003394 <UART_SetConfig+0x174>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <UART_SetConfig+0x15c>
 8003376:	2b10      	cmp	r3, #16
 8003378:	d006      	beq.n	8003388 <UART_SetConfig+0x168>
 800337a:	e00b      	b.n	8003394 <UART_SetConfig+0x174>
 800337c:	2300      	movs	r3, #0
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e0f1      	b.n	8003566 <UART_SetConfig+0x346>
 8003382:	2302      	movs	r3, #2
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e0ee      	b.n	8003566 <UART_SetConfig+0x346>
 8003388:	2304      	movs	r3, #4
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e0eb      	b.n	8003566 <UART_SetConfig+0x346>
 800338e:	2308      	movs	r3, #8
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e0e8      	b.n	8003566 <UART_SetConfig+0x346>
 8003394:	2310      	movs	r3, #16
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e0e5      	b.n	8003566 <UART_SetConfig+0x346>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a57      	ldr	r2, [pc, #348]	; (80034fc <UART_SetConfig+0x2dc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d120      	bne.n	80033e6 <UART_SetConfig+0x1c6>
 80033a4:	4b52      	ldr	r3, [pc, #328]	; (80034f0 <UART_SetConfig+0x2d0>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033ae:	2bc0      	cmp	r3, #192	; 0xc0
 80033b0:	d013      	beq.n	80033da <UART_SetConfig+0x1ba>
 80033b2:	2bc0      	cmp	r3, #192	; 0xc0
 80033b4:	d814      	bhi.n	80033e0 <UART_SetConfig+0x1c0>
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d009      	beq.n	80033ce <UART_SetConfig+0x1ae>
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d810      	bhi.n	80033e0 <UART_SetConfig+0x1c0>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <UART_SetConfig+0x1a8>
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d006      	beq.n	80033d4 <UART_SetConfig+0x1b4>
 80033c6:	e00b      	b.n	80033e0 <UART_SetConfig+0x1c0>
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e0cb      	b.n	8003566 <UART_SetConfig+0x346>
 80033ce:	2302      	movs	r3, #2
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e0c8      	b.n	8003566 <UART_SetConfig+0x346>
 80033d4:	2304      	movs	r3, #4
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e0c5      	b.n	8003566 <UART_SetConfig+0x346>
 80033da:	2308      	movs	r3, #8
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e0c2      	b.n	8003566 <UART_SetConfig+0x346>
 80033e0:	2310      	movs	r3, #16
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e0bf      	b.n	8003566 <UART_SetConfig+0x346>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a45      	ldr	r2, [pc, #276]	; (8003500 <UART_SetConfig+0x2e0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d125      	bne.n	800343c <UART_SetConfig+0x21c>
 80033f0:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <UART_SetConfig+0x2d0>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fe:	d017      	beq.n	8003430 <UART_SetConfig+0x210>
 8003400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003404:	d817      	bhi.n	8003436 <UART_SetConfig+0x216>
 8003406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800340a:	d00b      	beq.n	8003424 <UART_SetConfig+0x204>
 800340c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003410:	d811      	bhi.n	8003436 <UART_SetConfig+0x216>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <UART_SetConfig+0x1fe>
 8003416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341a:	d006      	beq.n	800342a <UART_SetConfig+0x20a>
 800341c:	e00b      	b.n	8003436 <UART_SetConfig+0x216>
 800341e:	2300      	movs	r3, #0
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e0a0      	b.n	8003566 <UART_SetConfig+0x346>
 8003424:	2302      	movs	r3, #2
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e09d      	b.n	8003566 <UART_SetConfig+0x346>
 800342a:	2304      	movs	r3, #4
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e09a      	b.n	8003566 <UART_SetConfig+0x346>
 8003430:	2308      	movs	r3, #8
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e097      	b.n	8003566 <UART_SetConfig+0x346>
 8003436:	2310      	movs	r3, #16
 8003438:	77fb      	strb	r3, [r7, #31]
 800343a:	e094      	b.n	8003566 <UART_SetConfig+0x346>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a30      	ldr	r2, [pc, #192]	; (8003504 <UART_SetConfig+0x2e4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d125      	bne.n	8003492 <UART_SetConfig+0x272>
 8003446:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <UART_SetConfig+0x2d0>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003454:	d017      	beq.n	8003486 <UART_SetConfig+0x266>
 8003456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800345a:	d817      	bhi.n	800348c <UART_SetConfig+0x26c>
 800345c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003460:	d00b      	beq.n	800347a <UART_SetConfig+0x25a>
 8003462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003466:	d811      	bhi.n	800348c <UART_SetConfig+0x26c>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <UART_SetConfig+0x254>
 800346c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003470:	d006      	beq.n	8003480 <UART_SetConfig+0x260>
 8003472:	e00b      	b.n	800348c <UART_SetConfig+0x26c>
 8003474:	2301      	movs	r3, #1
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e075      	b.n	8003566 <UART_SetConfig+0x346>
 800347a:	2302      	movs	r3, #2
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e072      	b.n	8003566 <UART_SetConfig+0x346>
 8003480:	2304      	movs	r3, #4
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e06f      	b.n	8003566 <UART_SetConfig+0x346>
 8003486:	2308      	movs	r3, #8
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e06c      	b.n	8003566 <UART_SetConfig+0x346>
 800348c:	2310      	movs	r3, #16
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e069      	b.n	8003566 <UART_SetConfig+0x346>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <UART_SetConfig+0x2e8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d137      	bne.n	800350c <UART_SetConfig+0x2ec>
 800349c:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <UART_SetConfig+0x2d0>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034aa:	d017      	beq.n	80034dc <UART_SetConfig+0x2bc>
 80034ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b0:	d817      	bhi.n	80034e2 <UART_SetConfig+0x2c2>
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b6:	d00b      	beq.n	80034d0 <UART_SetConfig+0x2b0>
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034bc:	d811      	bhi.n	80034e2 <UART_SetConfig+0x2c2>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <UART_SetConfig+0x2aa>
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d006      	beq.n	80034d6 <UART_SetConfig+0x2b6>
 80034c8:	e00b      	b.n	80034e2 <UART_SetConfig+0x2c2>
 80034ca:	2300      	movs	r3, #0
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e04a      	b.n	8003566 <UART_SetConfig+0x346>
 80034d0:	2302      	movs	r3, #2
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e047      	b.n	8003566 <UART_SetConfig+0x346>
 80034d6:	2304      	movs	r3, #4
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e044      	b.n	8003566 <UART_SetConfig+0x346>
 80034dc:	2308      	movs	r3, #8
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e041      	b.n	8003566 <UART_SetConfig+0x346>
 80034e2:	2310      	movs	r3, #16
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e03e      	b.n	8003566 <UART_SetConfig+0x346>
 80034e8:	efff69f3 	.word	0xefff69f3
 80034ec:	40011000 	.word	0x40011000
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40004400 	.word	0x40004400
 80034f8:	40004800 	.word	0x40004800
 80034fc:	40004c00 	.word	0x40004c00
 8003500:	40005000 	.word	0x40005000
 8003504:	40011400 	.word	0x40011400
 8003508:	40007800 	.word	0x40007800
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a71      	ldr	r2, [pc, #452]	; (80036d8 <UART_SetConfig+0x4b8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d125      	bne.n	8003562 <UART_SetConfig+0x342>
 8003516:	4b71      	ldr	r3, [pc, #452]	; (80036dc <UART_SetConfig+0x4bc>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003520:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003524:	d017      	beq.n	8003556 <UART_SetConfig+0x336>
 8003526:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800352a:	d817      	bhi.n	800355c <UART_SetConfig+0x33c>
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	d00b      	beq.n	800354a <UART_SetConfig+0x32a>
 8003532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003536:	d811      	bhi.n	800355c <UART_SetConfig+0x33c>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <UART_SetConfig+0x324>
 800353c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003540:	d006      	beq.n	8003550 <UART_SetConfig+0x330>
 8003542:	e00b      	b.n	800355c <UART_SetConfig+0x33c>
 8003544:	2300      	movs	r3, #0
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e00d      	b.n	8003566 <UART_SetConfig+0x346>
 800354a:	2302      	movs	r3, #2
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e00a      	b.n	8003566 <UART_SetConfig+0x346>
 8003550:	2304      	movs	r3, #4
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e007      	b.n	8003566 <UART_SetConfig+0x346>
 8003556:	2308      	movs	r3, #8
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e004      	b.n	8003566 <UART_SetConfig+0x346>
 800355c:	2310      	movs	r3, #16
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e001      	b.n	8003566 <UART_SetConfig+0x346>
 8003562:	2310      	movs	r3, #16
 8003564:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356e:	d15b      	bne.n	8003628 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003570:	7ffb      	ldrb	r3, [r7, #31]
 8003572:	2b08      	cmp	r3, #8
 8003574:	d827      	bhi.n	80035c6 <UART_SetConfig+0x3a6>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <UART_SetConfig+0x35c>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035a1 	.word	0x080035a1
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035b1 	.word	0x080035b1
 8003588:	080035c7 	.word	0x080035c7
 800358c:	080035b7 	.word	0x080035b7
 8003590:	080035c7 	.word	0x080035c7
 8003594:	080035c7 	.word	0x080035c7
 8003598:	080035c7 	.word	0x080035c7
 800359c:	080035bf 	.word	0x080035bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a0:	f7ff fdc8 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 80035a4:	61b8      	str	r0, [r7, #24]
        break;
 80035a6:	e013      	b.n	80035d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a8:	f7ff fdd8 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80035ac:	61b8      	str	r0, [r7, #24]
        break;
 80035ae:	e00f      	b.n	80035d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b0:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <UART_SetConfig+0x4c0>)
 80035b2:	61bb      	str	r3, [r7, #24]
        break;
 80035b4:	e00c      	b.n	80035d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b6:	f7ff fcfb 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 80035ba:	61b8      	str	r0, [r7, #24]
        break;
 80035bc:	e008      	b.n	80035d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c2:	61bb      	str	r3, [r7, #24]
        break;
 80035c4:	e004      	b.n	80035d0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	77bb      	strb	r3, [r7, #30]
        break;
 80035ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d074      	beq.n	80036c0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	005a      	lsls	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	441a      	add	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b0f      	cmp	r3, #15
 80035f2:	d916      	bls.n	8003622 <UART_SetConfig+0x402>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fa:	d212      	bcs.n	8003622 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f023 030f 	bic.w	r3, r3, #15
 8003604:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	b29a      	uxth	r2, r3
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	4313      	orrs	r3, r2
 8003616:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	89fa      	ldrh	r2, [r7, #14]
 800361e:	60da      	str	r2, [r3, #12]
 8003620:	e04e      	b.n	80036c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	77bb      	strb	r3, [r7, #30]
 8003626:	e04b      	b.n	80036c0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003628:	7ffb      	ldrb	r3, [r7, #31]
 800362a:	2b08      	cmp	r3, #8
 800362c:	d827      	bhi.n	800367e <UART_SetConfig+0x45e>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <UART_SetConfig+0x414>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003659 	.word	0x08003659
 8003638:	08003661 	.word	0x08003661
 800363c:	08003669 	.word	0x08003669
 8003640:	0800367f 	.word	0x0800367f
 8003644:	0800366f 	.word	0x0800366f
 8003648:	0800367f 	.word	0x0800367f
 800364c:	0800367f 	.word	0x0800367f
 8003650:	0800367f 	.word	0x0800367f
 8003654:	08003677 	.word	0x08003677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003658:	f7ff fd6c 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 800365c:	61b8      	str	r0, [r7, #24]
        break;
 800365e:	e013      	b.n	8003688 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003660:	f7ff fd7c 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8003664:	61b8      	str	r0, [r7, #24]
        break;
 8003666:	e00f      	b.n	8003688 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <UART_SetConfig+0x4c0>)
 800366a:	61bb      	str	r3, [r7, #24]
        break;
 800366c:	e00c      	b.n	8003688 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366e:	f7ff fc9f 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8003672:	61b8      	str	r0, [r7, #24]
        break;
 8003674:	e008      	b.n	8003688 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367a:	61bb      	str	r3, [r7, #24]
        break;
 800367c:	e004      	b.n	8003688 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	77bb      	strb	r3, [r7, #30]
        break;
 8003686:	bf00      	nop
    }

    if (pclk != 0U)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d018      	beq.n	80036c0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	085a      	lsrs	r2, r3, #1
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	441a      	add	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	d908      	bls.n	80036bc <UART_SetConfig+0x49c>
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d204      	bcs.n	80036bc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	e001      	b.n	80036c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40007c00 	.word	0x40007c00
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00f42400 	.word	0x00f42400

080036e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01a      	beq.n	80037fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e2:	d10a      	bne.n	80037fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  }
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af02      	add	r7, sp, #8
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003838:	f7ff f91c 	bl	8002a74 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b08      	cmp	r3, #8
 800384a:	d10e      	bne.n	800386a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800384c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f82d 	bl	80038ba <UART_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e023      	b.n	80038b2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b04      	cmp	r3, #4
 8003876:	d10e      	bne.n	8003896 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f817 	bl	80038ba <UART_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e00d      	b.n	80038b2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	e05e      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d05a      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7ff f8ce 	bl	8002a74 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <UART_WaitOnFlagUntilTimeout+0x30>
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11b      	bne.n	8003922 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e043      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d02c      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800393a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800393e:	d124      	bne.n	800398a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003948:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003958:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e00f      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d091      	beq.n	80038cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <LL_GPIO_SetPinMode>:
{
 80039b2:	b480      	push	{r7}
 80039b4:	b089      	sub	sp, #36	; 0x24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	2103      	movs	r1, #3
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	401a      	ands	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	61bb      	str	r3, [r7, #24]
  return result;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	431a      	orrs	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	601a      	str	r2, [r3, #0]
}
 8003a04:	bf00      	nop
 8003a06:	3724      	adds	r7, #36	; 0x24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <LL_GPIO_SetPinOutputType>:
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	401a      	ands	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	605a      	str	r2, [r3, #4]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_GPIO_SetPinSpeed>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	613b      	str	r3, [r7, #16]
  return result;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2103      	movs	r1, #3
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	401a      	ands	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	61bb      	str	r3, [r7, #24]
  return result;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	609a      	str	r2, [r3, #8]
}
 8003a92:	bf00      	nop
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_GPIO_SetPinPull>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b089      	sub	sp, #36	; 0x24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	613b      	str	r3, [r7, #16]
  return result;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	2103      	movs	r1, #3
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	401a      	ands	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	61bb      	str	r3, [r7, #24]
  return result;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	fab3 f383 	clz	r3, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	60da      	str	r2, [r3, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3724      	adds	r7, #36	; 0x24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_GPIO_SetAFPin_0_7>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	b089      	sub	sp, #36	; 0x24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	613b      	str	r3, [r7, #16]
  return result;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	210f      	movs	r1, #15
 8003b24:	fa01 f303 	lsl.w	r3, r1, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	61bb      	str	r3, [r7, #24]
  return result;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	3724      	adds	r7, #36	; 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_GPIO_SetAFPin_8_15>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b089      	sub	sp, #36	; 0x24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	613b      	str	r3, [r7, #16]
  return result;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	210f      	movs	r1, #15
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	61bb      	str	r3, [r7, #24]
  return result;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	fab3 f383 	clz	r3, r3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003bb0:	bf00      	nop
 8003bb2:	3724      	adds	r7, #36	; 0x24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	613b      	str	r3, [r7, #16]
  return result;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003be6:	e051      	b.n	8003c8c <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2101      	movs	r1, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d043      	beq.n	8003c86 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d003      	beq.n	8003c0e <LL_GPIO_Init+0x52>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d10e      	bne.n	8003c2c <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	461a      	mov	r2, r3
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff ff12 	bl	8003a40 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	6819      	ldr	r1, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	461a      	mov	r2, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fef2 	bl	8003a10 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	461a      	mov	r2, r3
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff32 	bl	8003a9e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d11a      	bne.n	8003c78 <LL_GPIO_Init+0xbc>
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	60bb      	str	r3, [r7, #8]
  return result;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b07      	cmp	r3, #7
 8003c58:	d807      	bhi.n	8003c6a <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	69b9      	ldr	r1, [r7, #24]
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ff4a 	bl	8003afc <LL_GPIO_SetAFPin_0_7>
 8003c68:	e006      	b.n	8003c78 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	69b9      	ldr	r1, [r7, #24]
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ff71 	bl	8003b5a <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fe96 	bl	80039b2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1a6      	bne.n	8003be8 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <LL_I2C_Enable>:
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	601a      	str	r2, [r3, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_I2C_Disable>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 0201 	bic.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	601a      	str	r2, [r3, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_I2C_ConfigFilters>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	0219      	lsls	r1, r3, #8
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <LL_I2C_SetOwnAddress1>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <LL_I2C_SetOwnAddress1+0x2c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	fffff800 	.word	0xfffff800

08003d44 <LL_I2C_EnableOwnAddress1>:
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_I2C_DisableOwnAddress1>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_I2C_SetTiming>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	611a      	str	r2, [r3, #16]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_I2C_SetMode>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	601a      	str	r2, [r3, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_I2C_AcknowledgeNextData>:
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	605a      	str	r2, [r3, #4]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ff64 	bl	8003cc4 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6899      	ldr	r1, [r3, #8]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ff6c 	bl	8003ce4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ffb6 	bl	8003d84 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff43 	bl	8003ca4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ffa0 	bl	8003d64 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6919      	ldr	r1, [r3, #16]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ff70 	bl	8003d14 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff81 	bl	8003d44 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ffa9 	bl	8003da0 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ffb6 	bl	8003dc6 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <LL_RCC_HSI_IsReady>:
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <LL_RCC_HSI_IsReady+0x20>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40023800 	.word	0x40023800

08003e88 <LL_RCC_LSE_IsReady>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <LL_RCC_LSE_IsReady+0x20>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40023800 	.word	0x40023800

08003eac <LL_RCC_GetSysClkSource>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <LL_RCC_GetSysClkSource+0x18>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800

08003ec8 <LL_RCC_GetAHBPrescaler>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <LL_RCC_GetAHBPrescaler+0x18>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800

08003ee4 <LL_RCC_GetAPB1Prescaler>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <LL_RCC_GetAPB1Prescaler+0x18>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800

08003f00 <LL_RCC_GetAPB2Prescaler>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800

08003f1c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <LL_RCC_GetUSARTClockSource+0x24>)
 8003f26:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	4313      	orrs	r3, r2
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40023800 	.word	0x40023800

08003f44 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <LL_RCC_GetUARTClockSource+0x24>)
 8003f4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	401a      	ands	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	041b      	lsls	r3, r3, #16
 8003f5a:	4313      	orrs	r3, r2
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40023800 	.word	0x40023800

08003f6c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <LL_RCC_PLL_GetMainSource+0x18>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800

08003f88 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <LL_RCC_PLL_GetN+0x18>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	099b      	lsrs	r3, r3, #6
 8003f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	40023800 	.word	0x40023800

08003fa4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <LL_RCC_PLL_GetP+0x18>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <LL_RCC_PLL_GetDivider+0x18>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800

08003fdc <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d133      	bne.n	8004056 <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ff94 	bl	8003f1c <LL_RCC_GetUSARTClockSource>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8003ffa:	d016      	beq.n	800402a <LL_RCC_GetUSARTClockFreq+0x4e>
 8003ffc:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8004000:	d81d      	bhi.n	800403e <LL_RCC_GetUSARTClockFreq+0x62>
 8004002:	4a71      	ldr	r2, [pc, #452]	; (80041c8 <LL_RCC_GetUSARTClockFreq+0x1ec>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <LL_RCC_GetUSARTClockFreq+0x34>
 8004008:	4a70      	ldr	r2, [pc, #448]	; (80041cc <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <LL_RCC_GetUSARTClockFreq+0x3c>
 800400e:	e016      	b.n	800403e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004010:	f000 f9f6 	bl	8004400 <RCC_GetSystemClockFreq>
 8004014:	60f8      	str	r0, [r7, #12]
        break;
 8004016:	e0d1      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004018:	f7ff ff24 	bl	8003e64 <LL_RCC_HSI_IsReady>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80bb 	beq.w	800419a <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 8004024:	4b6a      	ldr	r3, [pc, #424]	; (80041d0 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8004026:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004028:	e0b7      	b.n	800419a <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800402a:	f7ff ff2d 	bl	8003e88 <LL_RCC_LSE_IsReady>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80b4 	beq.w	800419e <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 8004036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800403c:	e0af      	b.n	800419e <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800403e:	f000 f9df 	bl	8004400 <RCC_GetSystemClockFreq>
 8004042:	4603      	mov	r3, r0
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fa03 	bl	8004450 <RCC_GetHCLKClockFreq>
 800404a:	4603      	mov	r3, r0
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fa29 	bl	80044a4 <RCC_GetPCLK2ClockFreq>
 8004052:	60f8      	str	r0, [r7, #12]
        break;
 8004054:	e0b2      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b0c      	cmp	r3, #12
 800405a:	d133      	bne.n	80040c4 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ff5d 	bl	8003f1c <LL_RCC_GetUSARTClockSource>
 8004062:	4603      	mov	r3, r0
 8004064:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8004068:	d016      	beq.n	8004098 <LL_RCC_GetUSARTClockFreq+0xbc>
 800406a:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800406e:	d81d      	bhi.n	80040ac <LL_RCC_GetUSARTClockFreq+0xd0>
 8004070:	4a58      	ldr	r2, [pc, #352]	; (80041d4 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <LL_RCC_GetUSARTClockFreq+0xa2>
 8004076:	4a58      	ldr	r2, [pc, #352]	; (80041d8 <LL_RCC_GetUSARTClockFreq+0x1fc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <LL_RCC_GetUSARTClockFreq+0xaa>
 800407c:	e016      	b.n	80040ac <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800407e:	f000 f9bf 	bl	8004400 <RCC_GetSystemClockFreq>
 8004082:	60f8      	str	r0, [r7, #12]
        break;
 8004084:	e09a      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004086:	f7ff feed 	bl	8003e64 <LL_RCC_HSI_IsReady>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8088 	beq.w	80041a2 <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 8004092:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8004094:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004096:	e084      	b.n	80041a2 <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004098:	f7ff fef6 	bl	8003e88 <LL_RCC_LSE_IsReady>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 8081 	beq.w	80041a6 <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 80040a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80040aa:	e07c      	b.n	80041a6 <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80040ac:	f000 f9a8 	bl	8004400 <RCC_GetSystemClockFreq>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f9cc 	bl	8004450 <RCC_GetHCLKClockFreq>
 80040b8:	4603      	mov	r3, r0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f9de 	bl	800447c <RCC_GetPCLK1ClockFreq>
 80040c0:	60f8      	str	r0, [r7, #12]
        break;
 80040c2:	e07b      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ca:	d131      	bne.n	8004130 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ff25 	bl	8003f1c <LL_RCC_GetUSARTClockSource>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f1b3 2f0c 	cmp.w	r3, #201329664	; 0xc000c00
 80040d8:	d015      	beq.n	8004106 <LL_RCC_GetUSARTClockFreq+0x12a>
 80040da:	f1b3 2f0c 	cmp.w	r3, #201329664	; 0xc000c00
 80040de:	d81b      	bhi.n	8004118 <LL_RCC_GetUSARTClockFreq+0x13c>
 80040e0:	4a3e      	ldr	r2, [pc, #248]	; (80041dc <LL_RCC_GetUSARTClockFreq+0x200>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <LL_RCC_GetUSARTClockFreq+0x112>
 80040e6:	4a3e      	ldr	r2, [pc, #248]	; (80041e0 <LL_RCC_GetUSARTClockFreq+0x204>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <LL_RCC_GetUSARTClockFreq+0x11a>
 80040ec:	e014      	b.n	8004118 <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80040ee:	f000 f987 	bl	8004400 <RCC_GetSystemClockFreq>
 80040f2:	60f8      	str	r0, [r7, #12]
        break;
 80040f4:	e062      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80040f6:	f7ff feb5 	bl	8003e64 <LL_RCC_HSI_IsReady>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d054      	beq.n	80041aa <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 8004100:	4b33      	ldr	r3, [pc, #204]	; (80041d0 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8004102:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004104:	e051      	b.n	80041aa <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004106:	f7ff febf 	bl	8003e88 <LL_RCC_LSE_IsReady>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d04e      	beq.n	80041ae <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 8004110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004114:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004116:	e04a      	b.n	80041ae <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004118:	f000 f972 	bl	8004400 <RCC_GetSystemClockFreq>
 800411c:	4603      	mov	r3, r0
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f996 	bl	8004450 <RCC_GetHCLKClockFreq>
 8004124:	4603      	mov	r3, r0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f9bc 	bl	80044a4 <RCC_GetPCLK2ClockFreq>
 800412c:	60f8      	str	r0, [r7, #12]
        break;
 800412e:	e045      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b30      	cmp	r3, #48	; 0x30
 8004134:	d13d      	bne.n	80041b2 <LL_RCC_GetUSARTClockFreq+0x1d6>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fef0 	bl	8003f1c <LL_RCC_GetUSARTClockSource>
 800413c:	4603      	mov	r3, r0
 800413e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004142:	d015      	beq.n	8004170 <LL_RCC_GetUSARTClockFreq+0x194>
 8004144:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004148:	d81b      	bhi.n	8004182 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800414a:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <LL_RCC_GetUSARTClockFreq+0x208>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <LL_RCC_GetUSARTClockFreq+0x17c>
 8004150:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <LL_RCC_GetUSARTClockFreq+0x20c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <LL_RCC_GetUSARTClockFreq+0x184>
 8004156:	e014      	b.n	8004182 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8004158:	f000 f952 	bl	8004400 <RCC_GetSystemClockFreq>
 800415c:	60f8      	str	r0, [r7, #12]
          break;
 800415e:	e02d      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8004160:	f7ff fe80 	bl	8003e64 <LL_RCC_HSI_IsReady>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d025      	beq.n	80041b6 <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = HSI_VALUE;
 800416a:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 800416c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800416e:	e022      	b.n	80041b6 <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8004170:	f7ff fe8a 	bl	8003e88 <LL_RCC_LSE_IsReady>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01f      	beq.n	80041ba <LL_RCC_GetUSARTClockFreq+0x1de>
          {
            usart_frequency = LSE_VALUE;
 800417a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800417e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004180:	e01b      	b.n	80041ba <LL_RCC_GetUSARTClockFreq+0x1de>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004182:	f000 f93d 	bl	8004400 <RCC_GetSystemClockFreq>
 8004186:	4603      	mov	r3, r0
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f961 	bl	8004450 <RCC_GetHCLKClockFreq>
 800418e:	4603      	mov	r3, r0
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f973 	bl	800447c <RCC_GetPCLK1ClockFreq>
 8004196:	60f8      	str	r0, [r7, #12]
          break;
 8004198:	e010      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 800419a:	bf00      	nop
 800419c:	e00e      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 800419e:	bf00      	nop
 80041a0:	e00c      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 80041a2:	bf00      	nop
 80041a4:	e00a      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 80041a6:	bf00      	nop
 80041a8:	e008      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 80041aa:	bf00      	nop
 80041ac:	e006      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 80041ae:	bf00      	nop
 80041b0:	e004      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
      }
    }
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
          break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <LL_RCC_GetUSARTClockFreq+0x1e0>
          break;
 80041ba:	bf00      	nop
  }
  return usart_frequency;
 80041bc:	68fb      	ldr	r3, [r7, #12]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	00030001 	.word	0x00030001
 80041cc:	00030002 	.word	0x00030002
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	000c0004 	.word	0x000c0004
 80041d8:	000c0008 	.word	0x000c0008
 80041dc:	0c000400 	.word	0x0c000400
 80041e0:	0c000800 	.word	0x0c000800
 80041e4:	00300010 	.word	0x00300010
 80041e8:	00300020 	.word	0x00300020

080041ec <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2bc0      	cmp	r3, #192	; 0xc0
 80041fc:	d133      	bne.n	8004266 <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fea0 	bl	8003f44 <LL_RCC_GetUARTClockSource>
 8004204:	4603      	mov	r3, r0
 8004206:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800420a:	d016      	beq.n	800423a <LL_RCC_GetUARTClockFreq+0x4e>
 800420c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004210:	d81d      	bhi.n	800424e <LL_RCC_GetUARTClockFreq+0x62>
 8004212:	4a72      	ldr	r2, [pc, #456]	; (80043dc <LL_RCC_GetUARTClockFreq+0x1f0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <LL_RCC_GetUARTClockFreq+0x34>
 8004218:	4a71      	ldr	r2, [pc, #452]	; (80043e0 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <LL_RCC_GetUARTClockFreq+0x3c>
 800421e:	e016      	b.n	800424e <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004220:	f000 f8ee 	bl	8004400 <RCC_GetSystemClockFreq>
 8004224:	60f8      	str	r0, [r7, #12]
        break;
 8004226:	e0d3      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004228:	f7ff fe1c 	bl	8003e64 <LL_RCC_HSI_IsReady>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80bd 	beq.w	80043ae <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 8004234:	4b6b      	ldr	r3, [pc, #428]	; (80043e4 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8004236:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004238:	e0b9      	b.n	80043ae <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800423a:	f7ff fe25 	bl	8003e88 <LL_RCC_LSE_IsReady>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80b6 	beq.w	80043b2 <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 8004246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800424c:	e0b1      	b.n	80043b2 <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800424e:	f000 f8d7 	bl	8004400 <RCC_GetSystemClockFreq>
 8004252:	4603      	mov	r3, r0
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f8fb 	bl	8004450 <RCC_GetHCLKClockFreq>
 800425a:	4603      	mov	r3, r0
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f90d 	bl	800447c <RCC_GetPCLK1ClockFreq>
 8004262:	60f8      	str	r0, [r7, #12]
        break;
 8004264:	e0b4      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426c:	d133      	bne.n	80042d6 <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fe68 	bl	8003f44 <LL_RCC_GetUARTClockSource>
 8004274:	4603      	mov	r3, r0
 8004276:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800427a:	d016      	beq.n	80042aa <LL_RCC_GetUARTClockFreq+0xbe>
 800427c:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004280:	d81d      	bhi.n	80042be <LL_RCC_GetUARTClockFreq+0xd2>
 8004282:	4a59      	ldr	r2, [pc, #356]	; (80043e8 <LL_RCC_GetUARTClockFreq+0x1fc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <LL_RCC_GetUARTClockFreq+0xa4>
 8004288:	4a58      	ldr	r2, [pc, #352]	; (80043ec <LL_RCC_GetUARTClockFreq+0x200>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <LL_RCC_GetUARTClockFreq+0xac>
 800428e:	e016      	b.n	80042be <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004290:	f000 f8b6 	bl	8004400 <RCC_GetSystemClockFreq>
 8004294:	60f8      	str	r0, [r7, #12]
        break;
 8004296:	e09b      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004298:	f7ff fde4 	bl	8003e64 <LL_RCC_HSI_IsReady>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8089 	beq.w	80043b6 <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 80042a4:	4b4f      	ldr	r3, [pc, #316]	; (80043e4 <LL_RCC_GetUARTClockFreq+0x1f8>)
 80042a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80042a8:	e085      	b.n	80043b6 <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80042aa:	f7ff fded 	bl	8003e88 <LL_RCC_LSE_IsReady>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8082 	beq.w	80043ba <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 80042b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80042bc:	e07d      	b.n	80043ba <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80042be:	f000 f89f 	bl	8004400 <RCC_GetSystemClockFreq>
 80042c2:	4603      	mov	r3, r0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f8c3 	bl	8004450 <RCC_GetHCLKClockFreq>
 80042ca:	4603      	mov	r3, r0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f8d5 	bl	800447c <RCC_GetPCLK1ClockFreq>
 80042d2:	60f8      	str	r0, [r7, #12]
        break;
 80042d4:	e07c      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042dc:	d131      	bne.n	8004342 <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fe30 	bl	8003f44 <LL_RCC_GetUARTClockSource>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f1b3 2f30 	cmp.w	r3, #805318656	; 0x30003000
 80042ea:	d015      	beq.n	8004318 <LL_RCC_GetUARTClockFreq+0x12c>
 80042ec:	f1b3 2f30 	cmp.w	r3, #805318656	; 0x30003000
 80042f0:	d81b      	bhi.n	800432a <LL_RCC_GetUARTClockFreq+0x13e>
 80042f2:	4a3f      	ldr	r2, [pc, #252]	; (80043f0 <LL_RCC_GetUARTClockFreq+0x204>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <LL_RCC_GetUARTClockFreq+0x114>
 80042f8:	4a3e      	ldr	r2, [pc, #248]	; (80043f4 <LL_RCC_GetUARTClockFreq+0x208>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <LL_RCC_GetUARTClockFreq+0x11c>
 80042fe:	e014      	b.n	800432a <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004300:	f000 f87e 	bl	8004400 <RCC_GetSystemClockFreq>
 8004304:	60f8      	str	r0, [r7, #12]
        break;
 8004306:	e063      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004308:	f7ff fdac 	bl	8003e64 <LL_RCC_HSI_IsReady>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d055      	beq.n	80043be <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 8004312:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8004314:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004316:	e052      	b.n	80043be <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004318:	f7ff fdb6 	bl	8003e88 <LL_RCC_LSE_IsReady>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d04f      	beq.n	80043c2 <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004326:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004328:	e04b      	b.n	80043c2 <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800432a:	f000 f869 	bl	8004400 <RCC_GetSystemClockFreq>
 800432e:	4603      	mov	r3, r0
 8004330:	4618      	mov	r0, r3
 8004332:	f000 f88d 	bl	8004450 <RCC_GetHCLKClockFreq>
 8004336:	4603      	mov	r3, r0
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f89f 	bl	800447c <RCC_GetPCLK1ClockFreq>
 800433e:	60f8      	str	r0, [r7, #12]
        break;
 8004340:	e046      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004348:	d13d      	bne.n	80043c6 <LL_RCC_GetUARTClockFreq+0x1da>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff fdfa 	bl	8003f44 <LL_RCC_GetUARTClockSource>
 8004350:	4603      	mov	r3, r0
 8004352:	f1b3 2fc0 	cmp.w	r3, #3221274624	; 0xc000c000
 8004356:	d015      	beq.n	8004384 <LL_RCC_GetUARTClockFreq+0x198>
 8004358:	f1b3 2fc0 	cmp.w	r3, #3221274624	; 0xc000c000
 800435c:	d81b      	bhi.n	8004396 <LL_RCC_GetUARTClockFreq+0x1aa>
 800435e:	4a26      	ldr	r2, [pc, #152]	; (80043f8 <LL_RCC_GetUARTClockFreq+0x20c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <LL_RCC_GetUARTClockFreq+0x180>
 8004364:	4a25      	ldr	r2, [pc, #148]	; (80043fc <LL_RCC_GetUARTClockFreq+0x210>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <LL_RCC_GetUARTClockFreq+0x188>
 800436a:	e014      	b.n	8004396 <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 800436c:	f000 f848 	bl	8004400 <RCC_GetSystemClockFreq>
 8004370:	60f8      	str	r0, [r7, #12]
          break;
 8004372:	e02d      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8004374:	f7ff fd76 	bl	8003e64 <LL_RCC_HSI_IsReady>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d025      	beq.n	80043ca <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = HSI_VALUE;
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8004380:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004382:	e022      	b.n	80043ca <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8004384:	f7ff fd80 	bl	8003e88 <LL_RCC_LSE_IsReady>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01f      	beq.n	80043ce <LL_RCC_GetUARTClockFreq+0x1e2>
          {
            uart_frequency = LSE_VALUE;
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004392:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004394:	e01b      	b.n	80043ce <LL_RCC_GetUARTClockFreq+0x1e2>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004396:	f000 f833 	bl	8004400 <RCC_GetSystemClockFreq>
 800439a:	4603      	mov	r3, r0
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f857 	bl	8004450 <RCC_GetHCLKClockFreq>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f869 	bl	800447c <RCC_GetPCLK1ClockFreq>
 80043aa:	60f8      	str	r0, [r7, #12]
          break;
 80043ac:	e010      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80043ae:	bf00      	nop
 80043b0:	e00e      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80043b2:	bf00      	nop
 80043b4:	e00c      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80043b6:	bf00      	nop
 80043b8:	e00a      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80043ba:	bf00      	nop
 80043bc:	e008      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80043be:	bf00      	nop
 80043c0:	e006      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80043c2:	bf00      	nop
 80043c4:	e004      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
      }
    }
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
          break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <LL_RCC_GetUARTClockFreq+0x1e4>
          break;
 80043ce:	bf00      	nop
  }
  return uart_frequency;
 80043d0:	68fb      	ldr	r3, [r7, #12]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	00c00040 	.word	0x00c00040
 80043e0:	00c00080 	.word	0x00c00080
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	03000100 	.word	0x03000100
 80043ec:	03000200 	.word	0x03000200
 80043f0:	30001000 	.word	0x30001000
 80043f4:	30002000 	.word	0x30002000
 80043f8:	c0004000 	.word	0xc0004000
 80043fc:	c0008000 	.word	0xc0008000

08004400 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800440a:	f7ff fd4f 	bl	8003eac <LL_RCC_GetSysClkSource>
 800440e:	4603      	mov	r3, r0
 8004410:	2b08      	cmp	r3, #8
 8004412:	d00c      	beq.n	800442e <RCC_GetSystemClockFreq+0x2e>
 8004414:	2b08      	cmp	r3, #8
 8004416:	d80e      	bhi.n	8004436 <RCC_GetSystemClockFreq+0x36>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <RCC_GetSystemClockFreq+0x22>
 800441c:	2b04      	cmp	r3, #4
 800441e:	d003      	beq.n	8004428 <RCC_GetSystemClockFreq+0x28>
 8004420:	e009      	b.n	8004436 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <RCC_GetSystemClockFreq+0x48>)
 8004424:	607b      	str	r3, [r7, #4]
      break;
 8004426:	e009      	b.n	800443c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <RCC_GetSystemClockFreq+0x4c>)
 800442a:	607b      	str	r3, [r7, #4]
      break;
 800442c:	e006      	b.n	800443c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800442e:	f000 f84d 	bl	80044cc <RCC_PLL_GetFreqDomain_SYS>
 8004432:	6078      	str	r0, [r7, #4]
      break;
 8004434:	e002      	b.n	800443c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8004436:	4b04      	ldr	r3, [pc, #16]	; (8004448 <RCC_GetSystemClockFreq+0x48>)
 8004438:	607b      	str	r3, [r7, #4]
      break;
 800443a:	bf00      	nop
  }

  return frequency;
 800443c:	687b      	ldr	r3, [r7, #4]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	00f42400 	.word	0x00f42400
 800444c:	017d7840 	.word	0x017d7840

08004450 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004458:	f7ff fd36 	bl	8003ec8 <LL_RCC_GetAHBPrescaler>
 800445c:	4603      	mov	r3, r0
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <RCC_GetHCLKClockFreq+0x28>)
 8004466:	5cd3      	ldrb	r3, [r2, r3]
 8004468:	461a      	mov	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	40d3      	lsrs	r3, r2
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	08007564 	.word	0x08007564

0800447c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004484:	f7ff fd2e 	bl	8003ee4 <LL_RCC_GetAPB1Prescaler>
 8004488:	4603      	mov	r3, r0
 800448a:	0a9b      	lsrs	r3, r3, #10
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800448e:	5cd3      	ldrb	r3, [r2, r3]
 8004490:	461a      	mov	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	40d3      	lsrs	r3, r2
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	08007574 	.word	0x08007574

080044a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80044ac:	f7ff fd28 	bl	8003f00 <LL_RCC_GetAPB2Prescaler>
 80044b0:	4603      	mov	r3, r0
 80044b2:	0b5b      	lsrs	r3, r3, #13
 80044b4:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <RCC_GetPCLK2ClockFreq+0x24>)
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	461a      	mov	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	40d3      	lsrs	r3, r2
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	08007574 	.word	0x08007574

080044cc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	2300      	movs	r3, #0
 80044d8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80044da:	f7ff fd47 	bl	8003f6c <LL_RCC_PLL_GetMainSource>
 80044de:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ec:	d003      	beq.n	80044f6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80044ee:	e005      	b.n	80044fc <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80044f2:	607b      	str	r3, [r7, #4]
      break;
 80044f4:	e005      	b.n	8004502 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80044f8:	607b      	str	r3, [r7, #4]
      break;
 80044fa:	e002      	b.n	8004502 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80044fe:	607b      	str	r3, [r7, #4]
      break;
 8004500:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004502:	f7ff fd5d 	bl	8003fc0 <LL_RCC_PLL_GetDivider>
 8004506:	4602      	mov	r2, r0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	fbb3 f4f2 	udiv	r4, r3, r2
 800450e:	f7ff fd3b 	bl	8003f88 <LL_RCC_PLL_GetN>
 8004512:	4603      	mov	r3, r0
 8004514:	fb03 f404 	mul.w	r4, r3, r4
 8004518:	f7ff fd44 	bl	8003fa4 <LL_RCC_PLL_GetP>
 800451c:	4603      	mov	r3, r0
 800451e:	0c1b      	lsrs	r3, r3, #16
 8004520:	3301      	adds	r3, #1
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bd90      	pop	{r4, r7, pc}
 8004530:	00f42400 	.word	0x00f42400
 8004534:	017d7840 	.word	0x017d7840

08004538 <LL_TIM_SetPrescaler>:
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_TIM_SetAutoReload>:
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <LL_TIM_SetRepetitionCounter>:
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <LL_TIM_OC_SetCompareCH1>:
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_TIM_OC_SetCompareCH2>:
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_TIM_OC_SetCompareCH3>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <LL_TIM_OC_SetCompareCH4>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LL_TIM_OC_SetCompareCH5>:
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_TIM_OC_SetCompareCH6>:
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_TIM_GenerateEvent_UPDATE>:
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	615a      	str	r2, [r3, #20]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a3d      	ldr	r2, [pc, #244]	; (8004760 <LL_TIM_Init+0x108>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <LL_TIM_Init+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004676:	d00f      	beq.n	8004698 <LL_TIM_Init+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a3a      	ldr	r2, [pc, #232]	; (8004764 <LL_TIM_Init+0x10c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00b      	beq.n	8004698 <LL_TIM_Init+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a39      	ldr	r2, [pc, #228]	; (8004768 <LL_TIM_Init+0x110>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <LL_TIM_Init+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a38      	ldr	r2, [pc, #224]	; (800476c <LL_TIM_Init+0x114>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <LL_TIM_Init+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a37      	ldr	r2, [pc, #220]	; (8004770 <LL_TIM_Init+0x118>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d106      	bne.n	80046a6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a2d      	ldr	r2, [pc, #180]	; (8004760 <LL_TIM_Init+0x108>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d02b      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b4:	d027      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a2a      	ldr	r2, [pc, #168]	; (8004764 <LL_TIM_Init+0x10c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d023      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a29      	ldr	r2, [pc, #164]	; (8004768 <LL_TIM_Init+0x110>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01f      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a28      	ldr	r2, [pc, #160]	; (800476c <LL_TIM_Init+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01b      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a27      	ldr	r2, [pc, #156]	; (8004770 <LL_TIM_Init+0x118>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d017      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a26      	ldr	r2, [pc, #152]	; (8004774 <LL_TIM_Init+0x11c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a25      	ldr	r2, [pc, #148]	; (8004778 <LL_TIM_Init+0x120>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a24      	ldr	r2, [pc, #144]	; (800477c <LL_TIM_Init+0x124>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a23      	ldr	r2, [pc, #140]	; (8004780 <LL_TIM_Init+0x128>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <LL_TIM_Init+0x12c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <LL_TIM_Init+0xae>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a21      	ldr	r2, [pc, #132]	; (8004788 <LL_TIM_Init+0x130>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d106      	bne.n	8004714 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff17 	bl	8004554 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff03 	bl	8004538 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <LL_TIM_Init+0x108>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <LL_TIM_Init+0xea>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a0c      	ldr	r2, [pc, #48]	; (8004770 <LL_TIM_Init+0x118>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d105      	bne.n	800474e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff11 	bl	8004570 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ff72 	bl	8004638 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40010400 	.word	0x40010400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800
 8004780:	40001800 	.word	0x40001800
 8004784:	40001c00 	.word	0x40001c00
 8004788:	40002000 	.word	0x40002000

0800478c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a2:	d045      	beq.n	8004830 <LL_TIM_OC_Init+0xa4>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047aa:	d848      	bhi.n	800483e <LL_TIM_OC_Init+0xb2>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b2:	d036      	beq.n	8004822 <LL_TIM_OC_Init+0x96>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ba:	d840      	bhi.n	800483e <LL_TIM_OC_Init+0xb2>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c2:	d027      	beq.n	8004814 <LL_TIM_OC_Init+0x88>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ca:	d838      	bhi.n	800483e <LL_TIM_OC_Init+0xb2>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d2:	d018      	beq.n	8004806 <LL_TIM_OC_Init+0x7a>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047da:	d830      	bhi.n	800483e <LL_TIM_OC_Init+0xb2>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d003      	beq.n	80047ea <LL_TIM_OC_Init+0x5e>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d007      	beq.n	80047f8 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80047e8:	e029      	b.n	800483e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f82d 	bl	800484c <OC1Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	75fb      	strb	r3, [r7, #23]
      break;
 80047f6:	e023      	b.n	8004840 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f894 	bl	8004928 <OC2Config>
 8004800:	4603      	mov	r3, r0
 8004802:	75fb      	strb	r3, [r7, #23]
      break;
 8004804:	e01c      	b.n	8004840 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f8ff 	bl	8004a0c <OC3Config>
 800480e:	4603      	mov	r3, r0
 8004810:	75fb      	strb	r3, [r7, #23]
      break;
 8004812:	e015      	b.n	8004840 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f96a 	bl	8004af0 <OC4Config>
 800481c:	4603      	mov	r3, r0
 800481e:	75fb      	strb	r3, [r7, #23]
      break;
 8004820:	e00e      	b.n	8004840 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f9bd 	bl	8004ba4 <OC5Config>
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]
      break;
 800482e:	e007      	b.n	8004840 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fa08 	bl	8004c48 <OC6Config>
 8004838:	4603      	mov	r3, r0
 800483a:	75fb      	strb	r3, [r7, #23]
      break;
 800483c:	e000      	b.n	8004840 <LL_TIM_OC_Init+0xb4>
      break;
 800483e:	bf00      	nop
  }

  return result;
 8004840:	7dfb      	ldrb	r3, [r7, #23]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4b27      	ldr	r3, [pc, #156]	; (800491c <OC1Config+0xd0>)
 8004880:	4013      	ands	r3, r2
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 0202 	bic.w	r2, r3, #2
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0201 	bic.w	r2, r3, #1
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <OC1Config+0xd4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d003      	beq.n	80048b6 <OC1Config+0x6a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <OC1Config+0xd8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d11e      	bne.n	80048f4 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 0208 	bic.w	r2, r3, #8
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f023 0204 	bic.w	r2, r3, #4
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff fe40 	bl	800458c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	fffeff8f 	.word	0xfffeff8f
 8004920:	40010000 	.word	0x40010000
 8004924:	40010400 	.word	0x40010400

08004928 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0210 	bic.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <OC2Config+0xd8>)
 800495c:	4013      	ands	r3, r2
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	0212      	lsls	r2, r2, #8
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0220 	bic.w	r2, r3, #32
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0210 	bic.w	r2, r3, #16
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <OC2Config+0xdc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <OC2Config+0x70>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a1d      	ldr	r2, [pc, #116]	; (8004a08 <OC2Config+0xe0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d11f      	bne.n	80049d8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	019b      	lsls	r3, r3, #6
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	019b      	lsls	r3, r3, #6
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fddc 	bl	80045a8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	feff8fff 	.word	0xfeff8fff
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40010400 	.word	0x40010400

08004a0c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <OC3Config+0xd8>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <OC3Config+0xdc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <OC3Config+0x6e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <OC3Config+0xe0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d11f      	bne.n	8004aba <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	029b      	lsls	r3, r3, #10
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	029b      	lsls	r3, r3, #10
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	015b      	lsls	r3, r3, #5
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff fd79 	bl	80045c4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	fffeff8f 	.word	0xfffeff8f
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40010400 	.word	0x40010400

08004af0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <OC4Config+0xa8>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	0212      	lsls	r2, r2, #8
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	031b      	lsls	r3, r3, #12
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a12      	ldr	r2, [pc, #72]	; (8004b9c <OC4Config+0xac>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <OC4Config+0x70>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <OC4Config+0xb0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d107      	bne.n	8004b70 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	019b      	lsls	r3, r3, #6
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fd2c 	bl	80045e0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	feff8fff 	.word	0xfeff8fff
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40010400 	.word	0x40010400

08004ba4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <OC5Config+0x98>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <OC5Config+0x9c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <OC5Config+0x60>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a11      	ldr	r2, [pc, #68]	; (8004c44 <OC5Config+0xa0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d109      	bne.n	8004c18 <OC5Config+0x74>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff fce9 	bl	80045fc <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	fffeff8f 	.word	0xfffeff8f
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40010400 	.word	0x40010400

08004c48 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <OC6Config+0x98>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	0212      	lsls	r2, r2, #8
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	051b      	lsls	r3, r3, #20
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	051b      	lsls	r3, r3, #20
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <OC6Config+0x9c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <OC6Config+0x62>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a10      	ldr	r2, [pc, #64]	; (8004ce8 <OC6Config+0xa0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d109      	bne.n	8004cbe <OC6Config+0x76>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	029b      	lsls	r3, r3, #10
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fca6 	bl	800461c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	feff8fff 	.word	0xfeff8fff
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40010400 	.word	0x40010400

08004cec <LL_USART_IsEnabled>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <LL_USART_IsEnabled+0x18>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <LL_USART_IsEnabled+0x1a>
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_USART_SetStopBitsLength>:
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	605a      	str	r2, [r3, #4]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <LL_USART_SetHWFlowCtrl>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	609a      	str	r2, [r3, #8]
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <LL_USART_SetBaudRate>:
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b087      	sub	sp, #28
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d72:	d11a      	bne.n	8004daa <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	005a      	lsls	r2, r3, #1
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	441a      	add	r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	60da      	str	r2, [r3, #12]
}
 8004da8:	e00a      	b.n	8004dc0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	085a      	lsrs	r2, r3, #1
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	441a      	add	r2, r3
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	60da      	str	r2, [r3, #12]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff ff84 	bl	8004cec <LL_USART_IsEnabled>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d179      	bne.n	8004ede <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b3e      	ldr	r3, [pc, #248]	; (8004ee8 <LL_USART_Init+0x11c>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	6851      	ldr	r1, [r2, #4]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	68d2      	ldr	r2, [r2, #12]
 8004dfa:	4311      	orrs	r1, r2
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	6912      	ldr	r2, [r2, #16]
 8004e00:	4311      	orrs	r1, r2
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	6992      	ldr	r2, [r2, #24]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff ff7c 	bl	8004d12 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ff89 	bl	8004d38 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a30      	ldr	r2, [pc, #192]	; (8004eec <LL_USART_Init+0x120>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d104      	bne.n	8004e38 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004e2e:	2003      	movs	r0, #3
 8004e30:	f7ff f8d4 	bl	8003fdc <LL_RCC_GetUSARTClockFreq>
 8004e34:	60b8      	str	r0, [r7, #8]
 8004e36:	e041      	b.n	8004ebc <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a2d      	ldr	r2, [pc, #180]	; (8004ef0 <LL_USART_Init+0x124>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d104      	bne.n	8004e4a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004e40:	200c      	movs	r0, #12
 8004e42:	f7ff f8cb 	bl	8003fdc <LL_RCC_GetUSARTClockFreq>
 8004e46:	60b8      	str	r0, [r7, #8]
 8004e48:	e038      	b.n	8004ebc <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <LL_USART_Init+0x128>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d104      	bne.n	8004e5c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004e52:	2030      	movs	r0, #48	; 0x30
 8004e54:	f7ff f8c2 	bl	8003fdc <LL_RCC_GetUSARTClockFreq>
 8004e58:	60b8      	str	r0, [r7, #8]
 8004e5a:	e02f      	b.n	8004ebc <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <LL_USART_Init+0x12c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d104      	bne.n	8004e6e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004e64:	20c0      	movs	r0, #192	; 0xc0
 8004e66:	f7ff f9c1 	bl	80041ec <LL_RCC_GetUARTClockFreq>
 8004e6a:	60b8      	str	r0, [r7, #8]
 8004e6c:	e026      	b.n	8004ebc <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a22      	ldr	r2, [pc, #136]	; (8004efc <LL_USART_Init+0x130>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d105      	bne.n	8004e82 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8004e76:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004e7a:	f7ff f9b7 	bl	80041ec <LL_RCC_GetUARTClockFreq>
 8004e7e:	60b8      	str	r0, [r7, #8]
 8004e80:	e01c      	b.n	8004ebc <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <LL_USART_Init+0x134>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d105      	bne.n	8004e96 <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8004e8a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004e8e:	f7ff f8a5 	bl	8003fdc <LL_RCC_GetUSARTClockFreq>
 8004e92:	60b8      	str	r0, [r7, #8]
 8004e94:	e012      	b.n	8004ebc <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1a      	ldr	r2, [pc, #104]	; (8004f04 <LL_USART_Init+0x138>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d105      	bne.n	8004eaa <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8004e9e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004ea2:	f7ff f9a3 	bl	80041ec <LL_RCC_GetUARTClockFreq>
 8004ea6:	60b8      	str	r0, [r7, #8]
 8004ea8:	e008      	b.n	8004ebc <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <LL_USART_Init+0x13c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d104      	bne.n	8004ebc <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8004eb2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8004eb6:	f7ff f999 	bl	80041ec <LL_RCC_GetUARTClockFreq>
 8004eba:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff40 	bl	8004d5e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	efff69f3 	.word	0xefff69f3
 8004eec:	40011000 	.word	0x40011000
 8004ef0:	40004400 	.word	0x40004400
 8004ef4:	40004800 	.word	0x40004800
 8004ef8:	40004c00 	.word	0x40004c00
 8004efc:	40005000 	.word	0x40005000
 8004f00:	40011400 	.word	0x40011400
 8004f04:	40007800 	.word	0x40007800
 8004f08:	40007c00 	.word	0x40007c00

08004f0c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004f14:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <LL_mDelay+0x48>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004f1a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d00c      	beq.n	8004f3e <LL_mDelay+0x32>
  {
    Delay++;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3301      	adds	r3, #1
 8004f28:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004f2a:	e008      	b.n	8004f3e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <LL_mDelay+0x48>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <LL_mDelay+0x32>
    {
      Delay--;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f3      	bne.n	8004f2c <LL_mDelay+0x20>
    }
  }
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	e000e010 	.word	0xe000e010

08004f58 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004f60:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <LL_SetSystemCoreClock+0x1c>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6013      	str	r3, [r2, #0]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20000000 	.word	0x20000000

08004f78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f8a:	2b84      	cmp	r3, #132	; 0x84
 8004f8c:	d005      	beq.n	8004f9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	3303      	adds	r3, #3
 8004f98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004faa:	b089      	sub	sp, #36	; 0x24
 8004fac:	af04      	add	r7, sp, #16
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d020      	beq.n	8004ffc <osThreadCreate+0x54>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01c      	beq.n	8004ffc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685c      	ldr	r4, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681d      	ldr	r5, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691e      	ldr	r6, [r3, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ffcf 	bl	8004f78 <makeFreeRtosPriority>
 8004fda:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fe4:	9202      	str	r2, [sp, #8]
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	9100      	str	r1, [sp, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	4632      	mov	r2, r6
 8004fee:	4629      	mov	r1, r5
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 fcb5 	bl	8005960 <xTaskCreateStatic>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	e01c      	b.n	8005036 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685c      	ldr	r4, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005008:	b29e      	uxth	r6, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff ffb1 	bl	8004f78 <makeFreeRtosPriority>
 8005016:	4602      	mov	r2, r0
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	9200      	str	r2, [sp, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	4632      	mov	r2, r6
 8005024:	4629      	mov	r1, r5
 8005026:	4620      	mov	r0, r4
 8005028:	f000 fcfd 	bl	8005a26 <xTaskCreate>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d001      	beq.n	8005036 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005032:	2300      	movs	r3, #0
 8005034:	e000      	b.n	8005038 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005036:	68fb      	ldr	r3, [r7, #12]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005040 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <osDelay+0x16>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	e000      	b.n	8005058 <osDelay+0x18>
 8005056:	2301      	movs	r3, #1
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fe1d 	bl	8005c98 <vTaskDelay>
  
  return osOK;
 800505e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f103 0208 	add.w	r2, r3, #8
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f04f 32ff 	mov.w	r2, #4294967295
 8005080:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f103 0208 	add.w	r2, r3, #8
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f103 0208 	add.w	r2, r3, #8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d103      	bne.n	800512a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e00c      	b.n	8005144 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3308      	adds	r3, #8
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e002      	b.n	8005138 <vListInsert+0x2e>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	d2f6      	bcs.n	8005132 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	601a      	str	r2, [r3, #0]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6892      	ldr	r2, [r2, #8]
 8005192:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6852      	ldr	r2, [r2, #4]
 800519c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d103      	bne.n	80051b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10c      	bne.n	80051fe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	b672      	cpsid	i
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	b662      	cpsie	i
 80051f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80051fe:	f001 fa43 	bl	8006688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800520e:	fb01 f303 	mul.w	r3, r1, r3
 8005212:	441a      	add	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	3b01      	subs	r3, #1
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	441a      	add	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	22ff      	movs	r2, #255	; 0xff
 8005242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	22ff      	movs	r2, #255	; 0xff
 800524a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d114      	bne.n	800527e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01a      	beq.n	8005292 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3310      	adds	r3, #16
 8005260:	4618      	mov	r0, r3
 8005262:	f000 ff39 	bl	80060d8 <xTaskRemoveFromEventList>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d012      	beq.n	8005292 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <xQueueGenericReset+0xd0>)
 800526e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	e009      	b.n	8005292 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3310      	adds	r3, #16
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fef0 	bl	8005068 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3324      	adds	r3, #36	; 0x24
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff feeb 	bl	8005068 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005292:	f001 fa2d 	bl	80066f0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005296:	2301      	movs	r3, #1
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	4613      	mov	r3, r2
 80052b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10c      	bne.n	80052d2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	b672      	cpsid	i
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	b662      	cpsie	i
 80052cc:	613b      	str	r3, [r7, #16]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	e004      	b.n	80052e8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	3348      	adds	r3, #72	; 0x48
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 fa87 	bl	8006800 <pvPortMalloc>
 80052f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d011      	beq.n	800531e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	3348      	adds	r3, #72	; 0x48
 8005302:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800530c:	79fa      	ldrb	r2, [r7, #7]
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	4613      	mov	r3, r2
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f805 	bl	8005328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800531e:	69bb      	ldr	r3, [r7, #24]
	}
 8005320:	4618      	mov	r0, r3
 8005322:	3720      	adds	r7, #32
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d103      	bne.n	8005344 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e002      	b.n	800534a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005356:	2101      	movs	r1, #1
 8005358:	69b8      	ldr	r0, [r7, #24]
 800535a:	f7ff ff39 	bl	80051d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08e      	sub	sp, #56	; 0x38
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005376:	2300      	movs	r3, #0
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10c      	bne.n	800539e <xQueueGenericSend+0x36>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	b672      	cpsid	i
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	b662      	cpsie	i
 8005398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <xQueueGenericSend+0x44>
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <xQueueGenericSend+0x48>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <xQueueGenericSend+0x4a>
 80053b0:	2300      	movs	r3, #0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10c      	bne.n	80053d0 <xQueueGenericSend+0x68>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	b672      	cpsid	i
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	b662      	cpsie	i
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d103      	bne.n	80053de <xQueueGenericSend+0x76>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSend+0x7a>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSend+0x7c>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10c      	bne.n	8005402 <xQueueGenericSend+0x9a>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	b672      	cpsid	i
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	b662      	cpsie	i
 80053fc:	623b      	str	r3, [r7, #32]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005402:	f000 ffb5 	bl	8006370 <xTaskGetSchedulerState>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <xQueueGenericSend+0xaa>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <xQueueGenericSend+0xae>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <xQueueGenericSend+0xb0>
 8005416:	2300      	movs	r3, #0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10c      	bne.n	8005436 <xQueueGenericSend+0xce>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	b672      	cpsid	i
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	b662      	cpsie	i
 8005430:	61fb      	str	r3, [r7, #28]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005436:	f001 f927 	bl	8006688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	429a      	cmp	r2, r3
 8005444:	d302      	bcc.n	800544c <xQueueGenericSend+0xe4>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d129      	bne.n	80054a0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005452:	f000 f975 	bl	8005740 <prvCopyDataToQueue>
 8005456:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	d010      	beq.n	8005482 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	3324      	adds	r3, #36	; 0x24
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fe37 	bl	80060d8 <xTaskRemoveFromEventList>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d013      	beq.n	8005498 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005470:	4b3f      	ldr	r3, [pc, #252]	; (8005570 <xQueueGenericSend+0x208>)
 8005472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	e00a      	b.n	8005498 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005488:	4b39      	ldr	r3, [pc, #228]	; (8005570 <xQueueGenericSend+0x208>)
 800548a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005498:	f001 f92a 	bl	80066f0 <vPortExitCritical>
				return pdPASS;
 800549c:	2301      	movs	r3, #1
 800549e:	e063      	b.n	8005568 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d103      	bne.n	80054ae <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054a6:	f001 f923 	bl	80066f0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e05c      	b.n	8005568 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054b4:	f107 0314 	add.w	r3, r7, #20
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fe71 	bl	80061a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054be:	2301      	movs	r3, #1
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054c2:	f001 f915 	bl	80066f0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054c6:	f000 fc1d 	bl	8005d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054ca:	f001 f8dd 	bl	8006688 <vPortEnterCritical>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d4:	b25b      	sxtb	r3, r3
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d103      	bne.n	80054e4 <xQueueGenericSend+0x17c>
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ea:	b25b      	sxtb	r3, r3
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d103      	bne.n	80054fa <xQueueGenericSend+0x192>
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054fa:	f001 f8f9 	bl	80066f0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054fe:	1d3a      	adds	r2, r7, #4
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fe60 	bl	80061cc <xTaskCheckForTimeOut>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d124      	bne.n	800555c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005514:	f000 fa0c 	bl	8005930 <prvIsQueueFull>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d018      	beq.n	8005550 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	3310      	adds	r3, #16
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fdb0 	bl	800608c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800552c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800552e:	f000 f997 	bl	8005860 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005532:	f000 fbf5 	bl	8005d20 <xTaskResumeAll>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	f47f af7c 	bne.w	8005436 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <xQueueGenericSend+0x208>)
 8005540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	e772      	b.n	8005436 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005552:	f000 f985 	bl	8005860 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005556:	f000 fbe3 	bl	8005d20 <xTaskResumeAll>
 800555a:	e76c      	b.n	8005436 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800555c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800555e:	f000 f97f 	bl	8005860 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005562:	f000 fbdd 	bl	8005d20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005566:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005568:	4618      	mov	r0, r3
 800556a:	3738      	adds	r7, #56	; 0x38
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08c      	sub	sp, #48	; 0x30
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005580:	2300      	movs	r3, #0
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10c      	bne.n	80055a8 <xQueueReceive+0x34>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	b672      	cpsid	i
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	b662      	cpsie	i
 80055a2:	623b      	str	r3, [r7, #32]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <xQueueReceive+0x42>
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <xQueueReceive+0x46>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueReceive+0x48>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10c      	bne.n	80055da <xQueueReceive+0x66>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
 80055d4:	61fb      	str	r3, [r7, #28]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055da:	f000 fec9 	bl	8006370 <xTaskGetSchedulerState>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <xQueueReceive+0x76>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <xQueueReceive+0x7a>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <xQueueReceive+0x7c>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10c      	bne.n	800560e <xQueueReceive+0x9a>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	b672      	cpsid	i
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	b662      	cpsie	i
 8005608:	61bb      	str	r3, [r7, #24]
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800560e:	f001 f83b 	bl	8006688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01f      	beq.n	800565e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005622:	f000 f8f7 	bl	8005814 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00f      	beq.n	8005656 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	3310      	adds	r3, #16
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fd4c 	bl	80060d8 <xTaskRemoveFromEventList>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005646:	4b3d      	ldr	r3, [pc, #244]	; (800573c <xQueueReceive+0x1c8>)
 8005648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005656:	f001 f84b 	bl	80066f0 <vPortExitCritical>
				return pdPASS;
 800565a:	2301      	movs	r3, #1
 800565c:	e069      	b.n	8005732 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d103      	bne.n	800566c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005664:	f001 f844 	bl	80066f0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005668:	2300      	movs	r3, #0
 800566a:	e062      	b.n	8005732 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005672:	f107 0310 	add.w	r3, r7, #16
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fd92 	bl	80061a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005680:	f001 f836 	bl	80066f0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005684:	f000 fb3e 	bl	8005d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005688:	f000 fffe 	bl	8006688 <vPortEnterCritical>
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005692:	b25b      	sxtb	r3, r3
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d103      	bne.n	80056a2 <xQueueReceive+0x12e>
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056a8:	b25b      	sxtb	r3, r3
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d103      	bne.n	80056b8 <xQueueReceive+0x144>
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b8:	f001 f81a 	bl	80066f0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056bc:	1d3a      	adds	r2, r7, #4
 80056be:	f107 0310 	add.w	r3, r7, #16
 80056c2:	4611      	mov	r1, r2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fd81 	bl	80061cc <xTaskCheckForTimeOut>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d123      	bne.n	8005718 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056d2:	f000 f917 	bl	8005904 <prvIsQueueEmpty>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d017      	beq.n	800570c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	4611      	mov	r1, r2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fcd1 	bl	800608c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ec:	f000 f8b8 	bl	8005860 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056f0:	f000 fb16 	bl	8005d20 <xTaskResumeAll>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d189      	bne.n	800560e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80056fa:	4b10      	ldr	r3, [pc, #64]	; (800573c <xQueueReceive+0x1c8>)
 80056fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	e780      	b.n	800560e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800570c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800570e:	f000 f8a7 	bl	8005860 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005712:	f000 fb05 	bl	8005d20 <xTaskResumeAll>
 8005716:	e77a      	b.n	800560e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800571a:	f000 f8a1 	bl	8005860 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800571e:	f000 faff 	bl	8005d20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005724:	f000 f8ee 	bl	8005904 <prvIsQueueEmpty>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	f43f af6f 	beq.w	800560e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005730:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005732:	4618      	mov	r0, r3
 8005734:	3730      	adds	r7, #48	; 0x30
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10d      	bne.n	800577a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d14d      	bne.n	8005802 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fe1e 	bl	80063ac <xTaskPriorityDisinherit>
 8005770:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	609a      	str	r2, [r3, #8]
 8005778:	e043      	b.n	8005802 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d119      	bne.n	80057b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6858      	ldr	r0, [r3, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	461a      	mov	r2, r3
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	f001 fa46 	bl	8006c1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	441a      	add	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d32b      	bcc.n	8005802 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	605a      	str	r2, [r3, #4]
 80057b2:	e026      	b.n	8005802 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68d8      	ldr	r0, [r3, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	461a      	mov	r2, r3
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	f001 fa2c 	bl	8006c1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	425b      	negs	r3, r3
 80057ce:	441a      	add	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d207      	bcs.n	80057f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	425b      	negs	r3, r3
 80057ea:	441a      	add	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d105      	bne.n	8005802 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3b01      	subs	r3, #1
 8005800:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800580a:	697b      	ldr	r3, [r7, #20]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d018      	beq.n	8005858 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	441a      	add	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	d303      	bcc.n	8005848 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68d9      	ldr	r1, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	461a      	mov	r2, r3
 8005852:	6838      	ldr	r0, [r7, #0]
 8005854:	f001 f9e2 	bl	8006c1c <memcpy>
	}
}
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005868:	f000 ff0e 	bl	8006688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005872:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005874:	e011      	b.n	800589a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3324      	adds	r3, #36	; 0x24
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fc28 	bl	80060d8 <xTaskRemoveFromEventList>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800588e:	f000 fd03 	bl	8006298 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	3b01      	subs	r3, #1
 8005896:	b2db      	uxtb	r3, r3
 8005898:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800589a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	dce9      	bgt.n	8005876 <prvUnlockQueue+0x16>
 80058a2:	e000      	b.n	80058a6 <prvUnlockQueue+0x46>
					break;
 80058a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	22ff      	movs	r2, #255	; 0xff
 80058aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058ae:	f000 ff1f 	bl	80066f0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058b2:	f000 fee9 	bl	8006688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058be:	e011      	b.n	80058e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d012      	beq.n	80058ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3310      	adds	r3, #16
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fc03 	bl	80060d8 <xTaskRemoveFromEventList>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058d8:	f000 fcde 	bl	8006298 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058dc:	7bbb      	ldrb	r3, [r7, #14]
 80058de:	3b01      	subs	r3, #1
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dce9      	bgt.n	80058c0 <prvUnlockQueue+0x60>
 80058ec:	e000      	b.n	80058f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	22ff      	movs	r2, #255	; 0xff
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80058f8:	f000 fefa 	bl	80066f0 <vPortExitCritical>
}
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800590c:	f000 febc 	bl	8006688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e001      	b.n	8005922 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005922:	f000 fee5 	bl	80066f0 <vPortExitCritical>

	return xReturn;
 8005926:	68fb      	ldr	r3, [r7, #12]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005938:	f000 fea6 	bl	8006688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	429a      	cmp	r2, r3
 8005946:	d102      	bne.n	800594e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e001      	b.n	8005952 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005952:	f000 fecd 	bl	80066f0 <vPortExitCritical>

	return xReturn;
 8005956:	68fb      	ldr	r3, [r7, #12]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08e      	sub	sp, #56	; 0x38
 8005964:	af04      	add	r7, sp, #16
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10c      	bne.n	800598e <xTaskCreateStatic+0x2e>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	b672      	cpsid	i
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	b662      	cpsie	i
 8005988:	623b      	str	r3, [r7, #32]
}
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10c      	bne.n	80059ae <xTaskCreateStatic+0x4e>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	b672      	cpsid	i
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	b662      	cpsie	i
 80059a8:	61fb      	str	r3, [r7, #28]
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059ae:	2354      	movs	r3, #84	; 0x54
 80059b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b54      	cmp	r3, #84	; 0x54
 80059b6:	d00c      	beq.n	80059d2 <xTaskCreateStatic+0x72>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	b672      	cpsid	i
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	b662      	cpsie	i
 80059cc:	61bb      	str	r3, [r7, #24]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01e      	beq.n	8005a18 <xTaskCreateStatic+0xb8>
 80059da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01b      	beq.n	8005a18 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059f2:	2300      	movs	r3, #0
 80059f4:	9303      	str	r3, [sp, #12]
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	9302      	str	r3, [sp, #8]
 80059fa:	f107 0314 	add.w	r3, r7, #20
 80059fe:	9301      	str	r3, [sp, #4]
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f850 	bl	8005ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a12:	f000 f8d7 	bl	8005bc4 <prvAddNewTaskToReadyList>
 8005a16:	e001      	b.n	8005a1c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a1c:	697b      	ldr	r3, [r7, #20]
	}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3728      	adds	r7, #40	; 0x28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b08c      	sub	sp, #48	; 0x30
 8005a2a:	af04      	add	r7, sp, #16
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fee0 	bl	8006800 <pvPortMalloc>
 8005a40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00e      	beq.n	8005a66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a48:	2054      	movs	r0, #84	; 0x54
 8005a4a:	f000 fed9 	bl	8006800 <pvPortMalloc>
 8005a4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a5c:	e005      	b.n	8005a6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a5e:	6978      	ldr	r0, [r7, #20]
 8005a60:	f000 ff98 	bl	8006994 <vPortFree>
 8005a64:	e001      	b.n	8005a6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d017      	beq.n	8005aa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9303      	str	r3, [sp, #12]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	9302      	str	r3, [sp, #8]
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f80e 	bl	8005ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a94:	69f8      	ldr	r0, [r7, #28]
 8005a96:	f000 f895 	bl	8005bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e002      	b.n	8005aa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
	}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005ac8:	440b      	add	r3, r1
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f023 0307 	bic.w	r3, r3, #7
 8005ad6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00c      	beq.n	8005afc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	b672      	cpsid	i
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	b662      	cpsie	i
 8005af6:	617b      	str	r3, [r7, #20]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01f      	beq.n	8005b42 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	e012      	b.n	8005b2e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	7819      	ldrb	r1, [r3, #0]
 8005b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	3334      	adds	r3, #52	; 0x34
 8005b18:	460a      	mov	r2, r1
 8005b1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d006      	beq.n	8005b36 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	2b0f      	cmp	r3, #15
 8005b32:	d9e9      	bls.n	8005b08 <prvInitialiseNewTask+0x58>
 8005b34:	e000      	b.n	8005b38 <prvInitialiseNewTask+0x88>
			{
				break;
 8005b36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b40:	e003      	b.n	8005b4a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	2b06      	cmp	r3, #6
 8005b4e:	d901      	bls.n	8005b54 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b50:	2306      	movs	r3, #6
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	2200      	movs	r2, #0
 8005b64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fa9c 	bl	80050a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	3318      	adds	r3, #24
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fa97 	bl	80050a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	f1c3 0207 	rsb	r2, r3, #7
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	2200      	movs	r2, #0
 8005b94:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	68f9      	ldr	r1, [r7, #12]
 8005ba2:	69b8      	ldr	r0, [r7, #24]
 8005ba4:	f000 fcf2 	bl	800658c <pxPortInitialiseStack>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bba:	bf00      	nop
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bcc:	f000 fd5c 	bl	8006688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bd0:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <prvAddNewTaskToReadyList+0xb8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	4a29      	ldr	r2, [pc, #164]	; (8005c7c <prvAddNewTaskToReadyList+0xb8>)
 8005bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <prvAddNewTaskToReadyList+0xbc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005be2:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <prvAddNewTaskToReadyList+0xbc>)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005be8:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <prvAddNewTaskToReadyList+0xb8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d110      	bne.n	8005c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005bf0:	f000 fb5e 	bl	80062b0 <prvInitialiseTaskLists>
 8005bf4:	e00d      	b.n	8005c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005bf6:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <prvAddNewTaskToReadyList+0xc0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bfe:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <prvAddNewTaskToReadyList+0xbc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d802      	bhi.n	8005c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c0c:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <prvAddNewTaskToReadyList+0xbc>)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c12:	4b1d      	ldr	r3, [pc, #116]	; (8005c88 <prvAddNewTaskToReadyList+0xc4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3301      	adds	r3, #1
 8005c18:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <prvAddNewTaskToReadyList+0xc4>)
 8005c1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	2201      	movs	r2, #1
 8005c22:	409a      	lsls	r2, r3
 8005c24:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <prvAddNewTaskToReadyList+0xc8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <prvAddNewTaskToReadyList+0xc8>)
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <prvAddNewTaskToReadyList+0xcc>)
 8005c3c:	441a      	add	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f7ff fa3c 	bl	80050c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c4a:	f000 fd51 	bl	80066f0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <prvAddNewTaskToReadyList+0xc0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c56:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvAddNewTaskToReadyList+0xbc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d207      	bcs.n	8005c74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <prvAddNewTaskToReadyList+0xd0>)
 8005c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000194 	.word	0x20000194
 8005c80:	20000098 	.word	0x20000098
 8005c84:	200001a0 	.word	0x200001a0
 8005c88:	200001b0 	.word	0x200001b0
 8005c8c:	2000019c 	.word	0x2000019c
 8005c90:	2000009c 	.word	0x2000009c
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d019      	beq.n	8005cde <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005caa:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <vTaskDelay+0x64>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00c      	beq.n	8005ccc <vTaskDelay+0x34>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	b672      	cpsid	i
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	b662      	cpsie	i
 8005cc6:	60bb      	str	r3, [r7, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005ccc:	f000 f81a 	bl	8005d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fbf4 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cd8:	f000 f822 	bl	8005d20 <xTaskResumeAll>
 8005cdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d107      	bne.n	8005cf4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <vTaskDelay+0x68>)
 8005ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	200001b8 	.word	0x200001b8
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d08:	4b04      	ldr	r3, [pc, #16]	; (8005d1c <vTaskSuspendAll+0x18>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	4a03      	ldr	r2, [pc, #12]	; (8005d1c <vTaskSuspendAll+0x18>)
 8005d10:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005d12:	bf00      	nop
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	200001b8 	.word	0x200001b8

08005d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d2e:	4b42      	ldr	r3, [pc, #264]	; (8005e38 <xTaskResumeAll+0x118>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <xTaskResumeAll+0x30>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	b672      	cpsid	i
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	b662      	cpsie	i
 8005d4a:	603b      	str	r3, [r7, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d50:	f000 fc9a 	bl	8006688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d54:	4b38      	ldr	r3, [pc, #224]	; (8005e38 <xTaskResumeAll+0x118>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	4a37      	ldr	r2, [pc, #220]	; (8005e38 <xTaskResumeAll+0x118>)
 8005d5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5e:	4b36      	ldr	r3, [pc, #216]	; (8005e38 <xTaskResumeAll+0x118>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d161      	bne.n	8005e2a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d66:	4b35      	ldr	r3, [pc, #212]	; (8005e3c <xTaskResumeAll+0x11c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d05d      	beq.n	8005e2a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d6e:	e02e      	b.n	8005dce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d70:	4b33      	ldr	r3, [pc, #204]	; (8005e40 <xTaskResumeAll+0x120>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3318      	adds	r3, #24
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff f9fd 	bl	800517c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff f9f8 	bl	800517c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	2201      	movs	r2, #1
 8005d92:	409a      	lsls	r2, r3
 8005d94:	4b2b      	ldr	r3, [pc, #172]	; (8005e44 <xTaskResumeAll+0x124>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	4a2a      	ldr	r2, [pc, #168]	; (8005e44 <xTaskResumeAll+0x124>)
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4a27      	ldr	r2, [pc, #156]	; (8005e48 <xTaskResumeAll+0x128>)
 8005dac:	441a      	add	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3304      	adds	r3, #4
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f7ff f984 	bl	80050c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbe:	4b23      	ldr	r3, [pc, #140]	; (8005e4c <xTaskResumeAll+0x12c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d302      	bcc.n	8005dce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005dc8:	4b21      	ldr	r3, [pc, #132]	; (8005e50 <xTaskResumeAll+0x130>)
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dce:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <xTaskResumeAll+0x120>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1cc      	bne.n	8005d70 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ddc:	f000 faa8 	bl	8006330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005de0:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <xTaskResumeAll+0x134>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d010      	beq.n	8005e0e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dec:	f000 f836 	bl	8005e5c <xTaskIncrementTick>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005df6:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <xTaskResumeAll+0x130>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f1      	bne.n	8005dec <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005e08:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <xTaskResumeAll+0x134>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e0e:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <xTaskResumeAll+0x130>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e1a:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <xTaskResumeAll+0x138>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e2a:	f000 fc61 	bl	80066f0 <vPortExitCritical>

	return xAlreadyYielded;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200001b8 	.word	0x200001b8
 8005e3c:	20000194 	.word	0x20000194
 8005e40:	20000158 	.word	0x20000158
 8005e44:	2000019c 	.word	0x2000019c
 8005e48:	2000009c 	.word	0x2000009c
 8005e4c:	20000098 	.word	0x20000098
 8005e50:	200001a8 	.word	0x200001a8
 8005e54:	200001a4 	.word	0x200001a4
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e66:	4b4f      	ldr	r3, [pc, #316]	; (8005fa4 <xTaskIncrementTick+0x148>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 808a 	bne.w	8005f84 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e70:	4b4d      	ldr	r3, [pc, #308]	; (8005fa8 <xTaskIncrementTick+0x14c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e78:	4a4b      	ldr	r2, [pc, #300]	; (8005fa8 <xTaskIncrementTick+0x14c>)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d122      	bne.n	8005eca <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e84:	4b49      	ldr	r3, [pc, #292]	; (8005fac <xTaskIncrementTick+0x150>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00c      	beq.n	8005ea8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	b672      	cpsid	i
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	b662      	cpsie	i
 8005ea2:	603b      	str	r3, [r7, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <xTaskIncrementTick+0x4a>
 8005ea8:	4b40      	ldr	r3, [pc, #256]	; (8005fac <xTaskIncrementTick+0x150>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	4b40      	ldr	r3, [pc, #256]	; (8005fb0 <xTaskIncrementTick+0x154>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a3e      	ldr	r2, [pc, #248]	; (8005fac <xTaskIncrementTick+0x150>)
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	4a3e      	ldr	r2, [pc, #248]	; (8005fb0 <xTaskIncrementTick+0x154>)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <xTaskIncrementTick+0x158>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	4a3c      	ldr	r2, [pc, #240]	; (8005fb4 <xTaskIncrementTick+0x158>)
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	f000 fa33 	bl	8006330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005eca:	4b3b      	ldr	r3, [pc, #236]	; (8005fb8 <xTaskIncrementTick+0x15c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d348      	bcc.n	8005f66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ed4:	4b35      	ldr	r3, [pc, #212]	; (8005fac <xTaskIncrementTick+0x150>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ede:	4b36      	ldr	r3, [pc, #216]	; (8005fb8 <xTaskIncrementTick+0x15c>)
 8005ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee4:	601a      	str	r2, [r3, #0]
					break;
 8005ee6:	e03e      	b.n	8005f66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee8:	4b30      	ldr	r3, [pc, #192]	; (8005fac <xTaskIncrementTick+0x150>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d203      	bcs.n	8005f08 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f00:	4a2d      	ldr	r2, [pc, #180]	; (8005fb8 <xTaskIncrementTick+0x15c>)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f06:	e02e      	b.n	8005f66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff f935 	bl	800517c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d004      	beq.n	8005f24 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	3318      	adds	r3, #24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff f92c 	bl	800517c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	2201      	movs	r2, #1
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	4b23      	ldr	r3, [pc, #140]	; (8005fbc <xTaskIncrementTick+0x160>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <xTaskIncrementTick+0x160>)
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <xTaskIncrementTick+0x164>)
 8005f44:	441a      	add	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	f7ff f8b8 	bl	80050c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f56:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <xTaskIncrementTick+0x168>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d3b9      	bcc.n	8005ed4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f64:	e7b6      	b.n	8005ed4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f66:	4b17      	ldr	r3, [pc, #92]	; (8005fc4 <xTaskIncrementTick+0x168>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	4914      	ldr	r1, [pc, #80]	; (8005fc0 <xTaskIncrementTick+0x164>)
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d907      	bls.n	8005f8e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e004      	b.n	8005f8e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f84:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <xTaskIncrementTick+0x16c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	4a0f      	ldr	r2, [pc, #60]	; (8005fc8 <xTaskIncrementTick+0x16c>)
 8005f8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f8e:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <xTaskIncrementTick+0x170>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005f96:	2301      	movs	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f9a:	697b      	ldr	r3, [r7, #20]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	200001b8 	.word	0x200001b8
 8005fa8:	20000198 	.word	0x20000198
 8005fac:	20000150 	.word	0x20000150
 8005fb0:	20000154 	.word	0x20000154
 8005fb4:	200001ac 	.word	0x200001ac
 8005fb8:	200001b4 	.word	0x200001b4
 8005fbc:	2000019c 	.word	0x2000019c
 8005fc0:	2000009c 	.word	0x2000009c
 8005fc4:	20000098 	.word	0x20000098
 8005fc8:	200001a4 	.word	0x200001a4
 8005fcc:	200001a8 	.word	0x200001a8

08005fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fd6:	4b28      	ldr	r3, [pc, #160]	; (8006078 <vTaskSwitchContext+0xa8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fde:	4b27      	ldr	r3, [pc, #156]	; (800607c <vTaskSwitchContext+0xac>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fe4:	e041      	b.n	800606a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005fe6:	4b25      	ldr	r3, [pc, #148]	; (800607c <vTaskSwitchContext+0xac>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fec:	4b24      	ldr	r3, [pc, #144]	; (8006080 <vTaskSwitchContext+0xb0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	fab3 f383 	clz	r3, r3
 8005ff8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	f1c3 031f 	rsb	r3, r3, #31
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	4920      	ldr	r1, [pc, #128]	; (8006084 <vTaskSwitchContext+0xb4>)
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10c      	bne.n	8006030 <vTaskSwitchContext+0x60>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	b672      	cpsid	i
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	b662      	cpsie	i
 800602a:	607b      	str	r3, [r7, #4]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <vTaskSwitchContext+0x5e>
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4a12      	ldr	r2, [pc, #72]	; (8006084 <vTaskSwitchContext+0xb4>)
 800603c:	4413      	add	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	3308      	adds	r3, #8
 8006052:	429a      	cmp	r2, r3
 8006054:	d104      	bne.n	8006060 <vTaskSwitchContext+0x90>
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	605a      	str	r2, [r3, #4]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	4a08      	ldr	r2, [pc, #32]	; (8006088 <vTaskSwitchContext+0xb8>)
 8006068:	6013      	str	r3, [r2, #0]
}
 800606a:	bf00      	nop
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	200001b8 	.word	0x200001b8
 800607c:	200001a8 	.word	0x200001a8
 8006080:	2000019c 	.word	0x2000019c
 8006084:	2000009c 	.word	0x2000009c
 8006088:	20000098 	.word	0x20000098

0800608c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10c      	bne.n	80060b6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	b672      	cpsid	i
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	b662      	cpsie	i
 80060b0:	60fb      	str	r3, [r7, #12]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <vTaskPlaceOnEventList+0x48>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3318      	adds	r3, #24
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff f823 	bl	800510a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060c4:	2101      	movs	r1, #1
 80060c6:	6838      	ldr	r0, [r7, #0]
 80060c8:	f000 f9fa 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000098 	.word	0x20000098

080060d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10c      	bne.n	8006108 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	b672      	cpsid	i
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	b662      	cpsie	i
 8006102:	60fb      	str	r3, [r7, #12]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	3318      	adds	r3, #24
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff f835 	bl	800517c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006112:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <xTaskRemoveFromEventList+0xb0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d11c      	bne.n	8006154 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3304      	adds	r3, #4
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff f82c 	bl	800517c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	2201      	movs	r2, #1
 800612a:	409a      	lsls	r2, r3
 800612c:	4b17      	ldr	r3, [pc, #92]	; (800618c <xTaskRemoveFromEventList+0xb4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <xTaskRemoveFromEventList+0xb4>)
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4a13      	ldr	r2, [pc, #76]	; (8006190 <xTaskRemoveFromEventList+0xb8>)
 8006144:	441a      	add	r2, r3
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fe ffb8 	bl	80050c2 <vListInsertEnd>
 8006152:	e005      	b.n	8006160 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3318      	adds	r3, #24
 8006158:	4619      	mov	r1, r3
 800615a:	480e      	ldr	r0, [pc, #56]	; (8006194 <xTaskRemoveFromEventList+0xbc>)
 800615c:	f7fe ffb1 	bl	80050c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <xTaskRemoveFromEventList+0xc0>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	429a      	cmp	r2, r3
 800616c:	d905      	bls.n	800617a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800616e:	2301      	movs	r3, #1
 8006170:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <xTaskRemoveFromEventList+0xc4>)
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e001      	b.n	800617e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800617e:	697b      	ldr	r3, [r7, #20]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	200001b8 	.word	0x200001b8
 800618c:	2000019c 	.word	0x2000019c
 8006190:	2000009c 	.word	0x2000009c
 8006194:	20000158 	.word	0x20000158
 8006198:	20000098 	.word	0x20000098
 800619c:	200001a8 	.word	0x200001a8

080061a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <vTaskInternalSetTimeOutState+0x24>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <vTaskInternalSetTimeOutState+0x28>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	200001ac 	.word	0x200001ac
 80061c8:	20000198 	.word	0x20000198

080061cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10c      	bne.n	80061f6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	b672      	cpsid	i
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	b662      	cpsie	i
 80061f0:	613b      	str	r3, [r7, #16]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10c      	bne.n	8006216 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	b672      	cpsid	i
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	b662      	cpsie	i
 8006210:	60fb      	str	r3, [r7, #12]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006216:	f000 fa37 	bl	8006688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800621a:	4b1d      	ldr	r3, [pc, #116]	; (8006290 <xTaskCheckForTimeOut+0xc4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d102      	bne.n	800623a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006234:	2300      	movs	r3, #0
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	e023      	b.n	8006282 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b15      	ldr	r3, [pc, #84]	; (8006294 <xTaskCheckForTimeOut+0xc8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d007      	beq.n	8006256 <xTaskCheckForTimeOut+0x8a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	429a      	cmp	r2, r3
 800624e:	d302      	bcc.n	8006256 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	e015      	b.n	8006282 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	429a      	cmp	r2, r3
 800625e:	d20b      	bcs.n	8006278 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ff97 	bl	80061a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	e004      	b.n	8006282 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800627e:	2301      	movs	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006282:	f000 fa35 	bl	80066f0 <vPortExitCritical>

	return xReturn;
 8006286:	69fb      	ldr	r3, [r7, #28]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000198 	.word	0x20000198
 8006294:	200001ac 	.word	0x200001ac

08006298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800629c:	4b03      	ldr	r3, [pc, #12]	; (80062ac <vTaskMissedYield+0x14>)
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
}
 80062a2:	bf00      	nop
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	200001a8 	.word	0x200001a8

080062b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062b6:	2300      	movs	r3, #0
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	e00c      	b.n	80062d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4a12      	ldr	r2, [pc, #72]	; (8006310 <prvInitialiseTaskLists+0x60>)
 80062c8:	4413      	add	r3, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fecc 	bl	8005068 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3301      	adds	r3, #1
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d9ef      	bls.n	80062bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062dc:	480d      	ldr	r0, [pc, #52]	; (8006314 <prvInitialiseTaskLists+0x64>)
 80062de:	f7fe fec3 	bl	8005068 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062e2:	480d      	ldr	r0, [pc, #52]	; (8006318 <prvInitialiseTaskLists+0x68>)
 80062e4:	f7fe fec0 	bl	8005068 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062e8:	480c      	ldr	r0, [pc, #48]	; (800631c <prvInitialiseTaskLists+0x6c>)
 80062ea:	f7fe febd 	bl	8005068 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062ee:	480c      	ldr	r0, [pc, #48]	; (8006320 <prvInitialiseTaskLists+0x70>)
 80062f0:	f7fe feba 	bl	8005068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062f4:	480b      	ldr	r0, [pc, #44]	; (8006324 <prvInitialiseTaskLists+0x74>)
 80062f6:	f7fe feb7 	bl	8005068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062fa:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <prvInitialiseTaskLists+0x78>)
 80062fc:	4a05      	ldr	r2, [pc, #20]	; (8006314 <prvInitialiseTaskLists+0x64>)
 80062fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006300:	4b0a      	ldr	r3, [pc, #40]	; (800632c <prvInitialiseTaskLists+0x7c>)
 8006302:	4a05      	ldr	r2, [pc, #20]	; (8006318 <prvInitialiseTaskLists+0x68>)
 8006304:	601a      	str	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	2000009c 	.word	0x2000009c
 8006314:	20000128 	.word	0x20000128
 8006318:	2000013c 	.word	0x2000013c
 800631c:	20000158 	.word	0x20000158
 8006320:	2000016c 	.word	0x2000016c
 8006324:	20000180 	.word	0x20000180
 8006328:	20000150 	.word	0x20000150
 800632c:	20000154 	.word	0x20000154

08006330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <prvResetNextTaskUnblockTime+0x38>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006340:	4b0a      	ldr	r3, [pc, #40]	; (800636c <prvResetNextTaskUnblockTime+0x3c>)
 8006342:	f04f 32ff 	mov.w	r2, #4294967295
 8006346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006348:	e008      	b.n	800635c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800634a:	4b07      	ldr	r3, [pc, #28]	; (8006368 <prvResetNextTaskUnblockTime+0x38>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4a04      	ldr	r2, [pc, #16]	; (800636c <prvResetNextTaskUnblockTime+0x3c>)
 800635a:	6013      	str	r3, [r2, #0]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	20000150 	.word	0x20000150
 800636c:	200001b4 	.word	0x200001b4

08006370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <xTaskGetSchedulerState+0x34>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800637e:	2301      	movs	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	e008      	b.n	8006396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006384:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <xTaskGetSchedulerState+0x38>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800638c:	2302      	movs	r3, #2
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e001      	b.n	8006396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006392:	2300      	movs	r3, #0
 8006394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006396:	687b      	ldr	r3, [r7, #4]
	}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	200001a0 	.word	0x200001a0
 80063a8:	200001b8 	.word	0x200001b8

080063ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d072      	beq.n	80064a8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063c2:	4b3c      	ldr	r3, [pc, #240]	; (80064b4 <xTaskPriorityDisinherit+0x108>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d00c      	beq.n	80063e6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	b672      	cpsid	i
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	b662      	cpsie	i
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10c      	bne.n	8006408 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	b672      	cpsid	i
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	b662      	cpsie	i
 8006402:	60bb      	str	r3, [r7, #8]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800640c:	1e5a      	subs	r2, r3, #1
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	429a      	cmp	r2, r3
 800641c:	d044      	beq.n	80064a8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006422:	2b00      	cmp	r3, #0
 8006424:	d140      	bne.n	80064a8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	3304      	adds	r3, #4
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fea6 	bl	800517c <uxListRemove>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d115      	bne.n	8006462 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643a:	491f      	ldr	r1, [pc, #124]	; (80064b8 <xTaskPriorityDisinherit+0x10c>)
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <xTaskPriorityDisinherit+0xb6>
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	2201      	movs	r2, #1
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43da      	mvns	r2, r3
 8006458:	4b18      	ldr	r3, [pc, #96]	; (80064bc <xTaskPriorityDisinherit+0x110>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4013      	ands	r3, r2
 800645e:	4a17      	ldr	r2, [pc, #92]	; (80064bc <xTaskPriorityDisinherit+0x110>)
 8006460:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	f1c3 0207 	rsb	r2, r3, #7
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	2201      	movs	r2, #1
 800647c:	409a      	lsls	r2, r3
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <xTaskPriorityDisinherit+0x110>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4313      	orrs	r3, r2
 8006484:	4a0d      	ldr	r2, [pc, #52]	; (80064bc <xTaskPriorityDisinherit+0x110>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a08      	ldr	r2, [pc, #32]	; (80064b8 <xTaskPriorityDisinherit+0x10c>)
 8006496:	441a      	add	r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe fe0f 	bl	80050c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064a8:	697b      	ldr	r3, [r7, #20]
	}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000098 	.word	0x20000098
 80064b8:	2000009c 	.word	0x2000009c
 80064bc:	2000019c 	.word	0x2000019c

080064c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064ca:	4b29      	ldr	r3, [pc, #164]	; (8006570 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d0:	4b28      	ldr	r3, [pc, #160]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fe50 	bl	800517c <uxListRemove>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064e2:	4b24      	ldr	r3, [pc, #144]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	2201      	movs	r2, #1
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	43da      	mvns	r2, r3
 80064f0:	4b21      	ldr	r3, [pc, #132]	; (8006578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4013      	ands	r3, r2
 80064f6:	4a20      	ldr	r2, [pc, #128]	; (8006578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d10a      	bne.n	8006518 <prvAddCurrentTaskToDelayedList+0x58>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006508:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	481a      	ldr	r0, [pc, #104]	; (800657c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006512:	f7fe fdd6 	bl	80050c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006516:	e026      	b.n	8006566 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	429a      	cmp	r2, r3
 800652e:	d209      	bcs.n	8006544 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3304      	adds	r3, #4
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f7fe fde4 	bl	800510a <vListInsert>
}
 8006542:	e010      	b.n	8006566 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006544:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3304      	adds	r3, #4
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fe fdda 	bl	800510a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006556:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	429a      	cmp	r2, r3
 800655e:	d202      	bcs.n	8006566 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006560:	4a09      	ldr	r2, [pc, #36]	; (8006588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6013      	str	r3, [r2, #0]
}
 8006566:	bf00      	nop
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000198 	.word	0x20000198
 8006574:	20000098 	.word	0x20000098
 8006578:	2000019c 	.word	0x2000019c
 800657c:	20000180 	.word	0x20000180
 8006580:	20000154 	.word	0x20000154
 8006584:	20000150 	.word	0x20000150
 8006588:	200001b4 	.word	0x200001b4

0800658c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3b04      	subs	r3, #4
 800659c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b04      	subs	r3, #4
 80065aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3b04      	subs	r3, #4
 80065ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065bc:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <pxPortInitialiseStack+0x64>)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3b14      	subs	r3, #20
 80065c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f06f 0202 	mvn.w	r2, #2
 80065da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3b20      	subs	r3, #32
 80065e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	080065f5 	.word	0x080065f5

080065f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065fe:	4b14      	ldr	r3, [pc, #80]	; (8006650 <prvTaskExitError+0x5c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d00c      	beq.n	8006622 <prvTaskExitError+0x2e>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	b672      	cpsid	i
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	b662      	cpsie	i
 800661c:	60fb      	str	r3, [r7, #12]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <prvTaskExitError+0x2c>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	b672      	cpsid	i
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	b662      	cpsie	i
 8006636:	60bb      	str	r3, [r7, #8]
}
 8006638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800663a:	bf00      	nop
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0fc      	beq.n	800663c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	2000000c 	.word	0x2000000c
	...

08006660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <pxCurrentTCBConst2>)
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	6808      	ldr	r0, [r1, #0]
 8006666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	f380 8809 	msr	PSP, r0
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8811 	msr	BASEPRI, r0
 800667a:	4770      	bx	lr
 800667c:	f3af 8000 	nop.w

08006680 <pxCurrentTCBConst2>:
 8006680:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	b672      	cpsid	i
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	b662      	cpsie	i
 80066a2:	607b      	str	r3, [r7, #4]
}
 80066a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066a6:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <vPortEnterCritical+0x60>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3301      	adds	r3, #1
 80066ac:	4a0e      	ldr	r2, [pc, #56]	; (80066e8 <vPortEnterCritical+0x60>)
 80066ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066b0:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <vPortEnterCritical+0x60>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d111      	bne.n	80066dc <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066b8:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <vPortEnterCritical+0x64>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00c      	beq.n	80066dc <vPortEnterCritical+0x54>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	b672      	cpsid	i
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	b662      	cpsie	i
 80066d6:	603b      	str	r3, [r7, #0]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <vPortEnterCritical+0x52>
	}
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	2000000c 	.word	0x2000000c
 80066ec:	e000ed04 	.word	0xe000ed04

080066f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066f6:	4b13      	ldr	r3, [pc, #76]	; (8006744 <vPortExitCritical+0x54>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10c      	bne.n	8006718 <vPortExitCritical+0x28>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	b672      	cpsid	i
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	b662      	cpsie	i
 8006712:	607b      	str	r3, [r7, #4]
}
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <vPortExitCritical+0x54>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <vPortExitCritical+0x54>)
 8006720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <vPortExitCritical+0x54>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d105      	bne.n	8006736 <vPortExitCritical+0x46>
 800672a:	2300      	movs	r3, #0
 800672c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	2000000c 	.word	0x2000000c
	...

08006750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006750:	f3ef 8009 	mrs	r0, PSP
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <pxCurrentTCBConst>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	f01e 0f10 	tst.w	lr, #16
 8006760:	bf08      	it	eq
 8006762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	6010      	str	r0, [r2, #0]
 800676c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006774:	b672      	cpsid	i
 8006776:	f380 8811 	msr	BASEPRI, r0
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	b662      	cpsie	i
 8006784:	f7ff fc24 	bl	8005fd0 <vTaskSwitchContext>
 8006788:	f04f 0000 	mov.w	r0, #0
 800678c:	f380 8811 	msr	BASEPRI, r0
 8006790:	bc09      	pop	{r0, r3}
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	6808      	ldr	r0, [r1, #0]
 8006796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	f01e 0f10 	tst.w	lr, #16
 800679e:	bf08      	it	eq
 80067a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067a4:	f380 8809 	msr	PSP, r0
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop

080067b0 <pxCurrentTCBConst>:
 80067b0:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop

080067b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	b672      	cpsid	i
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	b662      	cpsie	i
 80067d2:	607b      	str	r3, [r7, #4]
}
 80067d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067d6:	f7ff fb41 	bl	8005e5c <xTaskIncrementTick>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <xPortSysTickHandler+0x44>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	2300      	movs	r3, #0
 80067ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f383 8811 	msr	BASEPRI, r3
}
 80067f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	; 0x28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006808:	2300      	movs	r3, #0
 800680a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800680c:	f7ff fa7a 	bl	8005d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006810:	4b5b      	ldr	r3, [pc, #364]	; (8006980 <pvPortMalloc+0x180>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006818:	f000 f91a 	bl	8006a50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800681c:	4b59      	ldr	r3, [pc, #356]	; (8006984 <pvPortMalloc+0x184>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4013      	ands	r3, r2
 8006824:	2b00      	cmp	r3, #0
 8006826:	f040 8092 	bne.w	800694e <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01f      	beq.n	8006870 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006830:	2208      	movs	r2, #8
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f023 0307 	bic.w	r3, r3, #7
 8006848:	3308      	adds	r3, #8
 800684a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00c      	beq.n	8006870 <pvPortMalloc+0x70>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	b672      	cpsid	i
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	b662      	cpsie	i
 800686a:	617b      	str	r3, [r7, #20]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d06b      	beq.n	800694e <pvPortMalloc+0x14e>
 8006876:	4b44      	ldr	r3, [pc, #272]	; (8006988 <pvPortMalloc+0x188>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	429a      	cmp	r2, r3
 800687e:	d866      	bhi.n	800694e <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006880:	4b42      	ldr	r3, [pc, #264]	; (800698c <pvPortMalloc+0x18c>)
 8006882:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006884:	4b41      	ldr	r3, [pc, #260]	; (800698c <pvPortMalloc+0x18c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800688a:	e004      	b.n	8006896 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d903      	bls.n	80068a8 <pvPortMalloc+0xa8>
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f1      	bne.n	800688c <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068a8:	4b35      	ldr	r3, [pc, #212]	; (8006980 <pvPortMalloc+0x180>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d04d      	beq.n	800694e <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2208      	movs	r2, #8
 80068b8:	4413      	add	r3, r2
 80068ba:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	2308      	movs	r3, #8
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d921      	bls.n	8006918 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4413      	add	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00c      	beq.n	8006900 <pvPortMalloc+0x100>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	b672      	cpsid	i
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	b662      	cpsie	i
 80068fa:	613b      	str	r3, [r7, #16]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	1ad2      	subs	r2, r2, r3
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006912:	69b8      	ldr	r0, [r7, #24]
 8006914:	f000 f8fe 	bl	8006b14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <pvPortMalloc+0x188>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	4a19      	ldr	r2, [pc, #100]	; (8006988 <pvPortMalloc+0x188>)
 8006924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <pvPortMalloc+0x188>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b19      	ldr	r3, [pc, #100]	; (8006990 <pvPortMalloc+0x190>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d203      	bcs.n	800693a <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <pvPortMalloc+0x188>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a16      	ldr	r2, [pc, #88]	; (8006990 <pvPortMalloc+0x190>)
 8006938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	4b11      	ldr	r3, [pc, #68]	; (8006984 <pvPortMalloc+0x184>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	431a      	orrs	r2, r3
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800694e:	f7ff f9e7 	bl	8005d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00c      	beq.n	8006976 <pvPortMalloc+0x176>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	b672      	cpsid	i
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	b662      	cpsie	i
 8006970:	60fb      	str	r3, [r7, #12]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <pvPortMalloc+0x174>
	return pvReturn;
 8006976:	69fb      	ldr	r3, [r7, #28]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3728      	adds	r7, #40	; 0x28
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20003dc4 	.word	0x20003dc4
 8006984:	20003dd0 	.word	0x20003dd0
 8006988:	20003dc8 	.word	0x20003dc8
 800698c:	20003dbc 	.word	0x20003dbc
 8006990:	20003dcc 	.word	0x20003dcc

08006994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d04c      	beq.n	8006a40 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069a6:	2308      	movs	r3, #8
 80069a8:	425b      	negs	r3, r3
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4413      	add	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <vPortFree+0xb4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4013      	ands	r3, r2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10c      	bne.n	80069dc <vPortFree+0x48>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	b672      	cpsid	i
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	b662      	cpsie	i
 80069d6:	60fb      	str	r3, [r7, #12]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00c      	beq.n	80069fe <vPortFree+0x6a>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	b672      	cpsid	i
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	b662      	cpsie	i
 80069f8:	60bb      	str	r3, [r7, #8]
}
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <vPortFree+0xb4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d019      	beq.n	8006a40 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d115      	bne.n	8006a40 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <vPortFree+0xb4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	401a      	ands	r2, r3
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a24:	f7ff f96e 	bl	8005d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <vPortFree+0xb8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4413      	add	r3, r2
 8006a32:	4a06      	ldr	r2, [pc, #24]	; (8006a4c <vPortFree+0xb8>)
 8006a34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a36:	6938      	ldr	r0, [r7, #16]
 8006a38:	f000 f86c 	bl	8006b14 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a3c:	f7ff f970 	bl	8005d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a40:	bf00      	nop
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20003dd0 	.word	0x20003dd0
 8006a4c:	20003dc8 	.word	0x20003dc8

08006a50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a56:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a5c:	4b27      	ldr	r3, [pc, #156]	; (8006afc <prvHeapInit+0xac>)
 8006a5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00c      	beq.n	8006a84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3307      	adds	r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0307 	bic.w	r3, r3, #7
 8006a76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <prvHeapInit+0xac>)
 8006a80:	4413      	add	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a88:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <prvHeapInit+0xb0>)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a8e:	4b1c      	ldr	r3, [pc, #112]	; (8006b00 <prvHeapInit+0xb0>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	4413      	add	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1a9b      	subs	r3, r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <prvHeapInit+0xb4>)
 8006ab0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ab2:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <prvHeapInit+0xb4>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aba:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <prvHeapInit+0xb4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	1ad2      	subs	r2, r2, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <prvHeapInit+0xb4>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <prvHeapInit+0xb8>)
 8006ade:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <prvHeapInit+0xbc>)
 8006ae6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ae8:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <prvHeapInit+0xc0>)
 8006aea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006aee:	601a      	str	r2, [r3, #0]
}
 8006af0:	bf00      	nop
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	200001bc 	.word	0x200001bc
 8006b00:	20003dbc 	.word	0x20003dbc
 8006b04:	20003dc4 	.word	0x20003dc4
 8006b08:	20003dcc 	.word	0x20003dcc
 8006b0c:	20003dc8 	.word	0x20003dc8
 8006b10:	20003dd0 	.word	0x20003dd0

08006b14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b1c:	4b28      	ldr	r3, [pc, #160]	; (8006bc0 <prvInsertBlockIntoFreeList+0xac>)
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	e002      	b.n	8006b28 <prvInsertBlockIntoFreeList+0x14>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d8f7      	bhi.n	8006b22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d108      	bne.n	8006b56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	441a      	add	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	441a      	add	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d118      	bne.n	8006b9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <prvInsertBlockIntoFreeList+0xb0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d00d      	beq.n	8006b92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	441a      	add	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	e008      	b.n	8006ba4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b92:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <prvInsertBlockIntoFreeList+0xb0>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e003      	b.n	8006ba4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d002      	beq.n	8006bb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bb2:	bf00      	nop
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	20003dbc 	.word	0x20003dbc
 8006bc4:	20003dc4 	.word	0x20003dc4

08006bc8 <__errno>:
 8006bc8:	4b01      	ldr	r3, [pc, #4]	; (8006bd0 <__errno+0x8>)
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20000010 	.word	0x20000010

08006bd4 <__libc_init_array>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	4d0d      	ldr	r5, [pc, #52]	; (8006c0c <__libc_init_array+0x38>)
 8006bd8:	4c0d      	ldr	r4, [pc, #52]	; (8006c10 <__libc_init_array+0x3c>)
 8006bda:	1b64      	subs	r4, r4, r5
 8006bdc:	10a4      	asrs	r4, r4, #2
 8006bde:	2600      	movs	r6, #0
 8006be0:	42a6      	cmp	r6, r4
 8006be2:	d109      	bne.n	8006bf8 <__libc_init_array+0x24>
 8006be4:	4d0b      	ldr	r5, [pc, #44]	; (8006c14 <__libc_init_array+0x40>)
 8006be6:	4c0c      	ldr	r4, [pc, #48]	; (8006c18 <__libc_init_array+0x44>)
 8006be8:	f000 fc4e 	bl	8007488 <_init>
 8006bec:	1b64      	subs	r4, r4, r5
 8006bee:	10a4      	asrs	r4, r4, #2
 8006bf0:	2600      	movs	r6, #0
 8006bf2:	42a6      	cmp	r6, r4
 8006bf4:	d105      	bne.n	8006c02 <__libc_init_array+0x2e>
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bfc:	4798      	blx	r3
 8006bfe:	3601      	adds	r6, #1
 8006c00:	e7ee      	b.n	8006be0 <__libc_init_array+0xc>
 8006c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c06:	4798      	blx	r3
 8006c08:	3601      	adds	r6, #1
 8006c0a:	e7f2      	b.n	8006bf2 <__libc_init_array+0x1e>
 8006c0c:	080075cc 	.word	0x080075cc
 8006c10:	080075cc 	.word	0x080075cc
 8006c14:	080075cc 	.word	0x080075cc
 8006c18:	080075d0 	.word	0x080075d0

08006c1c <memcpy>:
 8006c1c:	440a      	add	r2, r1
 8006c1e:	4291      	cmp	r1, r2
 8006c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c24:	d100      	bne.n	8006c28 <memcpy+0xc>
 8006c26:	4770      	bx	lr
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c32:	4291      	cmp	r1, r2
 8006c34:	d1f9      	bne.n	8006c2a <memcpy+0xe>
 8006c36:	bd10      	pop	{r4, pc}

08006c38 <memset>:
 8006c38:	4402      	add	r2, r0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d100      	bne.n	8006c42 <memset+0xa>
 8006c40:	4770      	bx	lr
 8006c42:	f803 1b01 	strb.w	r1, [r3], #1
 8006c46:	e7f9      	b.n	8006c3c <memset+0x4>

08006c48 <siprintf>:
 8006c48:	b40e      	push	{r1, r2, r3}
 8006c4a:	b500      	push	{lr}
 8006c4c:	b09c      	sub	sp, #112	; 0x70
 8006c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c50:	9002      	str	r0, [sp, #8]
 8006c52:	9006      	str	r0, [sp, #24]
 8006c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c58:	4809      	ldr	r0, [pc, #36]	; (8006c80 <siprintf+0x38>)
 8006c5a:	9107      	str	r1, [sp, #28]
 8006c5c:	9104      	str	r1, [sp, #16]
 8006c5e:	4909      	ldr	r1, [pc, #36]	; (8006c84 <siprintf+0x3c>)
 8006c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c64:	9105      	str	r1, [sp, #20]
 8006c66:	6800      	ldr	r0, [r0, #0]
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	a902      	add	r1, sp, #8
 8006c6c:	f000 f868 	bl	8006d40 <_svfiprintf_r>
 8006c70:	9b02      	ldr	r3, [sp, #8]
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	b01c      	add	sp, #112	; 0x70
 8006c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c7c:	b003      	add	sp, #12
 8006c7e:	4770      	bx	lr
 8006c80:	20000010 	.word	0x20000010
 8006c84:	ffff0208 	.word	0xffff0208

08006c88 <__ssputs_r>:
 8006c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c8c:	688e      	ldr	r6, [r1, #8]
 8006c8e:	429e      	cmp	r6, r3
 8006c90:	4682      	mov	sl, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	4690      	mov	r8, r2
 8006c96:	461f      	mov	r7, r3
 8006c98:	d838      	bhi.n	8006d0c <__ssputs_r+0x84>
 8006c9a:	898a      	ldrh	r2, [r1, #12]
 8006c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ca0:	d032      	beq.n	8006d08 <__ssputs_r+0x80>
 8006ca2:	6825      	ldr	r5, [r4, #0]
 8006ca4:	6909      	ldr	r1, [r1, #16]
 8006ca6:	eba5 0901 	sub.w	r9, r5, r1
 8006caa:	6965      	ldr	r5, [r4, #20]
 8006cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	444b      	add	r3, r9
 8006cb8:	106d      	asrs	r5, r5, #1
 8006cba:	429d      	cmp	r5, r3
 8006cbc:	bf38      	it	cc
 8006cbe:	461d      	movcc	r5, r3
 8006cc0:	0553      	lsls	r3, r2, #21
 8006cc2:	d531      	bpl.n	8006d28 <__ssputs_r+0xa0>
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f000 fb39 	bl	800733c <_malloc_r>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	b950      	cbnz	r0, 8006ce4 <__ssputs_r+0x5c>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	f8ca 3000 	str.w	r3, [sl]
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce4:	6921      	ldr	r1, [r4, #16]
 8006ce6:	464a      	mov	r2, r9
 8006ce8:	f7ff ff98 	bl	8006c1c <memcpy>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	6126      	str	r6, [r4, #16]
 8006cfa:	6165      	str	r5, [r4, #20]
 8006cfc:	444e      	add	r6, r9
 8006cfe:	eba5 0509 	sub.w	r5, r5, r9
 8006d02:	6026      	str	r6, [r4, #0]
 8006d04:	60a5      	str	r5, [r4, #8]
 8006d06:	463e      	mov	r6, r7
 8006d08:	42be      	cmp	r6, r7
 8006d0a:	d900      	bls.n	8006d0e <__ssputs_r+0x86>
 8006d0c:	463e      	mov	r6, r7
 8006d0e:	4632      	mov	r2, r6
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	4641      	mov	r1, r8
 8006d14:	f000 faa8 	bl	8007268 <memmove>
 8006d18:	68a3      	ldr	r3, [r4, #8]
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	1b9b      	subs	r3, r3, r6
 8006d1e:	4432      	add	r2, r6
 8006d20:	60a3      	str	r3, [r4, #8]
 8006d22:	6022      	str	r2, [r4, #0]
 8006d24:	2000      	movs	r0, #0
 8006d26:	e7db      	b.n	8006ce0 <__ssputs_r+0x58>
 8006d28:	462a      	mov	r2, r5
 8006d2a:	f000 fb61 	bl	80073f0 <_realloc_r>
 8006d2e:	4606      	mov	r6, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d1e1      	bne.n	8006cf8 <__ssputs_r+0x70>
 8006d34:	6921      	ldr	r1, [r4, #16]
 8006d36:	4650      	mov	r0, sl
 8006d38:	f000 fab0 	bl	800729c <_free_r>
 8006d3c:	e7c7      	b.n	8006cce <__ssputs_r+0x46>
	...

08006d40 <_svfiprintf_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	4698      	mov	r8, r3
 8006d46:	898b      	ldrh	r3, [r1, #12]
 8006d48:	061b      	lsls	r3, r3, #24
 8006d4a:	b09d      	sub	sp, #116	; 0x74
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	460d      	mov	r5, r1
 8006d50:	4614      	mov	r4, r2
 8006d52:	d50e      	bpl.n	8006d72 <_svfiprintf_r+0x32>
 8006d54:	690b      	ldr	r3, [r1, #16]
 8006d56:	b963      	cbnz	r3, 8006d72 <_svfiprintf_r+0x32>
 8006d58:	2140      	movs	r1, #64	; 0x40
 8006d5a:	f000 faef 	bl	800733c <_malloc_r>
 8006d5e:	6028      	str	r0, [r5, #0]
 8006d60:	6128      	str	r0, [r5, #16]
 8006d62:	b920      	cbnz	r0, 8006d6e <_svfiprintf_r+0x2e>
 8006d64:	230c      	movs	r3, #12
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	e0d1      	b.n	8006f12 <_svfiprintf_r+0x1d2>
 8006d6e:	2340      	movs	r3, #64	; 0x40
 8006d70:	616b      	str	r3, [r5, #20]
 8006d72:	2300      	movs	r3, #0
 8006d74:	9309      	str	r3, [sp, #36]	; 0x24
 8006d76:	2320      	movs	r3, #32
 8006d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d80:	2330      	movs	r3, #48	; 0x30
 8006d82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f2c <_svfiprintf_r+0x1ec>
 8006d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d8a:	f04f 0901 	mov.w	r9, #1
 8006d8e:	4623      	mov	r3, r4
 8006d90:	469a      	mov	sl, r3
 8006d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d96:	b10a      	cbz	r2, 8006d9c <_svfiprintf_r+0x5c>
 8006d98:	2a25      	cmp	r2, #37	; 0x25
 8006d9a:	d1f9      	bne.n	8006d90 <_svfiprintf_r+0x50>
 8006d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006da0:	d00b      	beq.n	8006dba <_svfiprintf_r+0x7a>
 8006da2:	465b      	mov	r3, fp
 8006da4:	4622      	mov	r2, r4
 8006da6:	4629      	mov	r1, r5
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff ff6d 	bl	8006c88 <__ssputs_r>
 8006dae:	3001      	adds	r0, #1
 8006db0:	f000 80aa 	beq.w	8006f08 <_svfiprintf_r+0x1c8>
 8006db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db6:	445a      	add	r2, fp
 8006db8:	9209      	str	r2, [sp, #36]	; 0x24
 8006dba:	f89a 3000 	ldrb.w	r3, [sl]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80a2 	beq.w	8006f08 <_svfiprintf_r+0x1c8>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dce:	f10a 0a01 	add.w	sl, sl, #1
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	9307      	str	r3, [sp, #28]
 8006dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dda:	931a      	str	r3, [sp, #104]	; 0x68
 8006ddc:	4654      	mov	r4, sl
 8006dde:	2205      	movs	r2, #5
 8006de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de4:	4851      	ldr	r0, [pc, #324]	; (8006f2c <_svfiprintf_r+0x1ec>)
 8006de6:	f7f9 fa2b 	bl	8000240 <memchr>
 8006dea:	9a04      	ldr	r2, [sp, #16]
 8006dec:	b9d8      	cbnz	r0, 8006e26 <_svfiprintf_r+0xe6>
 8006dee:	06d0      	lsls	r0, r2, #27
 8006df0:	bf44      	itt	mi
 8006df2:	2320      	movmi	r3, #32
 8006df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df8:	0711      	lsls	r1, r2, #28
 8006dfa:	bf44      	itt	mi
 8006dfc:	232b      	movmi	r3, #43	; 0x2b
 8006dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e02:	f89a 3000 	ldrb.w	r3, [sl]
 8006e06:	2b2a      	cmp	r3, #42	; 0x2a
 8006e08:	d015      	beq.n	8006e36 <_svfiprintf_r+0xf6>
 8006e0a:	9a07      	ldr	r2, [sp, #28]
 8006e0c:	4654      	mov	r4, sl
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f04f 0c0a 	mov.w	ip, #10
 8006e14:	4621      	mov	r1, r4
 8006e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e1a:	3b30      	subs	r3, #48	; 0x30
 8006e1c:	2b09      	cmp	r3, #9
 8006e1e:	d94e      	bls.n	8006ebe <_svfiprintf_r+0x17e>
 8006e20:	b1b0      	cbz	r0, 8006e50 <_svfiprintf_r+0x110>
 8006e22:	9207      	str	r2, [sp, #28]
 8006e24:	e014      	b.n	8006e50 <_svfiprintf_r+0x110>
 8006e26:	eba0 0308 	sub.w	r3, r0, r8
 8006e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	46a2      	mov	sl, r4
 8006e34:	e7d2      	b.n	8006ddc <_svfiprintf_r+0x9c>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	1d19      	adds	r1, r3, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	9103      	str	r1, [sp, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bfbb      	ittet	lt
 8006e42:	425b      	neglt	r3, r3
 8006e44:	f042 0202 	orrlt.w	r2, r2, #2
 8006e48:	9307      	strge	r3, [sp, #28]
 8006e4a:	9307      	strlt	r3, [sp, #28]
 8006e4c:	bfb8      	it	lt
 8006e4e:	9204      	strlt	r2, [sp, #16]
 8006e50:	7823      	ldrb	r3, [r4, #0]
 8006e52:	2b2e      	cmp	r3, #46	; 0x2e
 8006e54:	d10c      	bne.n	8006e70 <_svfiprintf_r+0x130>
 8006e56:	7863      	ldrb	r3, [r4, #1]
 8006e58:	2b2a      	cmp	r3, #42	; 0x2a
 8006e5a:	d135      	bne.n	8006ec8 <_svfiprintf_r+0x188>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	1d1a      	adds	r2, r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	9203      	str	r2, [sp, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bfb8      	it	lt
 8006e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e6c:	3402      	adds	r4, #2
 8006e6e:	9305      	str	r3, [sp, #20]
 8006e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f3c <_svfiprintf_r+0x1fc>
 8006e74:	7821      	ldrb	r1, [r4, #0]
 8006e76:	2203      	movs	r2, #3
 8006e78:	4650      	mov	r0, sl
 8006e7a:	f7f9 f9e1 	bl	8000240 <memchr>
 8006e7e:	b140      	cbz	r0, 8006e92 <_svfiprintf_r+0x152>
 8006e80:	2340      	movs	r3, #64	; 0x40
 8006e82:	eba0 000a 	sub.w	r0, r0, sl
 8006e86:	fa03 f000 	lsl.w	r0, r3, r0
 8006e8a:	9b04      	ldr	r3, [sp, #16]
 8006e8c:	4303      	orrs	r3, r0
 8006e8e:	3401      	adds	r4, #1
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e96:	4826      	ldr	r0, [pc, #152]	; (8006f30 <_svfiprintf_r+0x1f0>)
 8006e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e9c:	2206      	movs	r2, #6
 8006e9e:	f7f9 f9cf 	bl	8000240 <memchr>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d038      	beq.n	8006f18 <_svfiprintf_r+0x1d8>
 8006ea6:	4b23      	ldr	r3, [pc, #140]	; (8006f34 <_svfiprintf_r+0x1f4>)
 8006ea8:	bb1b      	cbnz	r3, 8006ef2 <_svfiprintf_r+0x1b2>
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	3307      	adds	r3, #7
 8006eae:	f023 0307 	bic.w	r3, r3, #7
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	9303      	str	r3, [sp, #12]
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb8:	4433      	add	r3, r6
 8006eba:	9309      	str	r3, [sp, #36]	; 0x24
 8006ebc:	e767      	b.n	8006d8e <_svfiprintf_r+0x4e>
 8006ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	e7a5      	b.n	8006e14 <_svfiprintf_r+0xd4>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	3401      	adds	r4, #1
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	f04f 0c0a 	mov.w	ip, #10
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eda:	3a30      	subs	r2, #48	; 0x30
 8006edc:	2a09      	cmp	r2, #9
 8006ede:	d903      	bls.n	8006ee8 <_svfiprintf_r+0x1a8>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0c5      	beq.n	8006e70 <_svfiprintf_r+0x130>
 8006ee4:	9105      	str	r1, [sp, #20]
 8006ee6:	e7c3      	b.n	8006e70 <_svfiprintf_r+0x130>
 8006ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eec:	4604      	mov	r4, r0
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e7f0      	b.n	8006ed4 <_svfiprintf_r+0x194>
 8006ef2:	ab03      	add	r3, sp, #12
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <_svfiprintf_r+0x1f8>)
 8006efa:	a904      	add	r1, sp, #16
 8006efc:	4638      	mov	r0, r7
 8006efe:	f3af 8000 	nop.w
 8006f02:	1c42      	adds	r2, r0, #1
 8006f04:	4606      	mov	r6, r0
 8006f06:	d1d6      	bne.n	8006eb6 <_svfiprintf_r+0x176>
 8006f08:	89ab      	ldrh	r3, [r5, #12]
 8006f0a:	065b      	lsls	r3, r3, #25
 8006f0c:	f53f af2c 	bmi.w	8006d68 <_svfiprintf_r+0x28>
 8006f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f12:	b01d      	add	sp, #116	; 0x74
 8006f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f18:	ab03      	add	r3, sp, #12
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <_svfiprintf_r+0x1f8>)
 8006f20:	a904      	add	r1, sp, #16
 8006f22:	4638      	mov	r0, r7
 8006f24:	f000 f87a 	bl	800701c <_printf_i>
 8006f28:	e7eb      	b.n	8006f02 <_svfiprintf_r+0x1c2>
 8006f2a:	bf00      	nop
 8006f2c:	08007591 	.word	0x08007591
 8006f30:	0800759b 	.word	0x0800759b
 8006f34:	00000000 	.word	0x00000000
 8006f38:	08006c89 	.word	0x08006c89
 8006f3c:	08007597 	.word	0x08007597

08006f40 <_printf_common>:
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	4616      	mov	r6, r2
 8006f46:	4699      	mov	r9, r3
 8006f48:	688a      	ldr	r2, [r1, #8]
 8006f4a:	690b      	ldr	r3, [r1, #16]
 8006f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f50:	4293      	cmp	r3, r2
 8006f52:	bfb8      	it	lt
 8006f54:	4613      	movlt	r3, r2
 8006f56:	6033      	str	r3, [r6, #0]
 8006f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b10a      	cbz	r2, 8006f66 <_printf_common+0x26>
 8006f62:	3301      	adds	r3, #1
 8006f64:	6033      	str	r3, [r6, #0]
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	0699      	lsls	r1, r3, #26
 8006f6a:	bf42      	ittt	mi
 8006f6c:	6833      	ldrmi	r3, [r6, #0]
 8006f6e:	3302      	addmi	r3, #2
 8006f70:	6033      	strmi	r3, [r6, #0]
 8006f72:	6825      	ldr	r5, [r4, #0]
 8006f74:	f015 0506 	ands.w	r5, r5, #6
 8006f78:	d106      	bne.n	8006f88 <_printf_common+0x48>
 8006f7a:	f104 0a19 	add.w	sl, r4, #25
 8006f7e:	68e3      	ldr	r3, [r4, #12]
 8006f80:	6832      	ldr	r2, [r6, #0]
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	42ab      	cmp	r3, r5
 8006f86:	dc26      	bgt.n	8006fd6 <_printf_common+0x96>
 8006f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f8c:	1e13      	subs	r3, r2, #0
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	bf18      	it	ne
 8006f92:	2301      	movne	r3, #1
 8006f94:	0692      	lsls	r2, r2, #26
 8006f96:	d42b      	bmi.n	8006ff0 <_printf_common+0xb0>
 8006f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	47c0      	blx	r8
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d01e      	beq.n	8006fe4 <_printf_common+0xa4>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	68e5      	ldr	r5, [r4, #12]
 8006faa:	6832      	ldr	r2, [r6, #0]
 8006fac:	f003 0306 	and.w	r3, r3, #6
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	bf08      	it	eq
 8006fb4:	1aad      	subeq	r5, r5, r2
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	6922      	ldr	r2, [r4, #16]
 8006fba:	bf0c      	ite	eq
 8006fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fc0:	2500      	movne	r5, #0
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	bfc4      	itt	gt
 8006fc6:	1a9b      	subgt	r3, r3, r2
 8006fc8:	18ed      	addgt	r5, r5, r3
 8006fca:	2600      	movs	r6, #0
 8006fcc:	341a      	adds	r4, #26
 8006fce:	42b5      	cmp	r5, r6
 8006fd0:	d11a      	bne.n	8007008 <_printf_common+0xc8>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e008      	b.n	8006fe8 <_printf_common+0xa8>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4649      	mov	r1, r9
 8006fdc:	4638      	mov	r0, r7
 8006fde:	47c0      	blx	r8
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d103      	bne.n	8006fec <_printf_common+0xac>
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fec:	3501      	adds	r5, #1
 8006fee:	e7c6      	b.n	8006f7e <_printf_common+0x3e>
 8006ff0:	18e1      	adds	r1, r4, r3
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	2030      	movs	r0, #48	; 0x30
 8006ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ffa:	4422      	add	r2, r4
 8006ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007004:	3302      	adds	r3, #2
 8007006:	e7c7      	b.n	8006f98 <_printf_common+0x58>
 8007008:	2301      	movs	r3, #1
 800700a:	4622      	mov	r2, r4
 800700c:	4649      	mov	r1, r9
 800700e:	4638      	mov	r0, r7
 8007010:	47c0      	blx	r8
 8007012:	3001      	adds	r0, #1
 8007014:	d0e6      	beq.n	8006fe4 <_printf_common+0xa4>
 8007016:	3601      	adds	r6, #1
 8007018:	e7d9      	b.n	8006fce <_printf_common+0x8e>
	...

0800701c <_printf_i>:
 800701c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	460c      	mov	r4, r1
 8007022:	4691      	mov	r9, r2
 8007024:	7e27      	ldrb	r7, [r4, #24]
 8007026:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007028:	2f78      	cmp	r7, #120	; 0x78
 800702a:	4680      	mov	r8, r0
 800702c:	469a      	mov	sl, r3
 800702e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007032:	d807      	bhi.n	8007044 <_printf_i+0x28>
 8007034:	2f62      	cmp	r7, #98	; 0x62
 8007036:	d80a      	bhi.n	800704e <_printf_i+0x32>
 8007038:	2f00      	cmp	r7, #0
 800703a:	f000 80d8 	beq.w	80071ee <_printf_i+0x1d2>
 800703e:	2f58      	cmp	r7, #88	; 0x58
 8007040:	f000 80a3 	beq.w	800718a <_printf_i+0x16e>
 8007044:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800704c:	e03a      	b.n	80070c4 <_printf_i+0xa8>
 800704e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007052:	2b15      	cmp	r3, #21
 8007054:	d8f6      	bhi.n	8007044 <_printf_i+0x28>
 8007056:	a001      	add	r0, pc, #4	; (adr r0, 800705c <_printf_i+0x40>)
 8007058:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800705c:	080070b5 	.word	0x080070b5
 8007060:	080070c9 	.word	0x080070c9
 8007064:	08007045 	.word	0x08007045
 8007068:	08007045 	.word	0x08007045
 800706c:	08007045 	.word	0x08007045
 8007070:	08007045 	.word	0x08007045
 8007074:	080070c9 	.word	0x080070c9
 8007078:	08007045 	.word	0x08007045
 800707c:	08007045 	.word	0x08007045
 8007080:	08007045 	.word	0x08007045
 8007084:	08007045 	.word	0x08007045
 8007088:	080071d5 	.word	0x080071d5
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080071b7 	.word	0x080071b7
 8007094:	08007045 	.word	0x08007045
 8007098:	08007045 	.word	0x08007045
 800709c:	080071f7 	.word	0x080071f7
 80070a0:	08007045 	.word	0x08007045
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	08007045 	.word	0x08007045
 80070ac:	08007045 	.word	0x08007045
 80070b0:	080071bf 	.word	0x080071bf
 80070b4:	680b      	ldr	r3, [r1, #0]
 80070b6:	1d1a      	adds	r2, r3, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	600a      	str	r2, [r1, #0]
 80070bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070c4:	2301      	movs	r3, #1
 80070c6:	e0a3      	b.n	8007210 <_printf_i+0x1f4>
 80070c8:	6825      	ldr	r5, [r4, #0]
 80070ca:	6808      	ldr	r0, [r1, #0]
 80070cc:	062e      	lsls	r6, r5, #24
 80070ce:	f100 0304 	add.w	r3, r0, #4
 80070d2:	d50a      	bpl.n	80070ea <_printf_i+0xce>
 80070d4:	6805      	ldr	r5, [r0, #0]
 80070d6:	600b      	str	r3, [r1, #0]
 80070d8:	2d00      	cmp	r5, #0
 80070da:	da03      	bge.n	80070e4 <_printf_i+0xc8>
 80070dc:	232d      	movs	r3, #45	; 0x2d
 80070de:	426d      	negs	r5, r5
 80070e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e4:	485e      	ldr	r0, [pc, #376]	; (8007260 <_printf_i+0x244>)
 80070e6:	230a      	movs	r3, #10
 80070e8:	e019      	b.n	800711e <_printf_i+0x102>
 80070ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070ee:	6805      	ldr	r5, [r0, #0]
 80070f0:	600b      	str	r3, [r1, #0]
 80070f2:	bf18      	it	ne
 80070f4:	b22d      	sxthne	r5, r5
 80070f6:	e7ef      	b.n	80070d8 <_printf_i+0xbc>
 80070f8:	680b      	ldr	r3, [r1, #0]
 80070fa:	6825      	ldr	r5, [r4, #0]
 80070fc:	1d18      	adds	r0, r3, #4
 80070fe:	6008      	str	r0, [r1, #0]
 8007100:	0628      	lsls	r0, r5, #24
 8007102:	d501      	bpl.n	8007108 <_printf_i+0xec>
 8007104:	681d      	ldr	r5, [r3, #0]
 8007106:	e002      	b.n	800710e <_printf_i+0xf2>
 8007108:	0669      	lsls	r1, r5, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0xe8>
 800710c:	881d      	ldrh	r5, [r3, #0]
 800710e:	4854      	ldr	r0, [pc, #336]	; (8007260 <_printf_i+0x244>)
 8007110:	2f6f      	cmp	r7, #111	; 0x6f
 8007112:	bf0c      	ite	eq
 8007114:	2308      	moveq	r3, #8
 8007116:	230a      	movne	r3, #10
 8007118:	2100      	movs	r1, #0
 800711a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800711e:	6866      	ldr	r6, [r4, #4]
 8007120:	60a6      	str	r6, [r4, #8]
 8007122:	2e00      	cmp	r6, #0
 8007124:	bfa2      	ittt	ge
 8007126:	6821      	ldrge	r1, [r4, #0]
 8007128:	f021 0104 	bicge.w	r1, r1, #4
 800712c:	6021      	strge	r1, [r4, #0]
 800712e:	b90d      	cbnz	r5, 8007134 <_printf_i+0x118>
 8007130:	2e00      	cmp	r6, #0
 8007132:	d04d      	beq.n	80071d0 <_printf_i+0x1b4>
 8007134:	4616      	mov	r6, r2
 8007136:	fbb5 f1f3 	udiv	r1, r5, r3
 800713a:	fb03 5711 	mls	r7, r3, r1, r5
 800713e:	5dc7      	ldrb	r7, [r0, r7]
 8007140:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007144:	462f      	mov	r7, r5
 8007146:	42bb      	cmp	r3, r7
 8007148:	460d      	mov	r5, r1
 800714a:	d9f4      	bls.n	8007136 <_printf_i+0x11a>
 800714c:	2b08      	cmp	r3, #8
 800714e:	d10b      	bne.n	8007168 <_printf_i+0x14c>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	07df      	lsls	r7, r3, #31
 8007154:	d508      	bpl.n	8007168 <_printf_i+0x14c>
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	6861      	ldr	r1, [r4, #4]
 800715a:	4299      	cmp	r1, r3
 800715c:	bfde      	ittt	le
 800715e:	2330      	movle	r3, #48	; 0x30
 8007160:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007164:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007168:	1b92      	subs	r2, r2, r6
 800716a:	6122      	str	r2, [r4, #16]
 800716c:	f8cd a000 	str.w	sl, [sp]
 8007170:	464b      	mov	r3, r9
 8007172:	aa03      	add	r2, sp, #12
 8007174:	4621      	mov	r1, r4
 8007176:	4640      	mov	r0, r8
 8007178:	f7ff fee2 	bl	8006f40 <_printf_common>
 800717c:	3001      	adds	r0, #1
 800717e:	d14c      	bne.n	800721a <_printf_i+0x1fe>
 8007180:	f04f 30ff 	mov.w	r0, #4294967295
 8007184:	b004      	add	sp, #16
 8007186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718a:	4835      	ldr	r0, [pc, #212]	; (8007260 <_printf_i+0x244>)
 800718c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	680e      	ldr	r6, [r1, #0]
 8007194:	061f      	lsls	r7, r3, #24
 8007196:	f856 5b04 	ldr.w	r5, [r6], #4
 800719a:	600e      	str	r6, [r1, #0]
 800719c:	d514      	bpl.n	80071c8 <_printf_i+0x1ac>
 800719e:	07d9      	lsls	r1, r3, #31
 80071a0:	bf44      	itt	mi
 80071a2:	f043 0320 	orrmi.w	r3, r3, #32
 80071a6:	6023      	strmi	r3, [r4, #0]
 80071a8:	b91d      	cbnz	r5, 80071b2 <_printf_i+0x196>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	f023 0320 	bic.w	r3, r3, #32
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	2310      	movs	r3, #16
 80071b4:	e7b0      	b.n	8007118 <_printf_i+0xfc>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	f043 0320 	orr.w	r3, r3, #32
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	2378      	movs	r3, #120	; 0x78
 80071c0:	4828      	ldr	r0, [pc, #160]	; (8007264 <_printf_i+0x248>)
 80071c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071c6:	e7e3      	b.n	8007190 <_printf_i+0x174>
 80071c8:	065e      	lsls	r6, r3, #25
 80071ca:	bf48      	it	mi
 80071cc:	b2ad      	uxthmi	r5, r5
 80071ce:	e7e6      	b.n	800719e <_printf_i+0x182>
 80071d0:	4616      	mov	r6, r2
 80071d2:	e7bb      	b.n	800714c <_printf_i+0x130>
 80071d4:	680b      	ldr	r3, [r1, #0]
 80071d6:	6826      	ldr	r6, [r4, #0]
 80071d8:	6960      	ldr	r0, [r4, #20]
 80071da:	1d1d      	adds	r5, r3, #4
 80071dc:	600d      	str	r5, [r1, #0]
 80071de:	0635      	lsls	r5, r6, #24
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	d501      	bpl.n	80071e8 <_printf_i+0x1cc>
 80071e4:	6018      	str	r0, [r3, #0]
 80071e6:	e002      	b.n	80071ee <_printf_i+0x1d2>
 80071e8:	0671      	lsls	r1, r6, #25
 80071ea:	d5fb      	bpl.n	80071e4 <_printf_i+0x1c8>
 80071ec:	8018      	strh	r0, [r3, #0]
 80071ee:	2300      	movs	r3, #0
 80071f0:	6123      	str	r3, [r4, #16]
 80071f2:	4616      	mov	r6, r2
 80071f4:	e7ba      	b.n	800716c <_printf_i+0x150>
 80071f6:	680b      	ldr	r3, [r1, #0]
 80071f8:	1d1a      	adds	r2, r3, #4
 80071fa:	600a      	str	r2, [r1, #0]
 80071fc:	681e      	ldr	r6, [r3, #0]
 80071fe:	6862      	ldr	r2, [r4, #4]
 8007200:	2100      	movs	r1, #0
 8007202:	4630      	mov	r0, r6
 8007204:	f7f9 f81c 	bl	8000240 <memchr>
 8007208:	b108      	cbz	r0, 800720e <_printf_i+0x1f2>
 800720a:	1b80      	subs	r0, r0, r6
 800720c:	6060      	str	r0, [r4, #4]
 800720e:	6863      	ldr	r3, [r4, #4]
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	2300      	movs	r3, #0
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007218:	e7a8      	b.n	800716c <_printf_i+0x150>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	4632      	mov	r2, r6
 800721e:	4649      	mov	r1, r9
 8007220:	4640      	mov	r0, r8
 8007222:	47d0      	blx	sl
 8007224:	3001      	adds	r0, #1
 8007226:	d0ab      	beq.n	8007180 <_printf_i+0x164>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	079b      	lsls	r3, r3, #30
 800722c:	d413      	bmi.n	8007256 <_printf_i+0x23a>
 800722e:	68e0      	ldr	r0, [r4, #12]
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	4298      	cmp	r0, r3
 8007234:	bfb8      	it	lt
 8007236:	4618      	movlt	r0, r3
 8007238:	e7a4      	b.n	8007184 <_printf_i+0x168>
 800723a:	2301      	movs	r3, #1
 800723c:	4632      	mov	r2, r6
 800723e:	4649      	mov	r1, r9
 8007240:	4640      	mov	r0, r8
 8007242:	47d0      	blx	sl
 8007244:	3001      	adds	r0, #1
 8007246:	d09b      	beq.n	8007180 <_printf_i+0x164>
 8007248:	3501      	adds	r5, #1
 800724a:	68e3      	ldr	r3, [r4, #12]
 800724c:	9903      	ldr	r1, [sp, #12]
 800724e:	1a5b      	subs	r3, r3, r1
 8007250:	42ab      	cmp	r3, r5
 8007252:	dcf2      	bgt.n	800723a <_printf_i+0x21e>
 8007254:	e7eb      	b.n	800722e <_printf_i+0x212>
 8007256:	2500      	movs	r5, #0
 8007258:	f104 0619 	add.w	r6, r4, #25
 800725c:	e7f5      	b.n	800724a <_printf_i+0x22e>
 800725e:	bf00      	nop
 8007260:	080075a2 	.word	0x080075a2
 8007264:	080075b3 	.word	0x080075b3

08007268 <memmove>:
 8007268:	4288      	cmp	r0, r1
 800726a:	b510      	push	{r4, lr}
 800726c:	eb01 0402 	add.w	r4, r1, r2
 8007270:	d902      	bls.n	8007278 <memmove+0x10>
 8007272:	4284      	cmp	r4, r0
 8007274:	4623      	mov	r3, r4
 8007276:	d807      	bhi.n	8007288 <memmove+0x20>
 8007278:	1e43      	subs	r3, r0, #1
 800727a:	42a1      	cmp	r1, r4
 800727c:	d008      	beq.n	8007290 <memmove+0x28>
 800727e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007286:	e7f8      	b.n	800727a <memmove+0x12>
 8007288:	4402      	add	r2, r0
 800728a:	4601      	mov	r1, r0
 800728c:	428a      	cmp	r2, r1
 800728e:	d100      	bne.n	8007292 <memmove+0x2a>
 8007290:	bd10      	pop	{r4, pc}
 8007292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800729a:	e7f7      	b.n	800728c <memmove+0x24>

0800729c <_free_r>:
 800729c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800729e:	2900      	cmp	r1, #0
 80072a0:	d048      	beq.n	8007334 <_free_r+0x98>
 80072a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a6:	9001      	str	r0, [sp, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f1a1 0404 	sub.w	r4, r1, #4
 80072ae:	bfb8      	it	lt
 80072b0:	18e4      	addlt	r4, r4, r3
 80072b2:	f000 f8d3 	bl	800745c <__malloc_lock>
 80072b6:	4a20      	ldr	r2, [pc, #128]	; (8007338 <_free_r+0x9c>)
 80072b8:	9801      	ldr	r0, [sp, #4]
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	4615      	mov	r5, r2
 80072be:	b933      	cbnz	r3, 80072ce <_free_r+0x32>
 80072c0:	6063      	str	r3, [r4, #4]
 80072c2:	6014      	str	r4, [r2, #0]
 80072c4:	b003      	add	sp, #12
 80072c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072ca:	f000 b8cd 	b.w	8007468 <__malloc_unlock>
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	d90b      	bls.n	80072ea <_free_r+0x4e>
 80072d2:	6821      	ldr	r1, [r4, #0]
 80072d4:	1862      	adds	r2, r4, r1
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bf04      	itt	eq
 80072da:	681a      	ldreq	r2, [r3, #0]
 80072dc:	685b      	ldreq	r3, [r3, #4]
 80072de:	6063      	str	r3, [r4, #4]
 80072e0:	bf04      	itt	eq
 80072e2:	1852      	addeq	r2, r2, r1
 80072e4:	6022      	streq	r2, [r4, #0]
 80072e6:	602c      	str	r4, [r5, #0]
 80072e8:	e7ec      	b.n	80072c4 <_free_r+0x28>
 80072ea:	461a      	mov	r2, r3
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	b10b      	cbz	r3, 80072f4 <_free_r+0x58>
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	d9fa      	bls.n	80072ea <_free_r+0x4e>
 80072f4:	6811      	ldr	r1, [r2, #0]
 80072f6:	1855      	adds	r5, r2, r1
 80072f8:	42a5      	cmp	r5, r4
 80072fa:	d10b      	bne.n	8007314 <_free_r+0x78>
 80072fc:	6824      	ldr	r4, [r4, #0]
 80072fe:	4421      	add	r1, r4
 8007300:	1854      	adds	r4, r2, r1
 8007302:	42a3      	cmp	r3, r4
 8007304:	6011      	str	r1, [r2, #0]
 8007306:	d1dd      	bne.n	80072c4 <_free_r+0x28>
 8007308:	681c      	ldr	r4, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	6053      	str	r3, [r2, #4]
 800730e:	4421      	add	r1, r4
 8007310:	6011      	str	r1, [r2, #0]
 8007312:	e7d7      	b.n	80072c4 <_free_r+0x28>
 8007314:	d902      	bls.n	800731c <_free_r+0x80>
 8007316:	230c      	movs	r3, #12
 8007318:	6003      	str	r3, [r0, #0]
 800731a:	e7d3      	b.n	80072c4 <_free_r+0x28>
 800731c:	6825      	ldr	r5, [r4, #0]
 800731e:	1961      	adds	r1, r4, r5
 8007320:	428b      	cmp	r3, r1
 8007322:	bf04      	itt	eq
 8007324:	6819      	ldreq	r1, [r3, #0]
 8007326:	685b      	ldreq	r3, [r3, #4]
 8007328:	6063      	str	r3, [r4, #4]
 800732a:	bf04      	itt	eq
 800732c:	1949      	addeq	r1, r1, r5
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	6054      	str	r4, [r2, #4]
 8007332:	e7c7      	b.n	80072c4 <_free_r+0x28>
 8007334:	b003      	add	sp, #12
 8007336:	bd30      	pop	{r4, r5, pc}
 8007338:	20003dd4 	.word	0x20003dd4

0800733c <_malloc_r>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	1ccd      	adds	r5, r1, #3
 8007340:	f025 0503 	bic.w	r5, r5, #3
 8007344:	3508      	adds	r5, #8
 8007346:	2d0c      	cmp	r5, #12
 8007348:	bf38      	it	cc
 800734a:	250c      	movcc	r5, #12
 800734c:	2d00      	cmp	r5, #0
 800734e:	4606      	mov	r6, r0
 8007350:	db01      	blt.n	8007356 <_malloc_r+0x1a>
 8007352:	42a9      	cmp	r1, r5
 8007354:	d903      	bls.n	800735e <_malloc_r+0x22>
 8007356:	230c      	movs	r3, #12
 8007358:	6033      	str	r3, [r6, #0]
 800735a:	2000      	movs	r0, #0
 800735c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800735e:	f000 f87d 	bl	800745c <__malloc_lock>
 8007362:	4921      	ldr	r1, [pc, #132]	; (80073e8 <_malloc_r+0xac>)
 8007364:	680a      	ldr	r2, [r1, #0]
 8007366:	4614      	mov	r4, r2
 8007368:	b99c      	cbnz	r4, 8007392 <_malloc_r+0x56>
 800736a:	4f20      	ldr	r7, [pc, #128]	; (80073ec <_malloc_r+0xb0>)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	b923      	cbnz	r3, 800737a <_malloc_r+0x3e>
 8007370:	4621      	mov	r1, r4
 8007372:	4630      	mov	r0, r6
 8007374:	f000 f862 	bl	800743c <_sbrk_r>
 8007378:	6038      	str	r0, [r7, #0]
 800737a:	4629      	mov	r1, r5
 800737c:	4630      	mov	r0, r6
 800737e:	f000 f85d 	bl	800743c <_sbrk_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d123      	bne.n	80073ce <_malloc_r+0x92>
 8007386:	230c      	movs	r3, #12
 8007388:	6033      	str	r3, [r6, #0]
 800738a:	4630      	mov	r0, r6
 800738c:	f000 f86c 	bl	8007468 <__malloc_unlock>
 8007390:	e7e3      	b.n	800735a <_malloc_r+0x1e>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	1b5b      	subs	r3, r3, r5
 8007396:	d417      	bmi.n	80073c8 <_malloc_r+0x8c>
 8007398:	2b0b      	cmp	r3, #11
 800739a:	d903      	bls.n	80073a4 <_malloc_r+0x68>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	441c      	add	r4, r3
 80073a0:	6025      	str	r5, [r4, #0]
 80073a2:	e004      	b.n	80073ae <_malloc_r+0x72>
 80073a4:	6863      	ldr	r3, [r4, #4]
 80073a6:	42a2      	cmp	r2, r4
 80073a8:	bf0c      	ite	eq
 80073aa:	600b      	streq	r3, [r1, #0]
 80073ac:	6053      	strne	r3, [r2, #4]
 80073ae:	4630      	mov	r0, r6
 80073b0:	f000 f85a 	bl	8007468 <__malloc_unlock>
 80073b4:	f104 000b 	add.w	r0, r4, #11
 80073b8:	1d23      	adds	r3, r4, #4
 80073ba:	f020 0007 	bic.w	r0, r0, #7
 80073be:	1ac2      	subs	r2, r0, r3
 80073c0:	d0cc      	beq.n	800735c <_malloc_r+0x20>
 80073c2:	1a1b      	subs	r3, r3, r0
 80073c4:	50a3      	str	r3, [r4, r2]
 80073c6:	e7c9      	b.n	800735c <_malloc_r+0x20>
 80073c8:	4622      	mov	r2, r4
 80073ca:	6864      	ldr	r4, [r4, #4]
 80073cc:	e7cc      	b.n	8007368 <_malloc_r+0x2c>
 80073ce:	1cc4      	adds	r4, r0, #3
 80073d0:	f024 0403 	bic.w	r4, r4, #3
 80073d4:	42a0      	cmp	r0, r4
 80073d6:	d0e3      	beq.n	80073a0 <_malloc_r+0x64>
 80073d8:	1a21      	subs	r1, r4, r0
 80073da:	4630      	mov	r0, r6
 80073dc:	f000 f82e 	bl	800743c <_sbrk_r>
 80073e0:	3001      	adds	r0, #1
 80073e2:	d1dd      	bne.n	80073a0 <_malloc_r+0x64>
 80073e4:	e7cf      	b.n	8007386 <_malloc_r+0x4a>
 80073e6:	bf00      	nop
 80073e8:	20003dd4 	.word	0x20003dd4
 80073ec:	20003dd8 	.word	0x20003dd8

080073f0 <_realloc_r>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	4607      	mov	r7, r0
 80073f4:	4614      	mov	r4, r2
 80073f6:	460e      	mov	r6, r1
 80073f8:	b921      	cbnz	r1, 8007404 <_realloc_r+0x14>
 80073fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80073fe:	4611      	mov	r1, r2
 8007400:	f7ff bf9c 	b.w	800733c <_malloc_r>
 8007404:	b922      	cbnz	r2, 8007410 <_realloc_r+0x20>
 8007406:	f7ff ff49 	bl	800729c <_free_r>
 800740a:	4625      	mov	r5, r4
 800740c:	4628      	mov	r0, r5
 800740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007410:	f000 f830 	bl	8007474 <_malloc_usable_size_r>
 8007414:	42a0      	cmp	r0, r4
 8007416:	d20f      	bcs.n	8007438 <_realloc_r+0x48>
 8007418:	4621      	mov	r1, r4
 800741a:	4638      	mov	r0, r7
 800741c:	f7ff ff8e 	bl	800733c <_malloc_r>
 8007420:	4605      	mov	r5, r0
 8007422:	2800      	cmp	r0, #0
 8007424:	d0f2      	beq.n	800740c <_realloc_r+0x1c>
 8007426:	4631      	mov	r1, r6
 8007428:	4622      	mov	r2, r4
 800742a:	f7ff fbf7 	bl	8006c1c <memcpy>
 800742e:	4631      	mov	r1, r6
 8007430:	4638      	mov	r0, r7
 8007432:	f7ff ff33 	bl	800729c <_free_r>
 8007436:	e7e9      	b.n	800740c <_realloc_r+0x1c>
 8007438:	4635      	mov	r5, r6
 800743a:	e7e7      	b.n	800740c <_realloc_r+0x1c>

0800743c <_sbrk_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	; (8007458 <_sbrk_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7fa ff48 	bl	80022dc <_sbrk>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_sbrk_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_sbrk_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20003e6c 	.word	0x20003e6c

0800745c <__malloc_lock>:
 800745c:	4801      	ldr	r0, [pc, #4]	; (8007464 <__malloc_lock+0x8>)
 800745e:	f000 b811 	b.w	8007484 <__retarget_lock_acquire_recursive>
 8007462:	bf00      	nop
 8007464:	20003e74 	.word	0x20003e74

08007468 <__malloc_unlock>:
 8007468:	4801      	ldr	r0, [pc, #4]	; (8007470 <__malloc_unlock+0x8>)
 800746a:	f000 b80c 	b.w	8007486 <__retarget_lock_release_recursive>
 800746e:	bf00      	nop
 8007470:	20003e74 	.word	0x20003e74

08007474 <_malloc_usable_size_r>:
 8007474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007478:	1f18      	subs	r0, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	bfbc      	itt	lt
 800747e:	580b      	ldrlt	r3, [r1, r0]
 8007480:	18c0      	addlt	r0, r0, r3
 8007482:	4770      	bx	lr

08007484 <__retarget_lock_acquire_recursive>:
 8007484:	4770      	bx	lr

08007486 <__retarget_lock_release_recursive>:
 8007486:	4770      	bx	lr

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
